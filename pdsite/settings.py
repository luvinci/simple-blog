"""
Django settings for pdsite project.

Generated by "django-admin startproject" using Django 1.11.20.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "-d47xmt^@n9f4l69m_^pe8=8bs$)jts00vv^*at&)3&6_8y#^x"

# SECURITY WARNING: don"t run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "blog.apps.BlogConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "pdsite.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")]
        ,
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "pdsite.wsgi.application"


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
#     }
# }

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": "pdsite",
        "USER": "root",
        "PASSWORD": "123456",
        "HOST": "127.0.0.1",
        "PORT": 3306,

        # "OPTIONS": {
        #     "init_command": "SET sql_mode='STRICT_TRANS_TABLES'"
        # }
    }
}

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Shanghai"

USE_I18N = True

USE_L10N = True

# 这个要修改为 False，不然文章归档将查询不到数据
USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = "/static/"

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

# 设置成自己定义的表用来做用户验证
AUTH_USER_MODEL = "blog.UserInfo"

MEDIA_URL = "/media/"

MEDIA_ROOT = os.path.join(BASE_DIR, "media")

LOGIN_URL = "/signin/"

# 项目级别的日志配置
BASE_LOG_DIR = os.path.join(BASE_DIR, "log")

LOGGING = {
    "version": 1,  # 保留的参数，默认是1
    "disable_existing_loggers": False,  # 是否禁用已经存在的logger示例，不禁用
    "formatters": {
        "standard": {  # 定义一个标准的日志格式化
            "format": "[%(asctime)s][%(threadName)s:%(thread)d][task_id:%(name)s][%(filename)s:%(lineno)d]"
                      "[%(levelname)s][%(message)s]"
        },
        "simple": {  # 定义一个简单的日志格式化
            "format": "[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d]%(message)s"
        },
        "collect": {  # 定义一个特殊的日志格式化
            "format": "%(message)s"
        }
    },
    # 过滤器
    "filters": {
        # 只有在deubg=True的过滤器
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
    },
    # 处理器
    "handlers": {
        # 定义一个专门往终端打印日志的控制器
        "console": {
            "level": "DEBUG",
            "filters": ["require_debug_true"],  # 只有在Django debug为True时才在屏幕打印日志
            "class": "logging.StreamHandler",  # 使用什么类去处理日志流
            "formatter": "simple"
        },
        # 定义一个默认的日志处理器
        "default": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",  # 保存到文件，自动切
            "filename": os.path.join(BASE_LOG_DIR, "info.log"),  # 日志文件
            "maxBytes": 1024 * 1024 * 50,  # 日志大小 50M
            "backupCount": 5,  # 日志文件备份的数量
            "formatter": "standard",
            "encoding": "utf-8",
        },
        # 定义一个专门及错误日志的处理器
        "error": {
            "level": "ERROR",
            "class": "logging.handlers.RotatingFileHandler",  # 保存到文件，自动切
            "filename": os.path.join(BASE_LOG_DIR, "error.log"),  # 日志文件
            "maxBytes": 1024 * 1024 * 50,  # 日志大小 50M
            "backupCount": 5,
            "formatter": "standard",
            "encoding": "utf-8",
        },
    },

    "loggers": {
        # 默认的logger应用如下配置
        "": {
            "handlers": ["default", "console", "error"],  # 上线之后可以把"console"移除
            "level": "DEBUG",
            "propagate": True,  # 如果有父级的logger示例，表示要不要向上传递日志流
        }
    },
}

