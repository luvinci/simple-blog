/*
 Navicat Premium Data Transfer

 Source Server         : mysql-aliyun
 Source Server Type    : MySQL
 Source Server Version : 80021
 Source Host           : 101.200.243.176:3306
 Source Schema         : pdsite

 Target Server Type    : MySQL
 Target Server Version : 80021
 File Encoding         : 65001

 Date: 29/09/2020 17:14:38
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for auth_group
-- ----------------------------
DROP TABLE IF EXISTS `auth_group`;
CREATE TABLE `auth_group`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `name` varchar(80) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `name`(`name`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for auth_group_permissions
-- ----------------------------
DROP TABLE IF EXISTS `auth_group_permissions`;
CREATE TABLE `auth_group_permissions`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `group_id` int(0) NOT NULL,
  `permission_id` int(0) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `auth_group_permissions_group_id_permission_id_0cd325b0_uniq`(`group_id`, `permission_id`) USING BTREE,
  INDEX `auth_group_permissio_permission_id_84c5c92e_fk_auth_perm`(`permission_id`) USING BTREE,
  CONSTRAINT `auth_group_permissio_permission_id_84c5c92e_fk_auth_perm` FOREIGN KEY (`permission_id`) REFERENCES `auth_permission` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `auth_group_permissions_group_id_b120cbf9_fk_auth_group_id` FOREIGN KEY (`group_id`) REFERENCES `auth_group` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for auth_permission
-- ----------------------------
DROP TABLE IF EXISTS `auth_permission`;
CREATE TABLE `auth_permission`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `content_type_id` int(0) NOT NULL,
  `codename` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `auth_permission_content_type_id_codename_01ab375a_uniq`(`content_type_id`, `codename`) USING BTREE,
  CONSTRAINT `auth_permission_content_type_id_2f476e4b_fk_django_co` FOREIGN KEY (`content_type_id`) REFERENCES `django_content_type` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 43 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of auth_permission
-- ----------------------------
INSERT INTO `auth_permission` VALUES (1, 'Can add log entry', 1, 'add_logentry');
INSERT INTO `auth_permission` VALUES (2, 'Can change log entry', 1, 'change_logentry');
INSERT INTO `auth_permission` VALUES (3, 'Can delete log entry', 1, 'delete_logentry');
INSERT INTO `auth_permission` VALUES (4, 'Can add permission', 2, 'add_permission');
INSERT INTO `auth_permission` VALUES (5, 'Can change permission', 2, 'change_permission');
INSERT INTO `auth_permission` VALUES (6, 'Can delete permission', 2, 'delete_permission');
INSERT INTO `auth_permission` VALUES (7, 'Can add group', 3, 'add_group');
INSERT INTO `auth_permission` VALUES (8, 'Can change group', 3, 'change_group');
INSERT INTO `auth_permission` VALUES (9, 'Can delete group', 3, 'delete_group');
INSERT INTO `auth_permission` VALUES (10, 'Can add content type', 4, 'add_contenttype');
INSERT INTO `auth_permission` VALUES (11, 'Can change content type', 4, 'change_contenttype');
INSERT INTO `auth_permission` VALUES (12, 'Can delete content type', 4, 'delete_contenttype');
INSERT INTO `auth_permission` VALUES (13, 'Can add session', 5, 'add_session');
INSERT INTO `auth_permission` VALUES (14, 'Can change session', 5, 'change_session');
INSERT INTO `auth_permission` VALUES (15, 'Can delete session', 5, 'delete_session');
INSERT INTO `auth_permission` VALUES (16, 'Can add user', 6, 'add_userinfo');
INSERT INTO `auth_permission` VALUES (17, 'Can change user', 6, 'change_userinfo');
INSERT INTO `auth_permission` VALUES (18, 'Can delete user', 6, 'delete_userinfo');
INSERT INTO `auth_permission` VALUES (19, 'Can add article', 7, 'add_article');
INSERT INTO `auth_permission` VALUES (20, 'Can change article', 7, 'change_article');
INSERT INTO `auth_permission` VALUES (21, 'Can delete article', 7, 'delete_article');
INSERT INTO `auth_permission` VALUES (22, 'Can add article2 tag', 8, 'add_article2tag');
INSERT INTO `auth_permission` VALUES (23, 'Can change article2 tag', 8, 'change_article2tag');
INSERT INTO `auth_permission` VALUES (24, 'Can delete article2 tag', 8, 'delete_article2tag');
INSERT INTO `auth_permission` VALUES (25, 'Can add article detail', 9, 'add_articledetail');
INSERT INTO `auth_permission` VALUES (26, 'Can change article detail', 9, 'change_articledetail');
INSERT INTO `auth_permission` VALUES (27, 'Can delete article detail', 9, 'delete_articledetail');
INSERT INTO `auth_permission` VALUES (28, 'Can add article up down', 10, 'add_articleupdown');
INSERT INTO `auth_permission` VALUES (29, 'Can change article up down', 10, 'change_articleupdown');
INSERT INTO `auth_permission` VALUES (30, 'Can delete article up down', 10, 'delete_articleupdown');
INSERT INTO `auth_permission` VALUES (31, 'Can add blog', 11, 'add_blog');
INSERT INTO `auth_permission` VALUES (32, 'Can change blog', 11, 'change_blog');
INSERT INTO `auth_permission` VALUES (33, 'Can delete blog', 11, 'delete_blog');
INSERT INTO `auth_permission` VALUES (34, 'Can add category', 12, 'add_category');
INSERT INTO `auth_permission` VALUES (35, 'Can change category', 12, 'change_category');
INSERT INTO `auth_permission` VALUES (36, 'Can delete category', 12, 'delete_category');
INSERT INTO `auth_permission` VALUES (37, 'Can add comment', 13, 'add_comment');
INSERT INTO `auth_permission` VALUES (38, 'Can change comment', 13, 'change_comment');
INSERT INTO `auth_permission` VALUES (39, 'Can delete comment', 13, 'delete_comment');
INSERT INTO `auth_permission` VALUES (40, 'Can add tag', 14, 'add_tag');
INSERT INTO `auth_permission` VALUES (41, 'Can change tag', 14, 'change_tag');
INSERT INTO `auth_permission` VALUES (42, 'Can delete tag', 14, 'delete_tag');

-- ----------------------------
-- Table structure for blog_article
-- ----------------------------
DROP TABLE IF EXISTS `blog_article`;
CREATE TABLE `blog_article`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `title` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `desc` varchar(120) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `publish_time` datetime(6) NOT NULL,
  `comment_count` int(0) NOT NULL,
  `up_count` int(0) NOT NULL,
  `down_count` int(0) NOT NULL,
  `blog_id` int(0) NULL DEFAULT NULL,
  `category_id` int(0) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `blog_article_blog_id_63b43504_fk_blog_blog_id`(`blog_id`) USING BTREE,
  INDEX `blog_article_category_id_7e38f15e_fk_blog_category_id`(`category_id`) USING BTREE,
  CONSTRAINT `blog_article_blog_id_63b43504_fk_blog_blog_id` FOREIGN KEY (`blog_id`) REFERENCES `blog_blog` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `blog_article_category_id_7e38f15e_fk_blog_category_id` FOREIGN KEY (`category_id`) REFERENCES `blog_category` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 31 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of blog_article
-- ----------------------------
INSERT INTO `blog_article` VALUES (1, '抱怨，是对自己无能的愤慨', '生活就如同时间一样，对每一个人都是一样的。但是却因为人与人思想、思维、心态等不同便出现了不同的生活局面，有的人过得贫苦心酸，有的人过得衣食无忧，有的人过得锦衣玉食。\n\n\n\n		        面对如此落...', '2018-07-26 14:25:55.000000', 0, 0, 0, 1, 1);
INSERT INTO `blog_article` VALUES (4, 'ORM优化', 'orm优化数据库访问：https://docs.djangoproject.com/en/1.11/topics/db/optimization/\n\n\n一、QuerySet\n\n\n可迭代\n\n\nquerysey=mode...', '2018-12-05 09:25:05.000000', 0, 0, 0, 1, 2);
INSERT INTO `blog_article` VALUES (6, 'ES6', 'ECMAScript 6 标准入门\n一、let和const\nlet命令\nlet命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效；是块级作用域，且let不允许在相同作用域内，重复...', '2018-12-21 19:33:40.000000', 0, 0, 0, 1, 2);
INSERT INTO `blog_article` VALUES (7, 'MySQL之索引以及正确使用索引', '一、MySQL中常见索引类型\n\n普通索引：仅加速查询\n主键索引：加速查询、列值唯一、表中只有一个（不可有null）\n唯一索引：加速查询、列值唯一（可以有null）\n组合索引：多列值组成一个索引，专门用于组合搜索，其效率大...', '2019-02-13 06:34:42.000000', 0, 0, 0, 1, 2);
INSERT INTO `blog_article` VALUES (8, '爬虫之Re库', '一、常见匹配模式\n\n\\W        # 匹配字母数字及下划线\n\\W        # 匹配非字母数字下划线\n\\s        # 匹配任意空白字符，等价于[\\t\\n\\r\\f]\n\\S        # 匹配任意非空字...', '2019-02-21 14:35:44.000000', 0, 0, 0, 1, 2);
INSERT INTO `blog_article` VALUES (9, 'collections、random、hashlib、configparser、logging模块', 'collections模块\n在内置数据类型（dict、list、set、tuple）的基础上，collections模块还提供了几个额外的数据类型：Counter、deque、defaultdict、namedtuple...', '2019-03-14 22:36:29.000000', 0, 0, 0, 1, 2);
INSERT INTO `blog_article` VALUES (11, '人总该要有理想', '前苏联领导人斯大林曾经说过：“有理想的人，生活总是火热的”，人总该是要有理想的，没有理想的人就是一条咸鱼。\n\n\n从前，某块地里有两颗种子，一颗体型硕大，且已经冒出了一点儿芽儿，而再观另一颗，长得瘦瘦小小的，不知何时才能...', '2019-04-11 15:39:35.000000', 0, 0, 0, 1, 1);
INSERT INTO `blog_article` VALUES (13, 'Go操作etcd', 'etcd是近几年比较火热的一个开源的、分布式的键值对数据存储系统，提供共享配置、服务的注册和发现，本文主要介绍etcd的安装和使用。\n	\n\n		etcd\n	\n\n		etcd介绍\n	\n\netcd是使用Go语言开发的...', '2020-02-12 11:10:38.000000', 0, 0, 0, 1, 2);
INSERT INTO `blog_article` VALUES (14, 'Go标准库context', '在 Go http包的Server中，每一个请求在都有一个对应的 goroutine 去处理。请求处理函数通常会启动额外的 goroutine 用来访问后端服务，比如数据库和RPC服务。用来处理一个请求的 gor...', '2020-02-23 11:11:57.000000', 0, 0, 0, 1, 2);
INSERT INTO `blog_article` VALUES (15, 'Elasticsearch', '本文简单介绍了ES、Kibana和Go语言操作ES。\nElasticsearch\n介绍\nElasticsearch（ES）是一个基于Lucene构建的开源、分布式、RESTful接口的全文搜索引擎。Elasticsea...', '2020-03-29 11:13:09.000000', 0, 0, 0, 1, 2);
INSERT INTO `blog_article` VALUES (16, 'Gin框架介绍及使用', 'Gin是一个用Go语言编写的web框架。它是一个类似于martini但拥有更好性能的API框架, 由于使用了httprouter，速度提高了近40倍。 如果你是性能和高效的追求者, 你会爱上Gin。\nGin框架介绍\nG...', '2020-04-19 11:15:25.000000', 0, 0, 0, 1, 2);
INSERT INTO `blog_article` VALUES (17, 'Go操作redis', '在项目开发中redis的使用也比较频繁，本文介绍了Go语言中go-redis库的基本使用。\nRedis介绍\nRedis是一个开源的内存数据库，Redis提供了多种不同类型的数据结构，很多业务场景下的问题都可以很自然地映...', '2020-04-21 11:16:29.000000', 0, 0, 0, 1, 2);
INSERT INTO `blog_article` VALUES (18, 'Go操作mysql', 'MySQL是业界常用的关系型数据库，本文介绍了Go语言如何操作MySQL数据库。\nGo操作MySQL\n连接\nGo语言中的database/sql包提供了保证SQL或类SQL数据库的泛用接口，并不提供具体的数据库驱动。使...', '2020-04-24 11:17:24.000000', 0, 0, 0, 1, 2);
INSERT INTO `blog_article` VALUES (19, 'Go文件操作', '本文主要介绍了Go语言中文件读写的相关操作。\n文件是什么？\n计算机中的文件是存储在外部介质（通常是磁盘）上的数据集合，文件分为文本文件和二进制文件。\n打开和关闭文件\nos.Open()函数能够打开一个文件，返回一个*F...', '2020-05-06 11:18:22.000000', 0, 0, 0, 1, 2);
INSERT INTO `blog_article` VALUES (20, '使用swagger生成接口文档', '有时候一份清晰明了的接口文档能够极大地提高前后端双方的沟通效率和开发效率。本文将介绍如何使用swagger生成接口文档。\nswagger生成接口文档\nswagger介绍\nSwagger本质上是一种用于描述使用JSON表...', '2020-05-12 11:19:38.000000', 0, 0, 0, 1, 2);
INSERT INTO `blog_article` VALUES (21, 'Go之sqlx', '在项目中我们通常可能会使用database/sql连接MySQL数据库。本文借助使用sqlx实现批量插入数据的例子，介绍了sqlx中可能被你忽视了的sqlx.In和DB.NamedExec方法。\nsqlx介绍\n在项目中...', '2020-06-23 11:21:57.000000', 0, 0, 0, 1, 2);
INSERT INTO `blog_article` VALUES (22, '谈谈 redis 在项目中的常见使用场景', '缓存\n		\n\n> set User:1:name shanyue EX 100 NX\nOK > get User:1:name \"shanyue\" \n\n\n			缓存是redis出镜率最高的一种使用场景，仅仅使...', '2020-07-04 11:26:08.000000', 0, 0, 0, 1, 2);
INSERT INTO `blog_article` VALUES (23, 'MySQL详细操作', '一、用户管理\n\n\n-- 创建用户\ncreate user \"用户名\"@\"IP地址\" identified by \"密码\";\ncreate user \"pd\"@\"192.168.1.1\" identified by \"12...', '2020-07-28 11:31:35.000000', 0, 1, 0, 1, 2);
INSERT INTO `blog_article` VALUES (25, 'Shell编程', '一、Shell概述\n\nShell是一个命令行解释器，它为用户提供了一个向Linux内核发送请求以便运行程序的界面系统级程序，用户可以用Shell来启动、挂起、停止甚至是编写一些程序。\nShell还是一个功能相当强大的编程...', '2020-08-20 11:34:19.000000', 0, 1, 0, 1, 2);
INSERT INTO `blog_article` VALUES (26, '正则表达式语法', '正则表达式语法\n\n\n字符说明\n\\将下一字符标记为特殊字符、文本、反向引用或八进制转义符。例如，\"n\" 匹配字符 \"n\"，\"\\n\" 匹配换行符，\"\\\\\" 匹配\"\\\"，\"\\(\" 匹配 \"(\"^匹配输入字符串开始的位置。如果设...', '2020-08-28 11:36:04.000000', 0, 1, 0, 1, 2);
INSERT INTO `blog_article` VALUES (27, 'Go新手可能会踩的58个坑', '1. Golang新手可能会踩的58个坑\n\n\n\n1.1. 前言\n\n\n\n1.1.1. 初级篇：1-34\n\n\n1.1.2. 中级篇：36-51\n\n\n1.1.3. 高级篇：52-58\n\n\n\n\n\n\n\n1. Gola...', '2020-09-02 11:37:54.000000', 0, 1, 0, 1, 2);
INSERT INTO `blog_article` VALUES (28, 'Python操作RabbitMQ', '安装Pika Python客户端：\n\npip3 install pika\n\n\n一、单发送单接收\nhttps://www.rabbitmq.com/tutorials/tutorial-one-python.html\n在下...', '2020-09-05 11:40:57.000000', 0, 1, 0, 1, 2);
INSERT INTO `blog_article` VALUES (29, 'MongoDB', '一、Cnetos7安装mongodb\n1.1 安装\n\n\ncd /opt/\nwget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-4.0.7.t...', '2020-09-09 11:42:12.000000', 2, 1, 0, 1, 2);
INSERT INTO `blog_article` VALUES (30, 'Golang 调度器 GMP 原理与调度全分析', '第一章Golang 调度器的由来\n\n\n\n\n			第二章Goroutine 调度器的 GMP 模型及设计思想\n		\n\n			第三章Goroutine 调度场景过程全图文解析\n		\n\n一、Golang “调度器” 的由...', '2020-09-25 16:12:48.018999', 0, 0, 0, 1, 2);

-- ----------------------------
-- Table structure for blog_article2tag
-- ----------------------------
DROP TABLE IF EXISTS `blog_article2tag`;
CREATE TABLE `blog_article2tag`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `article_id` int(0) NOT NULL,
  `tag_id` int(0) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `blog_article2tag_article_id_tag_id_b0745f42_uniq`(`article_id`, `tag_id`) USING BTREE,
  INDEX `blog_article2tag_tag_id_389b9a96_fk_blog_tag_id`(`tag_id`) USING BTREE,
  CONSTRAINT `blog_article2tag_article_id_753a2b60_fk_blog_article_id` FOREIGN KEY (`article_id`) REFERENCES `blog_article` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `blog_article2tag_tag_id_389b9a96_fk_blog_tag_id` FOREIGN KEY (`tag_id`) REFERENCES `blog_tag` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 5 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of blog_article2tag
-- ----------------------------
INSERT INTO `blog_article2tag` VALUES (3, 1, 1);
INSERT INTO `blog_article2tag` VALUES (4, 11, 1);

-- ----------------------------
-- Table structure for blog_articledetail
-- ----------------------------
DROP TABLE IF EXISTS `blog_articledetail`;
CREATE TABLE `blog_articledetail`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `article_id` int(0) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `article_id`(`article_id`) USING BTREE,
  CONSTRAINT `blog_articledetail_article_id_56993a97_fk_blog_article_id` FOREIGN KEY (`article_id`) REFERENCES `blog_article` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 31 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of blog_articledetail
-- ----------------------------
INSERT INTO `blog_articledetail` VALUES (1, '<p style=\'font-family:\"font-size:14px;\'>\n<span style=\'font-family:\"\'>        生活就如同时间一样，对每一个人都是一样的。但是却因为人与人思想、思维、心态等不同便出现了不同的生活局面，有的人过得贫苦心酸，有的人过得衣食无忧，有的人过得锦衣玉食。</span>\n</p>\n<p>\n<p>\n		        面对如此落差的生活，自然就会心生埋怨或牢骚满腹。但是，我们可有进行过深层次的分析和思考，为什么别人可以过得很好而你却过不好？很多时候，我们就是太在意自己家境或父母为我们积累的财富或给予我们的物质基础太过于薄弱，把借口和理由全部推到了父母的身上，如果只是这样那还不为过，要是把自己不努力才导致自己生活不如别人或者当成是父母的罪过，那么这样就太不应该了。\n	</p>\n<p>\n		        父母能给予我们的其实只有生命，这已经是大自然对我们最大的恩赐，我们绝对不能不感恩反而忘恩负义或者恩将仇报等，那是我们最大的罪过。我们其实更应该知道自己的处境和与别人的不同，而找到自己奋斗的方向和目标，并不断地去努力和改变。如果只是一味地进行抱怨或发牢骚，那样可能一辈子也就这样了。\n	</p>\n<p>\n		        在我们的身边出生卑微、家境贫寒、遭遇不好的人比比皆是，但是他们却可以活的潇洒自由、幸福美满，而你怎么不能呢？这就是我们该思考的，应该清楚：“抱怨没有用，一切靠自己”。因为在这个世界上我们唯一能依靠的只有自己，为什么？因为你靠别人，别人不可能永远帮助或者侍奉你，有一天他们会离开你；因为你靠父母，父母不可能永远把你当孩子或不让你长大，有一天他们也会离开你；因为你靠亲戚朋友，亲戚朋友不会时时刻刻都能帮助你，有一天他们也会爱莫能助。\n	</p>\n<p>\n		        抱怨，其实对我们是最大的阻碍，如果我们就因为遇到一点点的不如意或不顺心就开始心灰意冷、者垂头丧气、一蹶不振，整个人急如此颓废下去，那么谁也拯救不了你，谁也改变不了你，最终真的就会谁都看不起你。我们应该时刻保持着一种阳光心态，自信生活，因为生活本来就不会那么美好，那么我们就更没有理由不去把它过好。这种心态其实才是难能可贵的，但是我们很多的人就是做不到，或许他们总会觉得这样就是做作，就是矫情，就是在勉强自己。但是，我们可以仔细地去观察一下我们身边的人，那些整天只会抱怨的有几个成功了？没有。反而那些遇到困难主动寻求解决办法的基本都小有成就，这就是区别，这就是你一直想不明白的。所以，你的生活不如别人那就是因为你吃不了别人能吃的苦，你不想去付出别人付出的那么多，你不去面对或者害怕面对那些困难与挫折。\n	</p>\n<p>\n		        古语有云：“吃得苦中苦，方为人上人”，正是告诉我们在面对生活的苦于累理所应当，我们只有经历了世间的苦才会砥砺我们坚韧不拔的意志和不屈不挠的品格。我们需要的是行动而不是抱怨和牢骚，只有行动才能解决问题，抱怨只能算得上是对自己无能的愤慨。因为自己没有能力或勇气去克服和改变，才会找借口和理由来推脱，才会不断地心生怨艾，最终困扰自己从而庸庸碌碌消耗了一生的宝贵时光。要成为人上人，就必须克服抱怨心态，消除牢骚心理，用一种我能行的自信去拼搏，这样你的人生自然与众不同。\n	</p>\n<p>\n		        要想真正的的活出一个像样的自己，那么就得时时刻刻都正视自己，正视自己的缺点和不足，正视自己生活的不美好之处，正视自己的行动与能力，然后在不断的实践过程中完善自己，彻底的告别抱怨，这样你就会获得一个全新的自己，你才会真正的蜕变，勇敢的走出生活的包围圈，跨出思维的禁锢区和舒适区，大胆的去践行自己的想法，克服生活中的种种困难，只为成功找理由，不为失败找借口。告诉自己，借口和理由只能是某些时候对别人的一种敷衍与应付，但这其实也是不应该的，因为我觉得我们做人就应该敢作敢为，有胆识、有担当，绝无任何借口，这样雷厉风行的作风是我们前进的动力和利器。每当自己在遇到一些失败或挫折的时候，要清楚自己是能力不济还是准备不够充分，是自己没有意识还是别人捷足先登，而不是一来就抱怨命运不公或者埋怨自己能力不如别人。这只在一念之间便决定了你以后的一个成就与收获，有时候你清楚根源在哪里，那么便为你后续的生活提供了借鉴和警示，知道自己该从哪些方面去努力攻克，自己该提升哪些方面的能力。\n	</p>\n<p>\n		        与其用时间去抱怨反倒不如把这些时间留给自己去思考、总结和改进。因为只有把时间充分的运用起来才会让我们没有时间去胡思乱想，才会更能够激励自己奋发向上，积极进取。这样紧张而充实的生活才是我们必须的，如果你没有时间去颓废，没有时间去抱怨，没有时间去无聊，那么你一定可以向别人一样优秀，你也会觉得自己换了一个模样，那么你就活出了一个真我。因为我们每个人都有三个“我”——假我、自我、真我，只有将自己的潜能全部激发出来并坚持不懈的努力下去，那样才会发现真正的我，才会发现自己也优秀的潜质，所以，不要随便的抱怨自己，只需要努力到无能为力，拼搏到感动自己就可以了，就能够人生无憾。\n	</p>\n<p>\n		        我们来到这个世界，似乎就是为了要做点什么？因此，在我们的这个漫长而又短暂的生命时光里，我们真的应该多一些努力少一些抱怨，不断地敲响自己的奋斗的号角来警示自己，不断地激励自己抱怨没有用，抱怨只能是对自己无能的愤慨。\n	</p>\n</p>', 1);
INSERT INTO `blog_articledetail` VALUES (4, '<p>\n	orm优化数据库访问：<a href=\"https://docs.djangoproject.com/en/1.11/topics/db/optimization/\" target=\"_blank\">https://docs.djangoproject.com/en/1.11/topics/db/optimization/</a>\n</p>\n<h2>\n<span style=\"background-color:#00ccff;\">一、QuerySet</span>\n</h2>\n<p>\n<span style=\"background-color:#ff9900;\"><strong>可迭代</strong></span>\n</p>\n<div class=\"cnblogs_code\">\n<pre>querysey=<span style=\"color:#000000;\">models.Book.objects.all() </span><span style=\"color:#0000ff;\">for</span> book <span style=\"color:#0000ff;\">in</span><span style=\"color:#000000;\"> querysey: </span><span style=\"color:#0000ff;\">print</span>(book.title)</pre>\n</div>\n<p>\n<span style=\"background-color:#ff9900;\"><strong>可切片</strong></span>\n</p>\n<div class=\"cnblogs_code\">\n<pre>Book.objects.all()[:3<span style=\"color:#000000;\">]\nBook.objects.all()[</span>3:6<span style=\"color:#000000;\">] </span><span style=\"color:#008000;\">#</span><span style=\"color:#008000;\"> 不支持负的索引，例如Book.objects.all()[0:-1]。通常，查询集的切片返回一个新的查询集，它不会执行查询。</span></pre>\n</div>\n<p>\n<span style=\"background-color:#ff9900;\"><strong>惰性查询</strong></span>\n</p>\n<p>\n	QuerySet 是懒惰的 -- 创建<span class=\"reference internal\"><span class=\"pre\">查询集</span>不会带来任何数据库的访问；<span style=\"background-color:#ff99cc;\">直到<span class=\"reference internal\"><span class=\"pre\">查询集</span>需要求值时，Django 才会真正运行这个查询。</span></span></span>\n</p>\n<div class=\"cnblogs_code\">\n<pre>queryset = models.Book.objects.all() <span style=\"color:#008000;\">#</span><span style=\"color:#008000;\"> not hits database</span> <span style=\"color:#0000ff;\">print</span>(queryset) <span style=\"color:#008000;\">#</span><span style=\"color:#008000;\"> hits database</span> <span style=\"color:#0000ff;\">for</span> book <span style=\"color:#0000ff;\">in</span><span style=\"color:#000000;\"> queryset: </span><span style=\"color:#0000ff;\">print</span>(book.title) <span style=\"color:#008000;\">#</span><span style=\"color:#008000;\"> Hits database</span></pre>\n</div>\n<p>\n<span style=\"background-color:#ff9900;\"><strong>缓存机制</strong></span>\n</p>\n<p>\n	每个查询集都包含一个缓存来最小化对数据库的访问。<span id=\"yiyi-194\">理解它是如何工作的将让你编写最高效的代码。</span>\n</p>\n<p>\n<span>在一个新创建的<span class=\"reference internal\"><span class=\"pre\">查询集</span>中，缓存为空。<span class=\"yiyi-st\" id=\"yiyi-196\">首次对<span class=\"reference internal\"><span class=\"pre\">查询集</span>进行求值，同时发生数据库查询，Django 将保存查询的结果到<span class=\"reference internal\"><span class=\"pre\">查询集</span>的缓存中并返回明确请求的结果（例如，如果正在迭代<span class=\"reference internal\"><span class=\"pre\">查询集</span>，则返回下一个结果）。<span class=\"yiyi-st\" id=\"yiyi-197\">接下来对该<span class=\"reference internal\"><span class=\"pre\">查询集</span>的求值将重用缓存的结果。</span></span></span></span></span></span></span></span>\n</p>\n<p>\n<span><span class=\"reference internal\"><span class=\"yiyi-st\"><span class=\"reference internal\"><span class=\"reference internal\"><span class=\"reference internal\"><span class=\"yiyi-st\"><span class=\"reference internal\">请牢记这个缓存行为，因为对<span class=\"reference internal\"><span class=\"pre\">查询集</span>使用不当的话，它会坑你的。<span class=\"yiyi-st\" id=\"yiyi-199\">例如，下面的语句创建两个<span class=\"reference internal\"><span class=\"pre\">查询集</span>，对它们求值，然后扔掉它们：</span></span></span></span></span></span></span></span></span></span></span>\n</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color:#0000ff;\">print</span>(book.title <span style=\"color:#0000ff;\">for</span> book <span style=\"color:#0000ff;\">in</span> models.Book.objects.all()) <span style=\"color:#008000;\">#</span><span style=\"color:#008000;\"> hits database</span> <span style=\"color:#0000ff;\">print</span>(book.price <span style=\"color:#0000ff;\">for</span> book <span style=\"color:#0000ff;\">in</span> models.Book.objects.all()) <span style=\"color:#008000;\">#</span><span style=\"color:#008000;\"> hits database</span></pre>\n</div>\n<p>\n	这意味着相同的数据库查询将执行两次，显然倍增了你的数据库负载。<span class=\"yiyi-st\"><span class=\"yiyi-st\">同时，还有可能两个结果列表并不包含相同的数据库记录，因为在两次请求期间有可能有 book <span class=\"yiyi-st\" id=\"yiyi-200\"><span class=\"yiyi-st\" id=\"yiyi-201\">被添加进来或删除掉。<span class=\"yiyi-st\" id=\"yiyi-202\">为了避免这个问题，只需保存<span class=\"reference internal\"><span class=\"pre\">查询集</span>并重新使用它：</span></span></span></span></span></span>\n</p>\n<div class=\"cnblogs_code\">\n<pre>queryset =<span style=\"color:#000000;\"> models.Book.objects.all() </span><span style=\"color:#0000ff;\">print</span>(book.title <span style=\"color:#0000ff;\">for</span> book <span style=\"color:#0000ff;\">in</span><span style=\"color:#000000;\"> queryset) </span><span style=\"color:#0000ff;\">print</span>(book.price <span style=\"color:#0000ff;\">for</span> book <span style=\"color:#0000ff;\">in</span><span style=\"color:#000000;\"> queryset) </span><span style=\"color:#008000;\">#</span><span style=\"color:#008000;\"> 下面也是一次数据库查询</span> <span style=\"color:#0000ff;\">for</span> book <span style=\"color:#0000ff;\">in</span><span style=\"color:#000000;\"> querysey: </span><span style=\"color:#0000ff;\">print</span><span style=\"color:#000000;\">(book.title) </span><span style=\"color:#0000ff;\">print</span>(book.price)</pre>\n</div>\n<p>\n<strong><span id=\"yiyi-397\">何时查询集不会被缓存?</span></strong>\n</p>\n<p>\n<span id=\"yiyi-204\">当只对查询集的部分进行求值时会检查缓存， 如果这个部分不在缓存中，那么接下来查询返回的记录都将不会被缓存。所以<span id=\"yiyi-205\">，这意味着使用切片或索引来限制查询集将不会填充缓存。</span></span>\n</p>\n<p>\n<span><span>例如，重复获取查询集对象中一个特定的索引将每次都查询数据库：</span></span>\n</p>\n<div class=\"cnblogs_code\">\n<pre>queryset =<span style=\"color:#000000;\"> models.Book.objects.all() </span><span style=\"color:#0000ff;\">print</span>(queryset[1]) <span style=\"color:#008000;\">#</span><span style=\"color:#008000;\"> hits database</span> <span style=\"color:#0000ff;\">print</span>(queryset[1]) <span style=\"color:#008000;\">#</span><span style=\"color:#008000;\"> hits database</span></pre>\n</div>\n<p>\n	然而，如果已经对全部查询集求值过，则将检查缓存：\n</p>\n<div class=\"cnblogs_code\">\n<pre>queryset =<span style=\"color:#000000;\"> models.Book.objects.all()\n[book </span><span style=\"color:#0000ff;\">for</span> book <span style=\"color:#0000ff;\">in</span> queryset] <span style=\"color:#008000;\">#</span><span style=\"color:#008000;\"> hits database</span> <span style=\"color:#0000ff;\">print</span>(queryset[1]) <span style=\"color:#008000;\">#</span><span style=\"color:#008000;\"> use cache</span> <span style=\"color:#0000ff;\">print</span>(queryset[1]) <span style=\"color:#008000;\">#</span><span style=\"color:#008000;\"> use cache</span></pre>\n</div>\n<p>\n	简单地打印查询集不会填充缓存：\n</p>\n<div class=\"cnblogs_code\">\n<pre>queryset =<span style=\"color:#000000;\"> models.Book.objects.all() </span><span style=\"color:#0000ff;\">print</span>(queryset) <span style=\"color:#008000;\">#</span><span style=\"color:#008000;\"> hits database</span> <span style=\"color:#0000ff;\">print</span>(queryset) <span style=\"color:#008000;\">#</span><span style=\"color:#008000;\"> hits database</span></pre>\n</div>\n<p>\n<span style=\"background-color:#ff9900;\"><strong>exists() 和 iterator()</strong></span>\n</p>\n<p>\n	简单的使用 if 语句进行判断也会完全执行整个 queryset 并且把数据放入cache，虽然你并不需要这些数据！为了避免这个，可以用 exists() 方法来检查是否有数据：\n</p>\n<div class=\"cnblogs_code\">\n<pre>queryset =<span style=\"color:#000000;\"> models.Author.objects.all() </span><span style=\"color:#0000ff;\">if</span><span style=\"color:#000000;\"> queryset.exists(): </span><span style=\"color:#0000ff;\">print</span>(<span style=\"color:#800000;\">\"</span><span style=\"color:#800000;\">True</span><span style=\"color:#800000;\">\"</span>)</pre>\n</div>\n<p>\n	更优于：\n</p>\n<div class=\"cnblogs_code\">\n<pre>queryset =<span style=\"color:#000000;\"> models.Author.objects.all() </span><span style=\"color:#0000ff;\">if</span><span style=\"color:#000000;\"> queryset: </span><span style=\"color:#0000ff;\">print</span>(<span style=\"color:#800000;\">\"</span><span style=\"color:#800000;\">True</span><span style=\"color:#800000;\">\"</span>)</pre>\n</div>\n<p>\n	它们的sql查询分别为：\n</p>\n<div class=\"cnblogs_code\">\n<pre>SELECT (1) AS <span style=\"color:#800000;\">\"</span><span style=\"color:#800000;\">a</span><span style=\"color:#800000;\">\"</span> FROM <span style=\"color:#800000;\">\"</span><span style=\"color:#800000;\">app01_author</span><span style=\"color:#800000;\">\"</span> LIMIT 1; args=<span style=\"color:#000000;\">()\nSELECT </span><span style=\"color:#800000;\">\"</span><span style=\"color:#800000;\">app01_author</span><span style=\"color:#800000;\">\"</span>.<span style=\"color:#800000;\">\"</span><span style=\"color:#800000;\">id</span><span style=\"color:#800000;\">\"</span>, <span style=\"color:#800000;\">\"</span><span style=\"color:#800000;\">app01_author</span><span style=\"color:#800000;\">\"</span>.<span style=\"color:#800000;\">\"</span><span style=\"color:#800000;\">name</span><span style=\"color:#800000;\">\"</span>, <span style=\"color:#800000;\">\"</span><span style=\"color:#800000;\">app01_author</span><span style=\"color:#800000;\">\"</span>.<span style=\"color:#800000;\">\"</span><span style=\"color:#800000;\">age</span><span style=\"color:#800000;\">\"</span>, <span style=\"color:#800000;\">\"</span><span style=\"color:#800000;\">app01_author</span><span style=\"color:#800000;\">\"</span>.<span style=\"color:#800000;\">\"</span><span style=\"color:#800000;\">author_detail_id</span><span style=\"color:#800000;\">\"</span> FROM <span style=\"color:#800000;\">\"</span><span style=\"color:#800000;\">app01_author</span><span style=\"color:#800000;\">\"</span>; args=()</pre>\n</div>\n<p>\n	当queryset非常巨大时，cache会成为问题。\n</p>\n<p>\n	处理成千上万的记录时，将它们一次装入内存是很浪费的。更糟糕的是，巨大的queryset可能会锁住系统进程，让程序濒临崩溃。要避免在遍历数据的同时产生 queryset cache，可以使用 iterator() 方法来获取数据，处理完数据就将其丢弃。\n</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color:#008000;\">#</span><span style=\"color:#008000;\"> iterator() 可以一次只从数据库获取少量数据，这样可以节省内存</span> objs =<span style=\"color:#000000;\"> models.Book.objects.all().iterator() </span><span style=\"color:#0000ff;\">for</span> obj <span style=\"color:#0000ff;\">in</span><span style=\"color:#000000;\"> objs: </span><span style=\"color:#0000ff;\">print</span><span style=\"color:#000000;\">(obj.title) </span><span style=\"color:#008000;\">#</span><span style=\"color:#008000;\"> 注意，再次遍历没有打印，因为迭代器已经在上一次遍历（next）到最后一次了，没得遍历了</span> <span style=\"color:#0000ff;\">for</span> obj <span style=\"color:#0000ff;\">in</span><span style=\"color:#000000;\"> objs: </span><span style=\"color:#0000ff;\">print</span>(obj.title)</pre>\n</div>\n<p>\n	当然，使用 iterator() 方法来防止生成cache，意味着遍历同一个 queryset 时会重复执行查询。所以使用 iterator() 的时候要当心，确保你的代码在操作一个大的 queryset 时没有重复执行查询。\n</p>\n<p>\n<span style=\"background-color:#ff9900;\"><strong>总结</strong></span>\n</p>\n<p>\n	queryset 的 cache 是用于减少程序对数据库的查询，在通常的使用下会保证只有在需要的时候才会查询数据库。 使用 exists() 和 iterator() 方法可以优化程序对内存的使用。不过，由于它们并不会生成queryset cache，可能会造成额外的数据库查询。\n</p>\n<h2>\n<span style=\"background-color:#00ccff;\">二、查询优化</span>\n</h2>\n<p>\n<span style=\"background-color:#00ccff;\">\n<pre class=\"prettyprint lang-py\">from django.db import models \nfrom django.contrib.auth.models import AbstractUser \n\n\nclass UserInfo(AbstractUser): \n	\"\"\" 用户信息 \"\"\" \n	nid = models.AutoField(primary_key=True)\n    telephone = models.CharField(verbose_name=\"联系电话\", max_length=11, null=True, unique=True)\n    avatar = models.FileField(verbose_name=\"头像\", upload_to=\"avatars/\", default=\"/avatars/default.png\")\n    create_time = models.DateTimeField(verbose_name=\"创建时间\", auto_now_add=True)\n    blog = models.OneToOneField(verbose_name=\"个人站点\", to=\"Blog\", to_field=\"nid\", null=True) def __str__(self): return self.username class Blog(models.Model): \"\"\" 博客信息 \"\"\" nid = models.AutoField(primary_key=True)\n    title = models.CharField(verbose_name=\"个人博客标题\", max_length=64)\n    site = models.CharField(verbose_name=\"个人博客后缀\", max_length=32, unique=True)\n    theme = models.CharField(verbose_name=\"博客主题\", max_length=32) def __str__(self): return self.title class Category(models.Model): \"\"\" 个人文章分类表 \"\"\" nid = models.AutoField(primary_key=True)\n    title = models.CharField(verbose_name=\"分类标题\", max_length=32)\n    blog = models.ForeignKey(verbose_name=\"所属博客\", to=\"Blog\", to_field=\"nid\") # 一个博客站点可以有多个分类 def __str__(self): return self.title class Tag(models.Model): \"\"\" 标签表 \"\"\" nid = models.AutoField(primary_key=True)\n    title = models.CharField(verbose_name=\"标签名称\", max_length=32)\n    blog = models.ForeignKey(verbose_name=\"所属博客\", to=\"Blog\", to_field=\"nid\") # 一个博客站点可以有多个标签 def __str__(self): return self.title class Article(models.Model): \"\"\" 文章表 \"\"\" nid = models.AutoField(primary_key=True)\n    title = models.CharField(max_length=50, verbose_name=\"文章标题\")\n    description = models.CharField(max_length=255, verbose_name=\"文章描述\")\n    create_time = models.DateTimeField(verbose_name=\"创建时间\", auto_now_add=True)\n    comment_count = models.IntegerField(verbose_name=\"评论数\", default=0)\n    up_count = models.IntegerField(verbose_name=\"点赞数\", default=0)\n    down_count = models.IntegerField(verbose_name=\"反对数\", default=0)\n    category = models.ForeignKey(verbose_name=\"所属分类\", to=\"Category\", to_field=\"nid\", null=True)\n    user = models.ForeignKey(verbose_name=\"作者\", to=\"UserInfo\", to_field=\"nid\")\n    tags = models.ManyToManyField(\n        verbose_name=\"所属标签\",\n        to=\"Tag\",\n        through=\"ArticleToTag\",\n        through_fields=(\"article\", \"tag\"),\n    ) \n\n    def __str__(self): \n    	return self.title \n\n\nclass ArticleDetail(models.Model): \n	\"\"\" 文章详细表 \"\"\" \n	nid = models.AutoField(primary_key=True)\n    content = models.TextField(verbose_name=\"文章内容\")\n    article = models.OneToOneField(verbose_name=\"关联文章\", to=\"Article\", to_field=\"nid\") \n\n\nclass ArticleToTag(models.Model): \n	\"\"\" 文章和标签的多对多关系表 \"\"\" \n	nid = models.AutoField(primary_key=True)\n    article = models.ForeignKey(verbose_name=\"文章\", to=\"Article\", to_field=\"nid\")\n    tag = models.ForeignKey(verbose_name=\"标签\", to=\"Tag\", to_field=\"nid\") \n\n    class Meta:\n        unique_together = [\n            (\"article\", \"tag\"),\n        ] \n\n    def __str__(self):\n        v = self.article.title + \"--\" + self.tag.title \n        return v \n\n\nclass ArticleUpDown(models.Model): \n	\"\"\" 点赞表 哪个用户对哪篇文章点了赞 \"\"\" \n	nid = models.AutoField(primary_key=True)\n    user = models.ForeignKey(verbose_name=\"用户id\", to=\"UserInfo\", null=True)\n    article = models.ForeignKey(verbose_name=\"文章id\", to=\"Article\", null=True)\n    is_up = models.BooleanField(verbose_name=\"是否为赞\", default=True) \n\n    class Meta:\n        unique_together = [\n            (\"article\", \"user\"),\n        ] \n\n\nclass Comment(models.Model): \n	\"\"\" 评论表 \"\"\" \n	nid = models.AutoField(primary_key=True)\n    user = models.ForeignKey(verbose_name=\"评论者\", to=\"UserInfo\", to_field=\"nid\")\n    article = models.ForeignKey(verbose_name=\"评论文章\", to=\"Article\", to_field=\"nid\")\n    create_time = models.DateTimeField(verbose_name=\"创建时间\", auto_now_add=True)\n    content = models.CharField(verbose_name=\"评论内容\", max_length=255)\n    parent_comment = models.ForeignKey(\"self\", null=True) \n\n    def __str__(self): \n    	return self.content</pre>\n<br/>\n</span>\n</p>\n<h3>\n<span class=\"yiyi-st\" id=\"yiyi-870\" style=\"background-color:#99cc00;\">select_related</span>\n</h3>\n<p>\n<strong><span style=\"background-color:#ff9900;\">简单实用</span></strong>\n</p>\n<p>\n	对于一对一字段和外键字段，可以使用 select_related 来对 QuerySet 进行优化。\n</p>\n<p>\n<span class=\"yiyi-st\">select_related 返回一个 QuerySet，当执行它的查询时它沿着外键关系查询关联的对象的数据。<span class=\"yiyi-st\" id=\"yiyi-234\">它会生成一个复杂的查询并引起性能的损耗，但是在以后使用外键关系时将不需要数据库查询。</span></span>\n</p>\n<p>\n<span class=\"yiyi-st\"><span class=\"yiyi-st\">简单说，在对 QuerySet 使用 select_related() 函数后，Django会获取相应外键对应的对象，从而在之后需要的时候不必再查询数据库了。</span></span>\n</p>\n<p>\n<span class=\"yiyi-st\"><span class=\"yiyi-st\">示例：</span></span>\n</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color:#008000;\">#</span><span style=\"color:#008000;\"> 查询 id=1 的文章的分类名称，下面是一个标准的查询：</span> article = models.Article.objects.get(nid=1) <span style=\"color:#008000;\">#</span><span style=\"color:#008000;\"> hits database</span> <span style=\"color:#0000ff;\">print</span>(article.category.title) <span style=\"color:#008000;\">#</span><span style=\"color:#008000;\"> hits database again to get the related Category object</span></pre>\n</div>\n<div class=\"cnblogs_code\">\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_cff1a4d9-ec21-487f-9891-7e2333c5e570\">\n<pre><span style=\"color:#000000;\">SELECT \n`blog_article`.`nid`, \n`blog_article`.`title`, \n`blog_article`.`description`, \n`blog_article`.`create_time`, \n`blog_article`.`comment_count`, \n`blog_article`.`up_count`, \n`blog_article`.`down_count`, \n`blog_article`.`category_id`, \n`blog_article`.`user_id` \nFROM \n`blog_article` \nWHERE \n`blog_article`.`nid` </span>= 1; args=(1<span style=\"color:#000000;\">,)\n\nSELECT \n`blog_category`.`nid`, \n`blog_category`.`title`, \n`blog_category`.`blog_id` \nFROM \n`blog_category` \nWHERE \n`blog_category`.`nid` </span>= 1; args=(1,)</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">两次数据库查询</span>\n</div>\n<p>\n	如果使用 select_related() 函数：\n</p>\n<div class=\"cnblogs_code\">\n<pre>article = models.Article.objects.select_related(<span style=\"color:#800000;\">\"</span><span style=\"color:#800000;\">category</span><span style=\"color:#800000;\">\"</span>).get(nid=1<span style=\"color:#000000;\">) </span><span style=\"color:#0000ff;\">print</span>(article.category.title)</pre>\n</div>\n<div class=\"cnblogs_code\">\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_fcb7f8b9-66d0-405c-bff0-ddd414a06487\">\n<pre><span style=\"color:#000000;\">SELECT \n`blog_article`.`nid`, \n`blog_article`.`title`, \n`blog_article`.`description`, \n`blog_article`.`create_time`, \n`blog_article`.`comment_count`, \n`blog_article`.`up_count`, \n`blog_article`.`down_count`, \n`blog_article`.`category_id`, \n`blog_article`.`user_id`, \n`blog_category`.`nid`, \n`blog_category`.`title`, \n`blog_category`.`blog_id` \nFROM \n`blog_article` \nLEFT OUTER JOIN \n`blog_category` \nON \n(`blog_article`.`category_id` </span>=<span style=\"color:#000000;\"> `blog_category`.`nid`) \nWHERE \n`blog_article`.`nid` </span>= 1; args=(1,)</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">一次数据库查询</span>\n</div>\n<p>\n<span style=\"background-color:#ff9900;\"><strong>多个外键查询</strong></span>\n</p>\n<p>\n	这是针对 category 的外键查询，如果是另外一个外键呢？让我们一起看下：\n</p>\n<div class=\"cnblogs_code\">\n<pre>article = models.Article.objects.select_related(<span style=\"color:#800000;\">\"</span><span style=\"color:#800000;\">category</span><span style=\"color:#800000;\">\"</span>).get(nid=1<span style=\"color:#000000;\">) </span><span style=\"color:#0000ff;\">print</span>(article.articledetail)</pre>\n</div>\n<p>\n	观察 logging 发现依然需要查询两次，所以需要改为：\n</p>\n<div class=\"cnblogs_code\">\n<pre>article = models.Article.objects.select_related(<span style=\"color:#800000;\">\"</span><span style=\"color:#800000;\">category</span><span style=\"color:#800000;\">\"</span>, <span style=\"color:#800000;\">\"</span><span style=\"color:#800000;\">articledetail</span><span style=\"color:#800000;\">\"</span>).get(nid=1<span style=\"color:#000000;\">) </span><span style=\"color:#0000ff;\">print</span>(article.articledetail)</pre>\n</div>\n<p>\n	或者：\n</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color:#008000;\">#</span><span style=\"color:#008000;\"> 链式操作</span> article = models.Article.objects.select_related(<span style=\"color:#800000;\">\"</span><span style=\"color:#800000;\">category</span><span style=\"color:#800000;\">\"</span>).select_related(<span style=\"color:#800000;\">\"</span><span style=\"color:#800000;\">articledetail</span><span style=\"color:#800000;\">\"</span>).get(nid=1<span style=\"color:#000000;\">) </span><span style=\"color:#0000ff;\">print</span>(article.articledetail)</pre>\n</div>\n<div class=\"cnblogs_code\">\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_f09a67f6-aba6-4141-a9b4-736a4034814c\">\n<pre><span style=\"color:#000000;\">SELECT \n`blog_article`.`nid`, \n`blog_article`.`title`, \n`blog_article`.`description`, \n`blog_article`.`create_time`, `\nblog_article`.`comment_count`, \n`blog_article`.`up_count`, \n`blog_article`.`down_count`, \n`blog_article`.`category_id`, \n`blog_article`.`user_id`, \n`blog_category`.`nid`, \n`blog_category`.`title`, \n`blog_category`.`blog_id`, \n`blog_articledetail`.`nid`, \n`blog_articledetail`.`content`, \n`blog_articledetail`.`article_id` \nFROM \n`blog_article` \nLEFT OUTER JOIN \n`blog_category` \nON \n(`blog_article`.`category_id` </span>=<span style=\"color:#000000;\"> `blog_category`.`nid`) \nLEFT OUTER JOIN \n`blog_articledetail` \nON \n(`blog_article`.`nid` </span>=<span style=\"color:#000000;\"> `blog_articledetail`.`article_id`) \nWHERE \n`blog_article`.`nid` </span>= 1; args=(1,)</pre>\n</div>\n</div>\n<p>\n<span style=\"background-color:#ff9900;\"><strong>深层查询</strong></span>\n</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color:#008000;\">#</span><span style=\"color:#008000;\"> 查询 id=1 的文章的博客名称</span> article = models.Article.objects.select_related(<span style=\"color:#800000;\">\"</span><span style=\"color:#800000;\">user</span><span style=\"color:#800000;\">\"</span>).get(nid=1<span style=\"color:#000000;\">) </span><span style=\"color:#0000ff;\">print</span>(article.user.blog.title)</pre>\n</div>\n<p>\n	依然需要查询两次；\n</p>\n<p>\n	这是因为第一次查询没有 query 到 blog 表，所以，修改如下：\n</p>\n<div class=\"cnblogs_code\">\n<pre>article = models.Article.objects.select_related(<span style=\"color:#800000;\">\"</span><span style=\"color:#800000;\">user__blog</span><span style=\"color:#800000;\">\"</span>).get(nid=1<span style=\"color:#000000;\">) </span><span style=\"color:#0000ff;\">print</span>(article.user.blog.title)</pre>\n</div>\n<p>\n<span style=\"background-color:#ff9900;\"><strong>总结</strong></span>\n</p>\n<p>\n	1、select_related主要针一对一和多对一关系进行优化。<br/>\n2、select_related使用SQL的JOIN语句进行优化，通过减少SQL查询的次数来进行优化、提高性能。<br/>\n3、可以通过可变长参数指定需要select_related的字段名。也可以通过使用双下划线\"__\"连接字段名来实现指定的递归查询。<br/>\n4、没有指定的字段不会缓存，没有指定的深度不会缓存，如果要访问的话Django会再次进行SQL查询。<br/>\n5、也可以通过depth参数指定递归的深度，Django会自动缓存指定深度内所有的字段。如果要访问指定深度外的字段，Django会再次进行SQL查询。<br/>\n6、也接受无参数的调用，Django会尽可能深的递归查询所有的字段。但注意有Django递归的限制和性能的浪费。<br/>\n7、Django &gt;= 1.7，链式调用的select_related相当于使用可变长参数。Django &lt; 1.7，链式调用会导致前边的select_related失效，只保留最后一个。\n</p>\n<h3>\n<span style=\"background-color:#99cc00;\"><strong>prefetch_related()</strong></span>\n</h3>\n<p>\n	对于多对多字段和一对多字段，可以使用 prefetch_related() 来进行优化。\n</p>\n<p>\n	prefetch_related() 和 select_related() 的设计目的很相似，都是为了减少SQL查询的数量，但是实现的方式不一样。后者是通过JOIN语句，在SQL查询内解决问题。但是对于多对多关系，使用SQL语句解决就显得有些不太明智，因为JOIN得到的表将会很长，会导致SQL语句运行时间的增加和内存占用的增加。\n</p>\n<p>\n	prefetch_related() 的解决方法是，分别查询每个表，然后用 Python 处理他们之间的关系。\n</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color:#008000;\">#</span><span style=\"color:#008000;\"> 查询所有文章关联的所有标签</span> queryset =<span style=\"color:#000000;\"> models.Article.objects.all() </span><span style=\"color:#0000ff;\">for</span> article <span style=\"color:#0000ff;\">in</span><span style=\"color:#000000;\"> queryset: </span><span style=\"color:#0000ff;\">print</span>(article.tags.all()) <span style=\"color:#008000;\">#</span><span style=\"color:#008000;\"> 9篇文章: hits database 10</span></pre>\n</div>\n<p>\n	如果实用 prefetch_related() 函数：\n</p>\n<div class=\"cnblogs_code\">\n<pre>queryset = models.Article.objects.prefetch_related(<span style=\"color:#800000;\">\"</span><span style=\"color:#800000;\">tags</span><span style=\"color:#800000;\">\"</span><span style=\"color:#000000;\">).all() </span><span style=\"color:#0000ff;\">for</span> article <span style=\"color:#0000ff;\">in</span><span style=\"color:#000000;\"> queryset: </span><span style=\"color:#0000ff;\"> print</span>(article.tags.all()) <span style=\"color:#008000;\">#</span><span style=\"color:#008000;\"> 9篇文章: hits database 2</span></pre>\n</div>\n<div class=\"cnblogs_code\">\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_862dbcf8-eb7a-473c-a494-7825bec230de\">\n<pre><span style=\"color:#000000;\">ELECT \n`blog_article`.`nid`, \n`blog_article`.`title`, \n`blog_article`.`description`, \n`blog_article`.`create_time`, \n`blog_article`.`comment_count`, \n`blog_article`.`up_count`, \n`blog_article`.`down_count`, \n`blog_article`.`category_id`, \n`blog_article`.`user_id` \nFROM \n`blog_article`; args</span>=<span style=\"color:#000000;\">()\n\nSELECT \n(`blog_articletotag`.`article_id`) AS `_prefetch_related_val_article_id`, \n`blog_tag`.`nid`, \n`blog_tag`.`title`, \n`blog_tag`.`blog_id` \nFROM \n`blog_tag` \nINNER JOIN \n`blog_articletotag` \nON \n(`blog_tag`.`nid` </span>=<span style=\"color:#000000;\"> `blog_articletotag`.`tag_id`) \nWHERE \n`blog_articletotag`.`article_id` \nIN \n(</span>1, 2, 3, 4, 5, 6, 7, 8, 9); args=(1, 2, 3, 4, 5, 6, 7, 8, 9)</pre>\n</div>\n</div>\n<h2>\n<span style=\"background-color:#00ccff;\">三、其他优化</span>\n</h2>\n<h3>\n<span style=\"background-color:#99cc00;\">不要检索你不需要的东西</span>\n</h3>\n<p>\n<span style=\"background-color:#ff9900;\"><strong>使用values()或values_list()</strong></span>\n</p>\n<div class=\"cnblogs_code\">\n<pre>queryset = models.Article.objects.filter(nid=1<span style=\"color:#000000;\">) </span><span style=\"color:#0000ff;\">print</span>(queryset)</pre>\n</div>\n<div class=\"cnblogs_code\">\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_24abae4d-eef6-4df3-8912-d0625cbb6403\">\n<pre><span style=\"color:#000000;\">SELECT \n`blog_article`.`nid`, \n`blog_article`.`title`, \n`blog_article`.`description`, \n`blog_article`.`create_time`, \n`blog_article`.`comment_count`, \n`blog_article`.`up_count`, \n`blog_article`.`down_count`, \n`blog_article`.`category_id`, \n`blog_article`.`user_id` FROM \n`blog_article` \nWHERE \n`blog_article`.`nid` </span>= 1 LIMIT 21; args=(1,)</pre>\n</div>\n</div>\n<div class=\"cnblogs_code\">\n<pre>queryset = models.Article.objects.filter(nid=1).values(<span style=\"color:#800000;\">\"</span><span style=\"color:#800000;\">title</span><span style=\"color:#800000;\">\"</span><span style=\"color:#000000;\">) </span><span style=\"color:#0000ff;\">print</span>(queryset)</pre>\n</div>\n<div class=\"cnblogs_code\">\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_f2507071-4769-40fb-8772-f422ca171e26\">\n<pre><span style=\"color:#000000;\">SELECT \n`blog_article`.`title` \nFROM \n`blog_article` \nWHERE \n`blog_article`.`nid` </span>= 1 LIMIT 21; args=(1,)</pre>\n</div>\n</div>\n<p>\n<span style=\"background-color:#ff9900;\"><strong>使用only()或defer()</strong></span>\n</p>\n<p>\n	如果存在您知道在大多数情况下不需要（或在大多数情况下不需要）的数据库列，请使用 defer() 和 only() 来避免加载它们。 请注意，如果您确实使用它们，ORM必须在单独的查询中获取它们，如果您不恰当地使用它，则会产生非常悲剧的结果。\n</p>\n<p>\n<img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1468833/201901/1468833-20190120231559858-1987046105.png\"/>\n</p>\n<div class=\"cnblogs_code\">\n<pre>odels.Author.objects.only(<span style=\"color:#800000;\">\"</span><span style=\"color:#800000;\">name</span><span style=\"color:#800000;\">\"</span><span style=\"color:#000000;\">)\nmodels.Author.objects.defer(</span><span style=\"color:#800000;\">\"</span><span style=\"color:#800000;\">id</span><span style=\"color:#800000;\">\"</span>, <span style=\"color:#800000;\">\"</span><span style=\"color:#800000;\">age</span><span style=\"color:#800000;\">\"</span>, <span style=\"color:#800000;\">\"</span><span style=\"color:#800000;\">author_detail</span><span style=\"color:#800000;\">\"</span><span style=\"color:#000000;\">) </span><span style=\"color:#008000;\">#</span><span style=\"color:#008000;\"> 两条sql是一样的，如下</span><span style=\"color:#008000;\"> #</span><span style=\"color:#008000;\"> SELECT \"app01_author\".\"id\", \"app01_author\".\"name\" FROM \"app01_author\" LIMIT 21; args=()</span></pre>\n</div>\n<h3>\n<span style=\"background-color:#99cc00;\">直接使用外键值</span>\n</h3>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color:#008000;\">#</span><span style=\"color:#008000;\"> 如果只需要外键值，请使用已有对象上的外键值，而不是获取整个相关对象并获取其主键。</span> article.user_nid  代替 article.user.nid </pre>\n</div>\n<h3>\n<span style=\"background-color:#99cc00;\">批量插入</span>\n</h3>\n<p>\n<span>创建对象时，尽可能使用 bulk_create() 来减少SQL查询的数量。例如：</span>\n</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color:#000000;\">Entry.objects.bulk_create([\n    Entry(headline</span>=<span style=\"color:#800000;\">\'</span><span style=\"color:#800000;\">This is a test</span><span style=\"color:#800000;\">\'</span><span style=\"color:#000000;\">),\n    Entry(headline</span>=<span style=\"color:#800000;\">\'</span><span style=\"color:#800000;\">This is only a test</span><span style=\"color:#800000;\">\'</span><span style=\"color:#000000;\">),\n])</span></pre>\n</div>\n<p>\n	更优于：\n</p>\n<div class=\"cnblogs_code\">\n<pre>Entry.objects.create(headline=<span style=\"color:#800000;\">\'</span><span style=\"color:#800000;\">This is a test</span><span style=\"color:#800000;\">\'</span><span style=\"color:#000000;\">)\nEntry.objects.create(headline</span>=<span style=\"color:#800000;\">\'</span><span style=\"color:#800000;\">This is only a test</span><span style=\"color:#800000;\">\'</span>)</pre>\n</div>\n<p>\n	注意该方法有很多注意事项，所以得确保它适用于你的情况。\n</p>\n<p>\n	这也可以用在ManyToManyFields中，所以：\n</p>\n<div class=\"cnblogs_code\">\n<pre>my_band.members.add(me, my_friend)</pre>\n</div>\n<p>\n	更优于：\n</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color:#000000;\">my_band.members.add(me)\nmy_band.members.add(my_friend)</span></pre>\n</div>\n<p>\n	其中 Bands 与 Artists 具有多对多关系。<span style=\"font-family:monospace;\"><br/>\n</span>\n</p>\n<h2>\n<span style=\"background-color:#00ccff;\">四、extra</span>\n</h2>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color:#0000ff;\">def</span> extra(self, select=None, where=None, params=None, tables=None, order_by=None, select_params=<span style=\"color:#000000;\">None) </span><span style=\"color:#008000;\">#</span><span style=\"color:#008000;\"> 构造额外的查询条件或者映射，如：子查询</span> Tb1.objects.extra(select={<span style=\"color:#800000;\">\'</span><span style=\"color:#800000;\">new_id</span><span style=\"color:#800000;\">\'</span>: <span style=\"color:#800000;\">\"</span><span style=\"color:#800000;\">select col from sometable where othercol &gt; %s</span><span style=\"color:#800000;\">\"</span>}, select_params=(1<span style=\"color:#000000;\">,))\n    Tb1.objects.extra(where</span>=[<span style=\"color:#800000;\">\'</span><span style=\"color:#800000;\">headline=%s</span><span style=\"color:#800000;\">\'</span>], params=[<span style=\"color:#800000;\">\'</span><span style=\"color:#800000;\">Lennon</span><span style=\"color:#800000;\">\'</span><span style=\"color:#000000;\">])\n    Tb1.objects.extra(where</span>=[<span style=\"color:#800000;\">\"</span><span style=\"color:#800000;\">foo=\'a\' OR bar = \'a\'</span><span style=\"color:#800000;\">\"</span>, <span style=\"color:#800000;\">\"</span><span style=\"color:#800000;\">baz = \'a\'</span><span style=\"color:#800000;\">\"</span><span style=\"color:#000000;\">])\n    Tb1.objects.extra(select</span>={<span style=\"color:#800000;\">\'</span><span style=\"color:#800000;\">new_id</span><span style=\"color:#800000;\">\'</span>: <span style=\"color:#800000;\">\"</span><span style=\"color:#800000;\">select id from tb where id &gt; %s</span><span style=\"color:#800000;\">\"</span>}, select_params=(1,), order_by=[<span style=\"color:#800000;\">\'</span><span style=\"color:#800000;\">-nid</span><span style=\"color:#800000;\">\'</span>])</pre>\n</div>\n<p>\n	有些情况下，Django的查询语法难以表达复杂的 where 子句，<span id=\"yiyi-329\">对于这种情况，Django 提供了 extra() QuerySet 修改机制：它能在 QuerySet 生成的SQL从句中注入新子句。</span>\n</p>\n<p>\n	extra 可以指定一个或多个参，例如 select、where、tables；这些参数都不是必须的，但是你至少要使用一个！要注意这些额外的方式对不同的数据库引擎可能存在移植性问题。（因为你在显式的书写SQL语句）,除非万不得已，尽量避免这样做。\n</p>\n<p>\n<span style=\"background-color:#ff9900;\"><strong>select 参数</strong></span>\n</p>\n<p>\n	select 参数可以让你在SELECT从句中添加其他字段信息，<span id=\"yiyi-339\">它应该是一个字典，存放着属性名到 SQL 从句的映射。</span>\n</p>\n<div class=\"cnblogs_code\">\n<pre>query_result=models.Article.objects.extra(select={<span style=\"color:#800000;\">\'</span><span style=\"color:#800000;\">is_recent</span><span style=\"color:#800000;\">\'</span>: <span style=\"color:#800000;\">\"</span><span style=\"color:#800000;\">create_time &gt; \'2018-01-20\'</span><span style=\"color:#800000;\">\"</span>})</pre>\n</div>\n<p>\n<span>结果集中每个 Article 对象都有一个额外的属性 is_recent，它是一个布尔值，表示 Article 对象的 create_time 是否晚于 2018-01-20。</span>\n</p>\n<div class=\"cnblogs_code\">\n<pre>article_obj=<span style=\"color:#000000;\">models.Article.objects\n              .filter(nid</span>=1<span style=\"color:#000000;\">)\n              .extra(select</span>={<span style=\"color:#800000;\">\"</span><span style=\"color:#800000;\">standard_time</span><span style=\"color:#800000;\">\"</span>: <span style=\"color:#800000;\">\"</span><span style=\"color:#800000;\">strftime(\'%%Y-%%m-%%d\', create_time)</span><span style=\"color:#800000;\">\"</span><span style=\"color:#000000;\">})\n              .values(</span><span style=\"color:#800000;\">\"</span><span style=\"color:#800000;\">standard_time</span><span style=\"color:#800000;\">\"</span>, <span style=\"color:#800000;\">\"</span><span style=\"color:#800000;\">nid</span><span style=\"color:#800000;\">\"</span>, <span style=\"color:#800000;\">\"</span><span style=\"color:#800000;\">title</span><span style=\"color:#800000;\">\"</span><span style=\"color:#000000;\">) </span><span style=\"color:#0000ff;\">print</span><span style=\"color:#000000;\">(article_obj) </span><span style=\"color:#008000;\">#</span><span style=\"color:#008000;\"> &lt;QuerySet [{\'title\': \'Python基础\', \'standard_time\': \'2018-01-20\', \'nid\': 1}]&gt;</span></pre>\n</div>\n<p>\n<span style=\"background-color:#ff9900;\"><strong>where / tables 参数</strong></span>\n</p>\n<p>\n	您可以使用 where 定义显式 SQL WHERE 子句，也许执行非显式连接。您可以使用 tables 手动将表添加到 SQL FROM 子句。<br/>\nwhere 和 tables 都接受字符串列表。所有 where 参数均为\"与\"任何其他搜索条件。\n</p>\n<p>\n	示例：\n</p>\n<div class=\"cnblogs_code\">\n<pre>query_result=models.Article.objects.extra(where=[<span style=\"color:#800000;\">\'</span><span style=\"color:#800000;\">nid in (1,3) OR title like \"y%\"</span><span style=\"color:#800000;\">\'</span>, <span style=\"color:#800000;\">\'</span><span style=\"color:#800000;\">nid&gt;2</span><span style=\"color:#800000;\">\'</span>])</pre>\n</div>', 4);
INSERT INTO `blog_articledetail` VALUES (6, '<p><a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\">ECMAScript 6 标准入门</a></p>\n<h2><span style=\"background-color: #00ccff;\"><strong>一、let和const</strong></span></h2>\n<p><span style=\"background-color: #99cc00;\"><strong>let命令</strong></span></p>\n<p>let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效；是块级作用域，且<code>let</code>不允许在相同作用域内，重复声明同一个变量。</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #000000;\">{\n    let a </span>= 12<span style=\"color: #000000;\">;\n}\nconsole.log(a); </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">Uncaught ReferenceError: a is not defined</span></pre>\n</div>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #000000;\">{\n    let a </span>= 12<span style=\"color: #000000;\">;\n    let a </span>= 22<span style=\"color: #000000;\">;\n}\nconsole.log(a); </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">Uncaught SyntaxError: Identifier \'a\' has already been declared</span></pre>\n</div>\n<p>另一个例子：</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">var</span> a =<span style=\"color: #000000;\"> [];\n</span><span style=\"color: #0000ff;\">for</span> (<span style=\"color: #0000ff;\">var</span> i = 0; i &lt; 10; i++<span style=\"color: #000000;\">) {\n    a[i] </span>= <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> () {\n        console.log(i);\n    };\n}\na[</span>6]();</pre>\n</div>\n<p>上面代码中，变量<code>i</code>是<code>var</code>命令声明的，在全局范围内都有效，所以全局只有一个变量<code>i</code>。每一次循环，变量<code>i</code>的值都会发生改变，而循环内被赋给数组<code>a</code>的函数内部的<code>console.log(i)</code>，里面的<code>i</code>指向的就是全局的<code>i</code>。也就是说，所有数组<code>a</code>的成员里面的<code>i</code>，指向的都是同一个<code>i</code>，导致运行时输出的是最后一轮的<code>i</code>的值，也就是10。</p>\n<p>如果使用<code>let</code>，声明的变量仅在块级作用域内有效，最后输出的是6。</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">var</span> a =<span style=\"color: #000000;\"> [];\n</span><span style=\"color: #0000ff;\">for</span> (let i = 0; i &lt; 10; i++<span style=\"color: #000000;\">) {\n    a[i] </span>= <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> () {\n        console.log(i);\n    };\n}\na[</span>6]();</pre>\n</div>\n<p>上面代码中，变量<code>i</code>是<code>let</code>声明的，当前的<code>i</code>只在本轮循环有效，所以每一次循环的<code>i</code>其实都是一个新的变量，所以最后输出的是<code>6</code>。你可能会问，如果每一轮循环的变量<code>i</code>都是重新声明的，那它怎么知道上一轮循环的值，从而计算出本轮循环的值？这是因为 JavaScript 引擎内部会记住上一轮循环的值，初始化本轮的变量<code>i</code>时，就在上一轮循环的基础上进行计算。</p>\n<p><span style=\"background-color: #99cc00;\"><strong>不存在变量提升</strong></span></p>\n<p><code>var</code>命令会发生\"变量提升\"现象，即变量可以在声明之前使用，值为<code>undefined。为了纠正这种现象，<code>let</code>命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错。</code></p>\n<div class=\"cnblogs_code\">\n<pre>console.log(x); <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> 输出undefined</span>\n<span style=\"color: #0000ff;\">var</span> x = 2<span style=\"color: #000000;\">;\n\nconsole.log(s); </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> 报错ReferenceError: s is not defined</span>\nlet s = 2;</pre>\n</div>\n<p><span style=\"background-color: #99cc00;\"><strong>const命令</strong></span></p>\n<p><code>const</code>声明一个只读的常量。一旦声明，常量的值就不能改变。</p>\n<div class=\"cnblogs_code\">\n<pre>const PI = 3.1415<span style=\"color: #000000;\">;\nPI </span>= 3; <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> TypeError: Assignment to constant variable.</span></pre>\n</div>\n<p><code>const</code>声明的变量不得改变值，这意味着，<code>const</code>一旦声明变量，就必须立即初始化，不能留到以后赋值。</p>\n<p><code>const</code>的作用域与<code>let</code>命令相同：只在声明所在的块级作用域内有效，也不能重复声明。</p>\n<h2><span style=\"background-color: #00ccff;\">二、模板字符串</span></h2>\n<p>模板字符串（template string）是增强版的字符串，用<span style=\"background-color: #ff99cc;\">反引号（`）</span>标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">var</span> a = \"Hello\"<span style=\"color: #000000;\">;\n</span><span style=\"color: #0000ff;\">var</span> b = \"World\"<span style=\"color: #000000;\">;\n</span><span style=\"color: #0000ff;\">var</span> str =<span style=\"color: #000000;\"> `${a} ${b}！`;\nconsole.log(str);  </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> Hello World！</span></pre>\n</div>\n<p>如果在模板字符串中需要使用反引号，则前面要用反斜杠转义。</p>\n<div class=\"cnblogs_code\">\n<pre>let greeting = `Hello \\`pd\\`!<span style=\"color: #000000;\">`;\nconsole.log(greeting); </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> Hello `pd`!</span></pre>\n</div>\n<p>如果使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中。</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #000000;\">console.log(\n`</span>&lt;ul&gt;\n  &lt;li&gt;first&lt;/li&gt;\n  &lt;li&gt;second&lt;/li&gt;\n&lt;/ul&gt;`\n<span style=\"color: #000000;\">)\n</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> 输出</span>\n&lt;ul&gt;\n    &lt;li&gt;first&lt;/li&gt;\n    &lt;li&gt;second&lt;/li&gt;\n&lt;/ul&gt;</pre>\n</div>\n<h2><span style=\"background-color: #00ccff;\">三、箭头函数</span></h2>\n<p>ES6允许使用\"箭头\"   =&gt;  定义函数</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">var</span> f = (a) =&gt;<span style=\"color: #000000;\"> a;\n</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">等同于</span>\n<span style=\"color: #0000ff;\">var</span> f = (a) =&gt;<span style=\"color: #000000;\"> {\n    </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> a;\n};\n</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">也等同于</span>\n<span style=\"color: #0000ff;\">var</span> f = <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\">(a){\n   </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> a;\n};</span></pre>\n</div>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">function</span>(){} === ()=&gt;{}</pre>\n</div>\n<p>如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分。</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">无形参</span>\n<span style=\"color: #0000ff;\">var</span> f = () =&gt; 5<span style=\"color: #000000;\">;\n</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> 等同于</span>\n<span style=\"color: #0000ff;\">var</span> f = <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> () { \n    </span><span style=\"color: #0000ff;\">return</span> 5<span style=\"color: #000000;\">\n};\n\n</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">多个形参</span>\n<span style=\"color: #0000ff;\">var</span> f = (arg1, arg2) =&gt; arg1+<span style=\"color: #000000;\">arg2;\n</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> 等同于</span>\n<span style=\"color: #0000ff;\">var</span> f = <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\">(arg1, arg2) {\n    </span><span style=\"color: #0000ff;\">return</span> arg1+<span style=\"color: #000000;\">arg2;\n};</span></pre>\n</div>\n<p><span style=\"background-color: #99cc00;\"><strong>字面量方式创建对象</strong></span></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">var</span> person =<span style=\"color: #000000;\"> {\n    name:</span>\"李四\"<span style=\"color: #000000;\">,\n    age:</span>18<span style=\"color: #000000;\">,\n    fav:</span><span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> () {\n        console.log(</span>\"在干嘛？\"<span style=\"color: #000000;\">)\n    }\n};\nperson.fav(); </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> 在干嘛？</span></pre>\n</div>\n<p><strong><span style=\"background-color: #99cc00;\">使用箭头函数注意点</span></strong></p>\n<p><span style=\"background-color: #ff99cc;\"><strong>箭头函数坑①：</strong>函数体内的<code>this</code>对象，是定义时所在的对象，而不是使用时所在的对象。</span></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">var</span> name = \"张三\"<span style=\"color: #000000;\">;\n\n</span><span style=\"color: #0000ff;\">var</span> person1 =<span style=\"color: #000000;\"> {\n    name:</span>\"李四\"<span style=\"color: #000000;\">,\n    age:</span>18<span style=\"color: #000000;\">,\n    fav:</span><span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> () {\n        </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> 如果是function，this指的是使用时所在的对象，也就是person1对象</span>\n        console.log(<span style=\"color: #0000ff;\">this</span><span style=\"color: #000000;\">);\n        console.log(</span><span style=\"color: #0000ff;\">this</span><span style=\"color: #000000;\">.name);\n    }\n};\nperson1.fav();\n\n</span><span style=\"color: #0000ff;\">var</span> person2 =<span style=\"color: #000000;\"> {\n    name:</span>\"李四\"<span style=\"color: #000000;\">,\n    age:</span>18<span style=\"color: #000000;\">,\n    fav:() </span>=&gt;<span style=\"color: #000000;\"> {\n        </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> 如果使用了箭头函数，this指的是定义时所在的对象，也就是window对象</span>\n        console.log(<span style=\"color: #0000ff;\">this</span><span style=\"color: #000000;\">);\n        console.log(</span><span style=\"color: #0000ff;\">this</span><span style=\"color: #000000;\">.name);\n    }\n};\nperson2.fav();</span></pre>\n</div>\n<p>打印结果为：</p>\n<p><img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1468833/201901/1468833-20190102110942828-1984935202.png\"/></p>\n<p>打开Window可以看到，var name = \"张三\" 是被挂载在window对象中的，所以上面的箭头函数中，this.name也就为\"张三\"了。</p>\n<p><span style=\"background-color: #ff99cc;\"><strong>箭头函数坑②：</strong>不可以使用<code>arguments</code>对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</span></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">var</span> person3 =<span style=\"color: #000000;\"> {\n    name:</span>\"李四\"<span style=\"color: #000000;\">,\n    age:</span>18<span style=\"color: #000000;\">,\n    fav:() </span>=&gt;<span style=\"color: #000000;\"> {\n        console.log(arguments);\n    }\n};\nperson3.fav(</span>\"a\", \"b\"); <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> ReferenceError: arguments is not defined</span></pre>\n</div>\n<h2><span style=\"background-color: #00ccff;\">四、对象的单体模式</span></h2>\n<p><span style=\"background-color: #99cc00;\"><strong>为了解决箭头函数this指向的问题，推出来一种写法 \"对象的单体模式\"。</strong></span></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">var</span> person =<span style=\"color: #000000;\"> {\n    name:</span>\"pd\"<span style=\"color: #000000;\">,\n    age:</span>18<span style=\"color: #000000;\">,\n    fav() {\n        console.log(</span><span style=\"color: #0000ff;\">this</span>);  <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> {name: \"pd\", age: 18, fav: ƒ}</span>\n        console.log(<span style=\"color: #0000ff;\">this</span>.name); <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> pd</span>\n<span style=\"color: #000000;\">    }\n};\nperson.fav();</span></pre>\n</div>\n<div class=\"cnblogs_code\">\n<pre>fav:<span style=\"color: #0000ff;\">function</span> () {} === fav() {}</pre>\n</div>\n<h2><span style=\"background-color: #00ccff;\">五、面向对象</span></h2>\n<p>JavaScript 语言中，生成实例对象的传统方法是通过构造函数。</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> ES5构造函数的方式创建对象，这种方式叫做面向对象</span>\n<span style=\"color: #0000ff;\">function</span> Animal(name, age) { <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> 注意Animal第一个字母大写</span>\n            <span style=\"color: #0000ff;\">this</span>.name =<span style=\"color: #000000;\"> name;\n            </span><span style=\"color: #0000ff;\">this</span>.age =<span style=\"color: #000000;\"> age;\n}\n\n</span><span style=\"color: #0000ff;\">var</span> dog = <span style=\"color: #0000ff;\">new</span> Animal(\"旺财\",5<span style=\"color: #000000;\">);\nconsole.log(dog.age);\n\nAnimal.prototype.showName </span>= <span style=\"color: #0000ff;\">function</span>(){  <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> 给这个对象添加方法，使用prototype</span>\n    console.log(<span style=\"color: #0000ff;\">this</span><span style=\"color: #000000;\">.name);\n};\ndog.showName();</span></pre>\n</div>\n<p>ES6 提供了更接近传统语言的写法，引入了 Class（类）这个概念，作为对象的模板。通过 Class 关键字，可以定义类。</p>\n<p>基本上，ES6 的 Class 可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做到，新的 Class 写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。上面的代码用 ES6 的 Class 改写，就是下面这样：</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #000000;\">class  Animal{\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> constructor为构造器函数：当创建实例之后constructor()方法会立刻调用，通常这个方法初始化对象的属性。</span>\n<span style=\"color: #000000;\">    constructor(name,age){\n        </span><span style=\"color: #0000ff;\">this</span>.name =<span style=\"color: #000000;\"> name;\n        </span><span style=\"color: #0000ff;\">this</span>.age =<span style=\"color: #000000;\"> age;\n    }\n    showName(){\n        console.log(</span><span style=\"color: #0000ff;\">this</span><span style=\"color: #000000;\">.name)\n    }\n}\n\n</span><span style=\"color: #0000ff;\">var</span> dog = <span style=\"color: #0000ff;\">new</span> Animal(\"旺财\",5<span style=\"color: #000000;\">);\ndog.showName()  </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> 旺财</span></pre>\n</div>\n<p>上面代码定义了一个\"类\"，可以看到里面有一个<code>constructor</code>方法，这就是构造方法，而<code>this</code>关键字则代表实例对象，就像python中的self。也就是说，ES5 的构造函数Animal，对应 ES6 的Animal类的构造方法。</p>\n<p>Animal 类除了构造方法，还定义了一个showName方法。注意，定义\"类\"的方法的时候，前面不需要加上<code>function</code>这个关键字，直接把函数定义放进去了就可以了。另外，方法之间不需要逗号分隔，加了会报错。</p>\n<p><strong><span style=\"background-color: #99cc00;\">constructor方法</span></strong></p>\n<p><code>constructor</code>方法是类的默认方法，通过<code>new</code>命令生成对象实例时，自动调用该方法。一个类必须有<code>constructor</code>方法，如果没有显式定义，一个空的<code>constructor</code>方法会被默认添加。</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #000000;\">class Animal{\n}\n</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> 等同于</span>\n<span style=\"color: #000000;\">class Animal{\n  constructor(){}\n}</span></pre>\n</div>\n<p> </p>', 6);
INSERT INTO `blog_articledetail` VALUES (7, '<h2><span style=\"background-color: #00ccff;\">一、MySQL中常见索引类型</span></h2>\n<ul>\n<li>普通索引：仅加速查询</li>\n<li>主键索引：加速查询、列值唯一、表中只有一个（不可有null）</li>\n<li>唯一索引：加速查询、列值唯一（可以有null）</li>\n<li>组合索引：多列值组成一个索引，专门用于组合搜索，其效率大于索引合并</li>\n</ul>\n<p>索引合并：使用多个单列索引组合搜索。</p>\n<p>覆盖索引：select的数据列只用从索引中就能够取得，不必读取数据行；换句话说，查询列要被所建的索引覆盖。</p>\n<h3><span style=\"background-color: #99cc00;\"><strong>普通索引</strong></span></h3>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'26a69733-d33c-4748-824f-5c778b00fdfe\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_26a69733-d33c-4748-824f-5c778b00fdfe\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_26a69733-d33c-4748-824f-5c778b00fdfe\" onclick=\"cnblogs_code_hide(\'26a69733-d33c-4748-824f-5c778b00fdfe\',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_26a69733-d33c-4748-824f-5c778b00fdfe\">\n<pre><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 创建表同时添加name字段为普通索引</span>\n<span style=\"color: #0000ff;\">create</span> <span style=\"color: #0000ff;\">table</span><span style=\"color: #000000;\"> tb(\n   id </span><span style=\"color: #0000ff;\">int</span> <span style=\"color: #808080;\">not</span> <span style=\"color: #0000ff;\">null</span> auto_increment <span style=\"color: #0000ff;\">primary</span> <span style=\"color: #0000ff;\">key</span><span style=\"color: #000000;\">,\n   name </span><span style=\"color: #0000ff;\">char</span>(<span style=\"color: #800000; font-weight: bold;\">32</span>) <span style=\"color: #808080;\">not</span> <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">,\n   </span><span style=\"color: #0000ff;\">index</span><span style=\"color: #000000;\"> idx_name(name)\n);\n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 单独为表指定普通索引</span>\n<span style=\"color: #0000ff;\">create</span> <span style=\"color: #0000ff;\">index</span> idx_name <span style=\"color: #0000ff;\">on</span><span style=\"color: #000000;\"> tb(name);\n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 删除索引</span>\n<span style=\"color: #0000ff;\">drop</span> <span style=\"color: #0000ff;\">index</span> idx_name <span style=\"color: #0000ff;\">on</span><span style=\"color: #000000;\"> tb;\n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 查看索引</span>\nshow <span style=\"color: #0000ff;\">index</span> <span style=\"color: #0000ff;\">from</span> tb;</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'33fb51dc-0737-4021-a958-5286e7dfe521\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_33fb51dc-0737-4021-a958-5286e7dfe521\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_33fb51dc-0737-4021-a958-5286e7dfe521\" onclick=\"cnblogs_code_hide(\'33fb51dc-0737-4021-a958-5286e7dfe521\',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_33fb51dc-0737-4021-a958-5286e7dfe521\">\n<pre>Table         <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 表的名称</span>\n<span style=\"color: #000000;\">\nNon_unique    </span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 如果索引为唯一索引,则为0,如果可以则为1</span>\n<span style=\"color: #000000;\">\nKey_name  　　 </span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 索引的名称</span>\n<span style=\"color: #000000;\">\nSeq_in_index  </span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 索引中的列序列号，从1开始</span>\n<span style=\"color: #000000;\">\nColumn_name   </span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 列名称</span>\n<span style=\"color: #000000;\">\nCollation     </span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 列以什么方式存储在索引中。在MySQL中，有值‘A’（升序）或NULL（无分类）</span>\n<span style=\"color: #000000;\">\nCardinality   </span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 索引中唯一值的数目的估计值</span>\n<span style=\"color: #000000;\">\nSub_part  　　 </span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 如果列只是被部分地编入索引，则为被编入索引的字符的数目。如果整列被编入索引，则为NULL</span>\n<span style=\"color: #000000;\">\nPacked  　　　　</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\">指示关键字如何被压缩。如果没有被压缩，则为NULL</span>\n<span style=\"color: #000000;\">\nNull  　　　　　</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 如果列含有NULL，则含有YES。如果没有，则该列含有NO</span>\n<span style=\"color: #000000;\">\nIndex_type  　</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 用过的索引方法（BTREE, FULLTEXT, HASH, RTREE）</span>\n<span style=\"color: #000000;\">\nComment  　　　</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 多种评注</span></pre>\n</div>\n<span class=\"cnblogs_code_collapse\">查看索引 --&gt; 列介绍</span></div>\n<h3><span style=\"background-color: #99cc00;\"><strong>主键索引</strong></span></h3>\n<p> 主键有两个功能：加速查询 和 唯一约束（不可含null）</p>\n<p> 注意：一个表中最多只能有一个主键索引</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'8732b9d0-8ea1-4c74-badc-acfab32a7919\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_8732b9d0-8ea1-4c74-badc-acfab32a7919\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_8732b9d0-8ea1-4c74-badc-acfab32a7919\" onclick=\"cnblogs_code_hide(\'8732b9d0-8ea1-4c74-badc-acfab32a7919\',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_8732b9d0-8ea1-4c74-badc-acfab32a7919\">\n<pre><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 创建表同时添加id字段为主键索引</span><span style=\"color: #008080;\">\n--</span><span style=\"color: #008080;\"> 方式一</span>\n<span style=\"color: #0000ff;\">create</span> <span style=\"color: #0000ff;\">table</span><span style=\"color: #000000;\"> tb(\n   id </span><span style=\"color: #0000ff;\">int</span> <span style=\"color: #808080;\">not</span> <span style=\"color: #0000ff;\">null</span> auto_increment <span style=\"color: #0000ff;\">primary</span> <span style=\"color: #0000ff;\">key</span><span style=\"color: #000000;\">,\n   name </span><span style=\"color: #0000ff;\">char</span>(<span style=\"color: #800000; font-weight: bold;\">4</span>) <span style=\"color: #808080;\">not</span> <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">\n);\n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 方式二</span>\n<span style=\"color: #0000ff;\">create</span> <span style=\"color: #0000ff;\">table</span><span style=\"color: #000000;\"> tb(\n   id </span><span style=\"color: #0000ff;\">int</span> <span style=\"color: #808080;\">not</span> <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\"> auto_increment,\n   name </span><span style=\"color: #0000ff;\">char</span>(<span style=\"color: #800000; font-weight: bold;\">4</span>) <span style=\"color: #808080;\">not</span> <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">,\n   </span><span style=\"color: #0000ff;\">primary</span> <span style=\"color: #0000ff;\">key</span><span style=\"color: #000000;\">(id)\n);\n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 给某个已经存在的表增加主键</span>\n<span style=\"color: #0000ff;\">alter</span> <span style=\"color: #0000ff;\">table</span> tb <span style=\"color: #0000ff;\">add</span> <span style=\"color: #0000ff;\">primary</span> <span style=\"color: #0000ff;\">key</span><span style=\"color: #000000;\">(id);\n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 删除主键</span><span style=\"color: #008080;\">\n--</span><span style=\"color: #008080;\"> 方式一</span>\n<span style=\"color: #0000ff;\">alter</span> <span style=\"color: #0000ff;\">table</span> tb <span style=\"color: #0000ff;\">drop</span> <span style=\"color: #0000ff;\">primary</span> <span style=\"color: #0000ff;\">key</span><span style=\"color: #000000;\">;\n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 方式二</span><span style=\"color: #008080;\">\n--</span><span style=\"color: #008080;\"> 如果当前主键为自增主键，则不能直接删除，需要先修改自增属性，再删除</span>\n<span style=\"color: #0000ff;\">alter</span> <span style=\"color: #0000ff;\">table</span> tb modify id <span style=\"color: #0000ff;\">int</span>,<span style=\"color: #0000ff;\">drop</span> <span style=\"color: #0000ff;\">primary</span> <span style=\"color: #0000ff;\">key</span>;</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<h3><span style=\"background-color: #99cc00;\"><strong>唯一索引</strong></span></h3>\n<p> 唯一索引有两个功能：<strong>加速查找</strong> 和<strong> 唯一约束</strong>（可含一个null 值）</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'f35ae8f1-823d-44cc-9c9d-8a9cc2998f96\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_f35ae8f1-823d-44cc-9c9d-8a9cc2998f96\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_f35ae8f1-823d-44cc-9c9d-8a9cc2998f96\" onclick=\"cnblogs_code_hide(\'f35ae8f1-823d-44cc-9c9d-8a9cc2998f96\',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_f35ae8f1-823d-44cc-9c9d-8a9cc2998f96\">\n<pre><span style=\"color: #0000ff;\">create</span> <span style=\"color: #0000ff;\">table</span><span style=\"color: #000000;\"> tb(\n  id </span><span style=\"color: #0000ff;\">int</span> <span style=\"color: #808080;\">not</span> <span style=\"color: #0000ff;\">null</span> auto_increment <span style=\"color: #0000ff;\">primary</span> <span style=\"color: #0000ff;\">key</span><span style=\"color: #000000;\">,\n  name </span><span style=\"color: #0000ff;\">char</span>(<span style=\"color: #800000; font-weight: bold;\">4</span>) <span style=\"color: #808080;\">not</span> <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">,\n  age </span><span style=\"color: #0000ff;\">int</span> <span style=\"color: #808080;\">not</span> <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">,\n  </span><span style=\"color: #0000ff;\">unique</span> <span style=\"color: #0000ff;\">index</span><span style=\"color: #000000;\"> idx_age (age)\n);\n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 给某个已经存在的表创建唯一索引</span>\n<span style=\"color: #0000ff;\">create</span> <span style=\"color: #0000ff;\">unique</span> <span style=\"color: #0000ff;\">index</span> idx_age <span style=\"color: #0000ff;\">on</span> tb(age);</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<h3><span style=\"background-color: #99cc00;\"><strong>组合索引</strong></span></h3>\n<p>组合索引是将n个列组合成一个索引<br/>应用场景：频繁的同时使用n列来进行查询，如：select * from tb where name=\"pd\" and id=888;</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'014af04b-d5e4-4fdb-9311-ec6829b533e2\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_014af04b-d5e4-4fdb-9311-ec6829b533e2\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_014af04b-d5e4-4fdb-9311-ec6829b533e2\" onclick=\"cnblogs_code_hide(\'014af04b-d5e4-4fdb-9311-ec6829b533e2\',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_014af04b-d5e4-4fdb-9311-ec6829b533e2\">\n<pre><span style=\"color: #0000ff;\">create</span> <span style=\"color: #0000ff;\">table</span><span style=\"color: #000000;\"> tb(\n    id </span><span style=\"color: #0000ff;\">int</span> <span style=\"color: #808080;\">not</span> <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">,\n    name </span><span style=\"color: #0000ff;\">char</span>(<span style=\"color: #800000; font-weight: bold;\">4</span>) <span style=\"color: #808080;\">not</span> <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">,\n    age </span><span style=\"color: #0000ff;\">int</span> <span style=\"color: #808080;\">not</span> <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">,\n    </span><span style=\"color: #0000ff;\">index</span><span style=\"color: #000000;\"> idx_name_age (name,age)\n);\n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 给某个已经存在的表创建组合索引</span>\n<span style=\"color: #0000ff;\">create</span> <span style=\"color: #0000ff;\">index</span> idx_name_age <span style=\"color: #0000ff;\">on</span> tb(name,age);</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<h2><span style=\"background-color: #00ccff;\"> 二、聚集索引和非聚集索引（辅助索引）</span></h2>\n<p> <strong>数据库中的 B+tree 索引可以分为：聚集索引和非<strong>聚集索引</strong></strong></p>\n<p><strong> 聚集索引</strong>：innodb表/索引组织表，即表中数据按主键B+树存放，叶子节点直接存放整条数据，每张表只能有一个聚集索引。</p>\n<p><img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1468833/201810/1468833-20181011192938119-1153981188.png\"/></p>\n<p>①当你定义一个主键时，innodb 存储引擎则把它当做聚集索引；</p>\n<p>②如果你没有定义一个主键，则 innodb 定位到第一个唯一索引，且该索引的所有列值均飞空的，则将其当做聚集索引；</p>\n<p>③如果表没有主键或合适的唯一索引，innodb 会产生一个隐藏的行ID值6字节的行ID聚集索引。</p>\n<p>补充：由于实际的数据页只能按照一颗B+tree进行排序，因此每张表只能有一个聚集索引，聚集索引对于主键的排序和范围查找非常有利。</p>\n<p><strong>非聚集索引（辅助索引）</strong>：指叶节点不包含行的全部数据，叶节点除了包含键值之外，还包含一个书签连接，通过该书签再去找相应的行数据。</p>\n<p><img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1468833/201810/1468833-20181011193346101-523543660.png\"/></p>\n<p><strong>innodb存储引擎辅助索引获得数据的查找方式如下：</strong></p>\n<p><strong><img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1468833/201810/1468833-20181011193554668-537067747.png\"/></strong></p>\n<p>从上图中可以看出，辅助索引叶节点存放的是主键值，获得主键值后，再从聚集索引中查找整行数据。<br/>举个例子，如果在一颗高度为3的辅助索引中查找数据，首先从辅助索引中获得主键值（3次IO），接着从高度为3的聚集索引中查找以获得整行数据（3次IO），总共需6次IO。一个表上可以存在多个辅助索引。</p>\n<p><strong>聚集索引与辅助索引区别：</strong></p>\n<ul>\n<li><strong>相同的是：不管是聚集索引还是辅助索引，其内部都是 B+tree 形式，即高度是平衡的，叶子结点存放着所有的数据。</strong></li>\n<li><strong>不同的是：聚集索引叶子结点存放的是一整行的信息，而辅助索引叶子结点存放的是单个索引字段信息。</strong></li>\n</ul>\n<p><strong>何时使用聚集索引或非聚集索引（重要！！！）：</strong></p>\n<p><img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1468833/201810/1468833-20181011195158955-153886705.png\"/></p>\n<h2><span style=\"background-color: #00ccff;\">三、测试索引</span></h2>\n<h3><span style=\"background-color: #99cc00;\"><strong>1、创建表</strong></span></h3>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'badb26c3-c923-40e0-a105-5ce551a617a5\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_badb26c3-c923-40e0-a105-5ce551a617a5\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_badb26c3-c923-40e0-a105-5ce551a617a5\" onclick=\"cnblogs_code_hide(\'badb26c3-c923-40e0-a105-5ce551a617a5\',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_badb26c3-c923-40e0-a105-5ce551a617a5\">\n<pre><span style=\"color: #0000ff;\">create</span> <span style=\"color: #0000ff;\">table</span><span style=\"color: #000000;\"> userinfo(\n    id </span><span style=\"color: #0000ff;\">int</span> <span style=\"color: #808080;\">not</span> <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">,\n    name </span><span style=\"color: #0000ff;\">varchar</span>(<span style=\"color: #800000; font-weight: bold;\">16</span>) <span style=\"color: #0000ff;\">default</span> <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">,\n    age </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\">,\n    gender </span><span style=\"color: #0000ff;\">char</span>(<span style=\"color: #800000; font-weight: bold;\">1</span>) <span style=\"color: #808080;\">not</span> <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">,\n    email </span><span style=\"color: #0000ff;\">varchar</span>(<span style=\"color: #800000; font-weight: bold;\">32</span>) <span style=\"color: #0000ff;\">default</span> <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">\n)engine</span><span style=\"color: #808080;\">=</span>myisam <span style=\"color: #0000ff;\">default</span> charset<span style=\"color: #808080;\">=</span>utf8;</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>注意：MYISAM存储引擎不产生引擎事务，数据插入速度极快，为方便快速插入测试数据，等我们插完数据，再把存储类型修改为InnoDB。</p>\n<h3><span style=\"background-color: #99cc00;\"><strong>2、创建存储过程</strong></span></h3>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'5329501a-2f53-454a-afe5-ec1efa7829ce\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_5329501a-2f53-454a-afe5-ec1efa7829ce\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_5329501a-2f53-454a-afe5-ec1efa7829ce\" onclick=\"cnblogs_code_hide(\'5329501a-2f53-454a-afe5-ec1efa7829ce\',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_5329501a-2f53-454a-afe5-ec1efa7829ce\">\n<pre><span style=\"color: #0000ff;\">create</span> <span style=\"color: #0000ff;\">procedure</span> insert_userinfo(<span style=\"color: #808080;\">in</span> num <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #0000ff;\">begin</span>\n    <span style=\"color: #0000ff;\">declare</span> i <span style=\"color: #0000ff;\">int</span> <span style=\"color: #0000ff;\">default</span> <span style=\"color: #800000; font-weight: bold;\">0</span><span style=\"color: #000000;\">;\n    </span><span style=\"color: #0000ff;\">declare</span> n <span style=\"color: #0000ff;\">int</span> <span style=\"color: #0000ff;\">default</span> <span style=\"color: #800000; font-weight: bold;\">1</span><span style=\"color: #000000;\">;\n    </span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 循环进行数据插入</span>\n    <span style=\"color: #0000ff;\">while</span> n<span style=\"color: #808080;\">&lt;=</span><span style=\"color: #000000;\">num do\n        </span><span style=\"color: #0000ff;\">set</span> i<span style=\"color: #808080;\">=</span><span style=\"color: #ff00ff;\">rand</span>()<span style=\"color: #808080;\">*</span><span style=\"color: #800000; font-weight: bold;\">50</span><span style=\"color: #000000;\">;\n        </span><span style=\"color: #0000ff;\">insert</span> <span style=\"color: #0000ff;\">into</span> userinfo(id,name,age,gender,email) <span style=\"color: #0000ff;\">values</span>(n,concat(\"pink\",i),<span style=\"color: #ff00ff;\">rand</span>()<span style=\"color: #808080;\">*</span><span style=\"color: #800000; font-weight: bold;\">50</span>,<span style=\"color: #0000ff;\">if</span>(i<span style=\"color: #808080;\">%</span><span style=\"color: #800000; font-weight: bold;\">2</span><span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">0</span>,\"女\",\"男\"),concat(\"pink\",n,\"<span style=\"color: #008000;\">@qq</span><span style=\"color: #000000;\">.com\"));\n        </span><span style=\"color: #0000ff;\">set</span> n<span style=\"color: #808080;\">=</span>n<span style=\"color: #808080;\">+</span><span style=\"color: #800000; font-weight: bold;\">1</span><span style=\"color: #000000;\">;\n    </span><span style=\"color: #0000ff;\">end</span> <span style=\"color: #0000ff;\">while</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #0000ff;\">end</span>;</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<h3><span style=\"background-color: #99cc00;\"><strong>3、调用存储过程，插入500万条数据</strong></span></h3>\n<div class=\"cnblogs_code\">\n<pre>call insert_userinfo(<span style=\"color: #800000; font-weight: bold;\">5000000</span>);</pre>\n</div>\n<p><img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1468833/201902/1468833-20190227150511517-1834540893.png\"/></p>\n<h3><span style=\"background-color: #99cc00;\"><strong>4、修改引擎为INNODB</strong></span></h3>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">alter</span> <span style=\"color: #0000ff;\">table</span> userinfo engine<span style=\"color: #808080;\">=</span>innodb;</pre>\n</div>\n<p><img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1468833/201902/1468833-20190227150907650-1482051796.png\"/></p>\n<h3><span style=\"background-color: #99cc00;\"><strong>5、测试索引</strong></span></h3>\n<p><strong>①在没有索引的前提下测试查询速度</strong></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> userinfo <span style=\"color: #0000ff;\">where</span> id<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">4567890</span>;</pre>\n</div>\n<p><img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1468833/201902/1468833-20190227151319638-1370709742.png\"/></p>\n<p>注意：无索引情况，mysql根本就不知道id等于4567890的记录在哪里，只能把数据表从头到尾扫描一遍，此时有多少个磁盘块就需要进行多少IO操作，所以查询速度很慢。</p>\n<p><strong>②在表中已经存在大量数据的前提下，为某个字段段建立索引，建立速度会很慢</strong></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">create</span> <span style=\"color: #0000ff;\">index</span> idx_id <span style=\"color: #0000ff;\">on</span> userinfo(id);</pre>\n</div>\n<p><img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1468833/201902/1468833-20190227151525811-1131918694.png\"/></p>\n<p><strong><span style=\"font-family: 微软雅黑, PTSans, Arial, sans-serif; font-size: 15px;\">③在索引建立完毕后，以该字段为查询条件时，查询速度提升明显</span></strong></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> userinfo <span style=\"color: #0000ff;\">where</span> id<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">4567890</span>;</pre>\n</div>\n<p><strong><span style=\"font-family: 微软雅黑, PTSans, Arial, sans-serif; font-size: 15px;\"><img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1468833/201902/1468833-20190227151623057-621808940.png\"/></span></strong></p>\n<p><strong><span style=\"background-color: #ffff00;\">注意：</span></strong></p>\n<ol>\n<li>mysql先去索引表里根据 b+树 的搜索原理很快搜索到id为4567890的数据，IO大大降低，因而速度明显提升</li>\n<li>我们可以去mysql的data目录下找到该表，可以看到添加索引后该表占用的硬盘空间多了</li>\n<li>如果使用没有添加索引的字段进行条件查询，速度依旧会很慢（如下图）</li>\n</ol>\n<p><img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1468833/201902/1468833-20190227151905376-1709262190.png\"/></p>\n<h2><span style=\"background-color: #00ccff;\">四、正确使用索引</span></h2>\n<p><strong>数据库表中添加索引后确实会让查询速度起飞，但前提必须是正确的使用索引来查询，如果以错误的方式使用，则即使建立索引也会不奏效。</strong><br/><strong>即使建立索引，索引也不会生效，例如：</strong></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 范围查询（&gt;、&gt;=、&lt;、&lt;=、!= 、between...and）</span>\n    <span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> = 等号</span>\n    <span style=\"color: #0000ff;\">select</span> <span style=\"color: #ff00ff;\">count</span>(<span style=\"color: #808080;\">*</span>) <span style=\"color: #0000ff;\">from</span> userinfo <span style=\"color: #0000ff;\">where</span> id<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">1000</span>； <span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 执行索引，索引效率高</span>\n    \n    <span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> &gt;、&gt;=、&lt;、&lt;=、between...and 区间查询</span>\n    <span style=\"color: #0000ff;\">select</span> <span style=\"color: #ff00ff;\">count</span>(<span style=\"color: #808080;\">*</span>) <span style=\"color: #0000ff;\">from</span> userinfo <span style=\"color: #0000ff;\">where</span> id<span style=\"color: #808080;\">&lt;</span><span style=\"color: #800000; font-weight: bold;\">100</span>;   <span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 执行索引，区间范围越小，索引效率越高</span>\n    <span style=\"color: #0000ff;\">select</span> <span style=\"color: #ff00ff;\">count</span>(<span style=\"color: #808080;\">*</span>) <span style=\"color: #0000ff;\">from</span> userinfo <span style=\"color: #0000ff;\">where</span> id<span style=\"color: #808080;\">&gt;</span><span style=\"color: #800000; font-weight: bold;\">100</span>;   <span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 执行索引，区间范围越大，索引效率越低</span>\n    <span style=\"color: #0000ff;\">select</span> <span style=\"color: #ff00ff;\">count</span>(<span style=\"color: #808080;\">*</span>) <span style=\"color: #0000ff;\">from</span> userinfo <span style=\"color: #0000ff;\">where</span> id <span style=\"color: #808080;\">between</span> <span style=\"color: #800000; font-weight: bold;\">10</span> <span style=\"color: #808080;\">and</span> <span style=\"color: #800000; font-weight: bold;\">500000</span>; <span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 执行索引，区间范围越大，索引效率越低</span>\n    \n    <span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> != 不等于</span>\n    <span style=\"color: #0000ff;\">select</span> <span style=\"color: #ff00ff;\">count</span>(<span style=\"color: #808080;\">*</span>) <span style=\"color: #0000ff;\">from</span> userinfo <span style=\"color: #0000ff;\">where</span> id<span style=\"color: #808080;\">!=</span><span style=\"color: #800000; font-weight: bold;\">1000</span>; <span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 索引范围大，索引效率低</span>\n   \n \n<span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> like \"%xx%\"</span>\n    <span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 为name字段添加索引</span>\n    <span style=\"color: #0000ff;\">create</span> <span style=\"color: #0000ff;\">index</span> idx_name <span style=\"color: #0000ff;\">on</span><span style=\"color: #000000;\"> userinfo(name);\n    \n    </span><span style=\"color: #0000ff;\">select</span> <span style=\"color: #ff00ff;\">count</span>(<span style=\"color: #808080;\">*</span>) <span style=\"color: #0000ff;\">from</span> userinfo <span style=\"color: #0000ff;\">where</span> name <span style=\"color: #808080;\">like</span> \"<span style=\"color: #808080;\">%</span>xxxx<span style=\"color: #808080;\">%</span>\";  <span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 全模糊查询，索引效率低</span>\n    <span style=\"color: #0000ff;\">select</span> <span style=\"color: #ff00ff;\">count</span>(<span style=\"color: #808080;\">*</span>) <span style=\"color: #0000ff;\">from</span> userinfo <span style=\"color: #0000ff;\">where</span> name <span style=\"color: #808080;\">like</span> \"<span style=\"color: #808080;\">%</span>xxxx\";   <span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 以什么结尾模糊查询，索引效率低</span>\n     <span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 例外：当like使用以什么开头，索引效率高</span>\n    <span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> userinfo <span style=\"color: #0000ff;\">where</span> name <span style=\"color: #808080;\">like</span> \"xxxx<span style=\"color: #808080;\">%</span><span style=\"color: #000000;\">\";\n\n<br/></span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> or</span>\n    <span style=\"color: #0000ff;\">select</span> <span style=\"color: #ff00ff;\">count</span>(<span style=\"color: #808080;\">*</span>) <span style=\"color: #0000ff;\">from</span> userinfo <span style=\"color: #0000ff;\">where</span> id<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">1000</span> <span style=\"color: #808080;\">or</span> email<span style=\"color: #808080;\">=</span>\"xx\";   <span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> email不是索引字段，索引此查询全表扫描</span>\n    \n    <span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 例外：当or条件中有未建立索引的列才失效，以下会走索引</span>\n    <span style=\"color: #0000ff;\">select</span> <span style=\"color: #ff00ff;\">count</span>(<span style=\"color: #808080;\">*</span>) <span style=\"color: #0000ff;\">from</span> userinfo <span style=\"color: #0000ff;\">where</span> id<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">1000</span> <span style=\"color: #808080;\">or</span> name<span style=\"color: #808080;\">=</span>\"pink3\"; <span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> id和name都为索引字段时，or条件也会执行索引</span>\n\n<br/><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 使用函数</span>\n    <span style=\"color: #0000ff;\">select</span> <span style=\"color: #ff00ff;\">count</span>(<span style=\"color: #808080;\">*</span>) <span style=\"color: #0000ff;\">from</span> userinfo <span style=\"color: #0000ff;\">where</span> <span style=\"color: #ff00ff;\">reverse</span>(name)<span style=\"color: #808080;\">=</span>\"1knip\";   <span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> name索引字段,使用函数时,索引失效</span>\n    <span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 例外：索引字段对应的值可以使用函数，我们可以改为以下形式</span>\n    <span style=\"color: #0000ff;\">select</span> <span style=\"color: #ff00ff;\">count</span>(<span style=\"color: #808080;\">*</span>) <span style=\"color: #0000ff;\">from</span> userinfo <span style=\"color: #0000ff;\">where</span> name<span style=\"color: #808080;\">=</span><span style=\"color: #ff00ff;\">reverse</span><span style=\"color: #000000;\">(\"1knip\");\n\n<br/></span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 类型不一致</span>\n    <span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 如果列是字符串类型，传入条件是必须用引号引起来</span>\n    <span style=\"color: #0000ff;\">select</span> <span style=\"color: #ff00ff;\">count</span>(<span style=\"color: #808080;\">*</span>) <span style=\"color: #0000ff;\">from</span> userinfo <span style=\"color: #0000ff;\">where</span> name<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">123</span>;   <span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 慢</span>\n    <span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 类型一致</span>\n    <span style=\"color: #0000ff;\">select</span> <span style=\"color: #ff00ff;\">count</span>(<span style=\"color: #808080;\">*</span>) <span style=\"color: #0000ff;\">from</span> userinfo <span style=\"color: #0000ff;\">where</span> name<span style=\"color: #808080;\">=</span>\"<span style=\"color: #800000; font-weight: bold;\">123</span>\"; <span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 快</span>\n\n<br/><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> order by</span>\n    <span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 排序条件为索引，则select字段必须也是索引字段，否则无法命中  </span>\n    <span style=\"color: #0000ff;\">select</span> email <span style=\"color: #0000ff;\">from</span> userinfo <span style=\"color: #0000ff;\">order</span> <span style=\"color: #0000ff;\">by</span> name <span style=\"color: #0000ff;\">desc</span>;  <span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 无法命中索引</span>\n    <span style=\"color: #0000ff;\">select</span> name <span style=\"color: #0000ff;\">from</span> userinfo <span style=\"color: #0000ff;\">order</span> <span style=\"color: #0000ff;\">by</span> name <span style=\"color: #0000ff;\">desc</span>;   <span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 命中索引</span></pre>\n</div>\n<h2><span style=\"background-color: #00ccff;\">五、组合索引</span></h2>\n<p>组合索引：是指对表上的多个列组合起来做一个索引。</p>\n<p>组合索引好处，简单的说有两个主要原因：</p>\n<ul>\n<li>一个顶三个；建了一个(a,b,c)的组合索引，那么实际等于建了(a),(a,b),(a,b,c)三个索引，因为每多一个索引，都会增加写操作的开销和磁盘空间的开销。对于大量数据的表，这可是不小的开销！</li>\n<li>索引列越多，通过索引筛选出的数据越少。有1000W条数据的表，有如下sql：select * from table where a=1 and b=2 and c=3，假设每个条件可以筛选出10%的数据，如果只有单值索引，那么通过该索引能筛选出1000W*10%=100w条数据，然后再回表从100w条数据中找到符合 b=2 and c= 3 的数据，然后再排序，再分页；如果是组合索引，通过索引筛选出1000w*10%*10%*10%=1w，然后再排序、分页，哪个更高效，一眼便知 。</li>\n</ul>\n<p><span style=\"background-color: #ff99cc;\"><strong>最左匹配原则：</strong>从左往右依次使用生效，如果中间某个索引没有使用，那么断点前面的索引部分起作用，断点后面的索引没有起作用。</span></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> tb <span style=\"color: #0000ff;\">where</span> a<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">1</span> <span style=\"color: #808080;\">and</span> b<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">2</span> <span style=\"color: #808080;\">and</span> c<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">3</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> abc三个索引都在where条件里面用到了，而且都发挥了作用</span>\n\n<span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> tb <span style=\"color: #0000ff;\">where</span> c<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">3</span> <span style=\"color: #808080;\">and</span> b<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">2</span> <span style=\"color: #808080;\">and</span> a<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 这条语句列出来只想说明mysql没有那么笨，where里面的条件顺序在查询之前会被mysql自动优化，效果跟上一句一样</span>\n\n<span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> tb <span style=\"color: #0000ff;\">where</span> a<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">1</span> <span style=\"color: #808080;\">and</span> c<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">3</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> a用到索引，b没有用，所以c是没有用到索引效果的</span>\n\n<span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> tb <span style=\"color: #0000ff;\">where</span> a<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">1</span> <span style=\"color: #808080;\">and</span> b<span style=\"color: #808080;\">&gt;</span><span style=\"color: #800000; font-weight: bold;\">2</span> <span style=\"color: #808080;\">and</span> c<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">3</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> a用到了，b也用到了，c没有用到，这个地方b是范围值，也算断点，只不过自身用到了索引</span>\n\n<span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> tb <span style=\"color: #0000ff;\">where</span> a<span style=\"color: #808080;\">&gt;</span><span style=\"color: #800000; font-weight: bold;\">1</span> <span style=\"color: #808080;\">and</span> b<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">2</span> <span style=\"color: #808080;\">and</span> c<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">3</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> a用到了，b没有使用，c没有使用</span>\n\n<span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> tb <span style=\"color: #0000ff;\">where</span> a<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">1</span> <span style=\"color: #0000ff;\">order</span> <span style=\"color: #0000ff;\">by</span><span style=\"color: #000000;\"> b;\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> a用到了索引，b在结果排序中也用到了索引的效果</span>\n\n<span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> tb <span style=\"color: #0000ff;\">where</span> a<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">1</span> <span style=\"color: #0000ff;\">order</span> <span style=\"color: #0000ff;\">by</span><span style=\"color: #000000;\"> c;\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> a用到了索引，但是c没有发挥排序效果，因为中间断点了</span>\n\n<span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> tb <span style=\"color: #0000ff;\">where</span> b<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">2</span> <span style=\"color: #0000ff;\">order</span> <span style=\"color: #0000ff;\">by</span><span style=\"color: #000000;\"> a;\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> b没有用到索引，排序中a也没有发挥索引效果</span></pre>\n</div>\n<h2><span style=\"background-color: #00ccff;\">六<strong>、注意事项（重要）</strong></span></h2>\n<p>1、避免使用select *<br/>2、其他数据库中使用count(1)或count(列)代替count(*)，而mysql数据库中count(*)经过优化后，效率与前两种基本一样<br/>3、创建表时尽量时 char 代替 varchar<br/>4、表的字段顺序固定长度的字段优先<br/>5、组合索引代替多个单列索引（经常使用多个条件查询时）<br/>6、使用连接（JOIN）来代替子查询（Sub-Queries）<br/>7、不要有超过4个以上的表连接（JOIN）<br/>8、优先执行那些能够大量减少结果的连接<br/>9、连表时注意条件类型需一致<br/>10、索引散列值不适合建索引，例：性别不适合</p>\n<h2><span style=\"background-color: #00ccff;\">七、慢查询日志</span></h2>\n<p><strong>慢查询日志：</strong>将mysql服务器中影响数据库性能的相关SQL语句记录到日志文件，通过对这些特殊的SQL语句分析，改进以达到提高数据库性能的目的。</p>\n<p>慢查询日志参数：</p>\n<div class=\"cnblogs_code\">\n<pre>long_query_time               <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 设定慢查询的阀值，超出设定值的SQL即被记录到慢查询日志，缺省值为10s</span>\nslow_query_log                <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 指定是否开启慢查询日志</span>\nlog_slow_queries              <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 指定是否开启慢查询日志(该参数已经被slow_query_log取代，做兼容性保留)</span>\nslow_query_log_file           <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 指定慢日志文件存放位置，可以为空，系统会给一个缺省的文件host_name-slow.log</span>\nlog_queries_not_using_indexes <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 如果值设置为ON，则会记录所有没有利用索引的查询</span></pre>\n</div>\n<p>查看MySQL慢日志信息：</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 查询慢日志配置信息</span>\nshow variables <span style=\"color: #808080;\">like</span> \"<span style=\"color: #808080;\">%</span>query<span style=\"color: #808080;\">%</span><span style=\"color: #000000;\">\";\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 修改配置信息</span>\n<span style=\"color: #0000ff;\">set</span> global slow_query_log <span style=\"color: #808080;\">= </span><span style=\"color: #0000ff;\">on</span>;</pre>\n</div>\n<p>查看不使用索引参数状态：</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 显示参数　　</span>\nshow variables <span style=\"color: #808080;\">like</span> \"<span style=\"color: #808080;\">%</span><span style=\"color: #000000;\">log_queries_not_using_indexes\";\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 开启状态</span>\n<span style=\"color: #0000ff;\">set</span> global log_queries_not_using_indexes <span style=\"color: #808080;\">= </span><span style=\"color: #0000ff;\">on</span>;</pre>\n</div>\n<p>查看慢日志显示的方式：</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 查看慢日志记录的方式</span>\nshow variables <span style=\"color: #808080;\">like</span> \"<span style=\"color: #808080;\">%</span>log_output<span style=\"color: #808080;\">%</span><span style=\"color: #000000;\">\";\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 设置慢日志在文件和表中同时记录</span>\n<span style=\"color: #0000ff;\">set</span> global log_output<span style=\"color: #808080;\">=</span>\"<span style=\"color: #0000ff;\">FILE</span>,<span style=\"color: #0000ff;\">TABLE</span>\";</pre>\n</div>\n<p>测试慢查询日志：</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 查询时间超过10秒就会记录到慢查询日志中</span>\n<span style=\"color: #0000ff;\">select</span> sleep(<span style=\"color: #800000; font-weight: bold;\">3</span>) <span style=\"color: #0000ff;\">from</span><span style=\"color: #000000;\"> userinfo;\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 查看表中的日志</span>\n<span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> mysql.slow_log;</pre>\n</div>\n<h2><span style=\"background-color: #00ccff;\">八、执行计划</span></h2>\n<p><strong>explain + <strong>查询</strong>SQL：用于显示SQL执行信息参数，根据参考信息可以进行SQL优化。</strong></p>\n<div class=\"cnblogs_code\">\n<pre>explain  <span style=\"color: #0000ff;\">select</span> <span style=\"color: #ff00ff;\">count</span>(<span style=\"color: #808080;\">*</span>) <span style=\"color: #0000ff;\">from</span> userinfo <span style=\"color: #0000ff;\">where</span>  id<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">1</span>;</pre>\n</div>\n<p><strong><img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1468833/201903/1468833-20190304145753886-970080954.png\"/></strong></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #000000;\">执行计划：让mysql预估执行操作(一般正确)。\n\ntype：查询计划的连接类型, 有多个参数，先从最佳类型到最差类型介绍\n性能：</span><span style=\"color: #0000ff;\">null</span> <span style=\"color: #808080;\">&gt;</span> system<span style=\"color: #808080;\">/</span>const <span style=\"color: #808080;\">&gt;</span> eq_ref <span style=\"color: #808080;\">&gt;</span> ref <span style=\"color: #808080;\">&gt;</span> ref_or_null <span style=\"color: #808080;\">&gt;</span> index_merge <span style=\"color: #808080;\">&gt;</span>  range <span style=\"color: #808080;\">&gt;</span> <span style=\"color: #0000ff;\">index</span> <span style=\"color: #808080;\">&gt;</span>  <span style=\"color: #808080;\">all</span><span style=\"color: #000000;\"> \n\n慢：\n    explain </span><span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> userinfo <span style=\"color: #0000ff;\">where</span> email<span style=\"color: #808080;\">=</span><span style=\"color: #000000;\">\"pink\";\n    type: </span><span style=\"color: #808080;\">ALL</span><span style=\"color: #000000;\">(全表扫描)\n    特别的: </span><span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> userinfo limit <span style=\"color: #800000; font-weight: bold;\">1</span><span style=\"color: #000000;\">;\n    \n快：\n    explain </span><span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> userinfo <span style=\"color: #0000ff;\">where</span> name<span style=\"color: #808080;\">=</span><span style=\"color: #000000;\">\"alex\";\n    type: ref(走索引)</span></pre>\n</div>\n<p><a href=\"http://www.cnblogs.com/wangfengming/articles/8275448.html\" target=\"_blank\"><strong>EXPLAIN 参数详解</strong></a></p>\n<h2><span style=\"background-color: #00ccff;\">九、大数据量分页优化</span></h2>\n<p><strong>执行此段代码：</strong></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> userinfo limit <span style=\"color: #800000; font-weight: bold;\">3000000</span>,<span style=\"color: #800000; font-weight: bold;\">10</span>;</pre>\n</div>\n<p><strong>优化方案：</strong></p>\n<p><strong>1、简单粗暴，不允许查看这么靠后的数据。比如百度就是这样的，最多翻到76页就不让你翻了，这种方式就是从业务上解决。</strong></p>\n<p><strong><img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1468833/201902/1468833-20190227205709058-140942551.png\"/></strong></p>\n<p><strong>2、在查询下一页时把上一页的行id作为参数传递给客户端程序，然后sql就改成了</strong></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> userinfo <span style=\"color: #0000ff;\">where</span> id<span style=\"color: #808080;\">&gt;</span><span style=\"color: #800000; font-weight: bold;\">3000000</span> limit <span style=\"color: #800000; font-weight: bold;\">10</span>;</pre>\n</div>\n<p>这条语句执行也是在毫秒级完成的，id&gt;300w 其实就是让mysql直接跳到这里了，不用依次在扫描全面所有的行。</p>\n<p><strong>3、延迟关联</strong></p>\n<p>分析一下这条语句为什么慢，慢在哪里：</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> userinfo limit <span style=\"color: #800000; font-weight: bold;\">3000000</span>,<span style=\"color: #800000; font-weight: bold;\">10</span>;</pre>\n</div>\n<p>慢就慢在这个 * 里面，这个表除了id主键肯定还有其他字段，比如 name、age 之类的，因为select  *  所以mysql在沿着id主键走的时候要回行拿数据，走一下拿一下数据；如果把语句改成：</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">select</span> id <span style=\"color: #0000ff;\">from</span> userinfo limit <span style=\"color: #800000; font-weight: bold;\">3000000</span>,<span style=\"color: #800000; font-weight: bold;\">10</span>;</pre>\n</div>\n<p>你会发现时间缩短了很多；然后我们在拿id分别去取10条数据就行了。语句就改成了这样：</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">select</span> userinfo.<span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> userinfo <span style=\"color: #0000ff;\">inner</span> <span style=\"color: #808080;\">join</span><span style=\"color: #000000;\">\n(</span><span style=\"color: #0000ff;\">select</span> id <span style=\"color: #0000ff;\">from</span> userinfo limit <span style=\"color: #800000; font-weight: bold;\">3000000</span>,<span style=\"color: #800000; font-weight: bold;\">10</span>) <span style=\"color: #0000ff;\">as</span><span style=\"color: #000000;\"> tmp\n</span><span style=\"color: #0000ff;\">on</span> tmp.id<span style=\"color: #808080;\">=</span>userinfo.id;</pre>\n</div>\n<p><strong>PS：三种方法最先考虑第一种，其次第二种，第三种是别无选择。</strong></p>\n<p> </p>', 7);
INSERT INTO `blog_articledetail` VALUES (8, '<h2><span style=\"background-color: #00ccff;\"><strong>一、常见匹配模式</strong></span></h2>\n<div class=\"cnblogs_code\">\n<pre>\\W        <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 匹配字母数字及下划线</span>\n\\W        <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 匹配非字母数字下划线</span>\n\\s        <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 匹配任意空白字符，等价于[\\t\\n\\r\\f]</span>\n\\S        <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 匹配任意非空字符</span>\n\\d        <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 匹配任意数字，等价于[0-9]</span>\n\\D        <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 匹配任意非数字</span>\n\\z        <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 匹配字符串结束</span>\n\\Z        <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串</span>\n\\A        <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 匹配字符串开始</span>\n\\G        <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 匹配最后匹配完成的位置</span>\n\\n        <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 匹配一个换行符</span>\n\\t        <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 匹配一个制表符</span>\n^         <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 匹配字符串的开头</span>\n$         <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 匹配字符串的末尾。</span>\na|b       <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 匹配a或b</span>\n.         <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 匹配任意字符(除了换行符)，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符</span>\n()        <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 匹配括号内的表达式，也表示一个组</span>\n[...]     <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 用来表示一组字符，单独列出：[abc] 匹配 a、b或c</span>\n[^...]    <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 不在[]中的字符：[^abc] 匹配除了a、b、c之外的字符</span>\n<span style=\"color: #000000;\">\n?         </span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 匹配 0个 或 一个 由前面的正则表达式定义的片段，非贪婪方式</span>\n*         <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 匹配 0个 或 多个</span>\n+         <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 匹配 1个 或 多个</span>\n{n}       <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 精确匹配n个前面表达式</span>\n{n, m}    <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 匹配 n 到 m 次由前面的正则表达式定义的片段，贪婪方式</span></pre>\n</div>\n<h2 id=\"re.match\"><span style=\"background-color: #00ccff;\"><strong>二、re.match</strong></span></h2>\n<div class=\"cnblogs_Highlighter\">\n<pre class=\"brush:python;gutter:true;\">re.match(pattern, string, flags=0)</pre>\n</div>\n<p>re.match 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none</p>\n<h3 id=\"最常规的匹配\"><span style=\"background-color: #99cc00;\"><strong>最常规的匹配</strong></span></h3>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'bd52f4ef-9629-489d-a63e-5ef878f41f8f\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_bd52f4ef-9629-489d-a63e-5ef878f41f8f\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_bd52f4ef-9629-489d-a63e-5ef878f41f8f\" onclick=\"cnblogs_code_hide(\'bd52f4ef-9629-489d-a63e-5ef878f41f8f\',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_bd52f4ef-9629-489d-a63e-5ef878f41f8f\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> re\n\ncontent </span>= <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Hello 123 4567 World_This is a Regex Demo</span><span style=\"color: #800000;\">\"</span>\n<span style=\"color: #0000ff;\">print</span><span style=\"color: #000000;\">(len(content))\nresult </span>= re.match(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">^Hello\\s\\d\\d\\d\\s\\d{4}\\s\\w{10}.*Demo$</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, content)\n</span><span style=\"color: #0000ff;\">print</span><span style=\"color: #000000;\">(result)\n</span><span style=\"color: #0000ff;\">print</span>(result.group()) <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 匹配结果</span>\n<span style=\"color: #0000ff;\">print</span>(result.span())  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 输出匹配结果范围</span><span style=\"color: #008000;\">\n#</span><span style=\"color: #008000;\"> 41</span><span style=\"color: #008000;\">\n#</span><span style=\"color: #008000;\"> &lt;_sre.SRE_Match object; span=(0, 41), match=\'Hello 123 4567 World_This is a Regex Demo\'&gt;</span><span style=\"color: #008000;\">\n#</span><span style=\"color: #008000;\"> Hello 123 4567 World_This is a Regex Demo</span><span style=\"color: #008000;\">\n#</span><span style=\"color: #008000;\"> (0, 41)</span></pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<h3 id=\"泛匹配\"><span style=\"background-color: #99cc00;\"><strong>泛匹配</strong></span></h3>\n<p>像上面写的正则表达式，写的太多，非常繁琐，通用性不强。一个非常好的解决方法是：使用<strong> .*</strong> 匹配所有的字符串。</p>\n<div class=\"cnblogs_code\">\n<pre>result = re.match(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">^Hello.*Demo$</span><span style=\"color: #800000;\">\"</span>, content)</pre>\n</div>\n<h3><span style=\"background-color: #99cc00;\"><strong>获取匹配目标</strong></span></h3>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> re\n\ncontent </span>= <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Hello 1234567 World_This is a Regex Demo</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">\nresult </span>= re.match(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">^Hello\\s(\\d+)\\s.*Demo$</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, content)\n</span><span style=\"color: #0000ff;\">print</span>(result.group(1))  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 1234567</span></pre>\n</div>\n<h3><span style=\"background-color: #99cc00;\"><strong>贪婪匹配</strong></span></h3>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> re\n\ncontent </span>= <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Hello 1234567 World_This is a Regex Demo</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">\nresult </span>= re.match(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">^He.*(\\d+).*Demo$</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, content)\n</span><span style=\"color: #0000ff;\">print</span>(result.group(1))  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 7</span></pre>\n</div>\n<p>可以看到 \\d+ 只匹配到7，前面的123456被 .* 匹配掉了，也就是 .* 会尽可能匹配更多的字符，但是后面有 \\d+，所以这个只能匹配到7。</p>\n<h3><span style=\"background-color: #99cc00;\"><strong>非贪婪模式</strong></span></h3>\n<p>在 .* 后面加个?即可变成非贪婪匹配。</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> re\n\ncontent </span>= <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Hello 1234567 World_This is a Regex Demo</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">\nresult </span>= re.match(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">^He.*?(\\d+).*Demo$</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, content)\n</span><span style=\"color: #0000ff;\">print</span>(result.group(1))  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 1234567</span></pre>\n</div>\n<p><strong>几个常用的非贪婪匹配：</strong></p>\n<div class=\"cnblogs_code\">\n<pre>??    <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 匹配 0次 或 1次，但尽可能少重复</span>\n*?    <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 匹配 任意次，但尽可能少重复</span>\n+?    <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 匹配 1次 或 更多次，但尽可能少重复</span></pre>\n</div>\n<p><strong><span style=\"background-color: #ff99cc;\">.*?</span> 的用法：</strong>取尽量少的任意字符；但一般不会这么单独写，它大多用法为<strong>.*?x</strong>表示取前面任意长度的字符，直到一个x出现。</p>\n<h3 id=\"匹配模式\"><span style=\"background-color: #99cc00;\"><strong>匹配模式</strong></span></h3>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> re\n\ncontent </span>= <span style=\"color: #800000;\">\"\"\"</span><span style=\"color: #800000;\">Hello 1234567 World_This \nis a Regex Demo</span><span style=\"color: #800000;\">\"\"\"</span><span style=\"color: #000000;\">\nresult </span>= re.match(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">^He.*?(\\d+).*?Demo$</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, content)\n</span><span style=\"color: #0000ff;\">print</span>(result)  <span style=\"color: #008000;\"># None</span></pre>\n</div>\n<p>可以看到没有匹配到内容，这是因为<strong> . </strong>不能匹配到换行符，这时就需要指定匹配模式，使用<strong>re.S</strong>，代表<strong> .</strong> 能匹配换行符了。</p>\n<div class=\"cnblogs_code\">\n<pre>result = re.match(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">^He.*?(\\d+).*?Demo$</span><span style=\"color: #800000;\">\"</span>, content, re.S)</pre>\n</div>\n<h3><span style=\"background-color: #99cc00;\">转义</span></h3>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> re\n\ncontent </span>= <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">price is $5.00</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">\nresult </span>= re.match(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">price is $5.00</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, content)\n</span><span style=\"color: #0000ff;\">print</span>(result)  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> None</span></pre>\n</div>\n<p>使用 \\ 转义字符。</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> re\n\ncontent </span>= <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">price is $5.00</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">\nresult </span>= re.match(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">price is \\$5\\.00</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, content)\n</span><span style=\"color: #0000ff;\">print</span>(result.group())  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> price is $5.00</span></pre>\n</div>\n<p><span style=\"background-color: #ff9900;\"><strong>总结：</strong></span><span style=\"background-color: #ff99cc;\"><strong>尽量使用泛匹配、使用括号得到匹配目标、尽量使用非贪婪模式、有换行符就用re.S</strong></span></p>\n<h2><span style=\"background-color: #00ccff;\">三、re.search</span></h2>\n<p>使用re.match有不太方便的，因为它会从字符串开头开始匹配，如果没匹配到，就返回None了；而 re.search 会扫描整个字符串并返回第一个成功的匹配。</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> re\n\ncontent </span>= <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Extra stings Hello 1234567 World_This is a Regex Demo Extra stings</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">\nresult1 </span>= re.match(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Hello.*?(\\d+).*?Demo</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, content)\n</span><span style=\"color: #0000ff;\">print</span>(result1)  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> None</span>\n<span style=\"color: #000000;\">\nresult2 </span>= re.search(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Hello.*?(\\d+).*?Demo</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, content)\n</span><span style=\"color: #0000ff;\">print</span>(result2)  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> &lt;_sre.SRE_Match object; span=(13, 53), match=\'Hello 1234567 World_This is a Regex Demo\'&gt;</span>\n<span style=\"color: #0000ff;\">print</span>(result2.group(1))  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 1234567</span></pre>\n</div>\n<p><strong><span style=\"background-color: #ff9900;\">总结：</span><span style=\"background-color: #ff99cc;\">为匹配方便，能用search就不用match</span></strong></p>\n<h3 id=\"匹配演练\"><span style=\"background-color: #99cc00;\">匹配练习</span></h3>\n<p><strong>测试字符串：</strong></p>\n<div class=\"cnblogs_code\">\n<pre>html = \'\'\'<span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">div </span><span style=\"color: #ff0000;\">id</span><span style=\"color: #0000ff;\">=\"songs-list\"</span><span style=\"color: #0000ff;\">&gt;</span>\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">h2 </span><span style=\"color: #ff0000;\">class</span><span style=\"color: #0000ff;\">=\"title\"</span><span style=\"color: #0000ff;\">&gt;</span>经典老歌<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">h2</span><span style=\"color: #0000ff;\">&gt;</span>\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">p </span><span style=\"color: #ff0000;\">class</span><span style=\"color: #0000ff;\">=\"introduction\"</span><span style=\"color: #0000ff;\">&gt;</span><span style=\"color: #000000;\">\n        经典老歌列表\n    </span><span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">p</span><span style=\"color: #0000ff;\">&gt;</span>\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">ul </span><span style=\"color: #ff0000;\">id</span><span style=\"color: #0000ff;\">=\"list\"</span><span style=\"color: #ff0000;\"> class</span><span style=\"color: #0000ff;\">=\"list-group\"</span><span style=\"color: #0000ff;\">&gt;</span>\n        <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">li </span><span style=\"color: #ff0000;\">data-view</span><span style=\"color: #0000ff;\">=\"2\"</span><span style=\"color: #0000ff;\">&gt;</span>一路上有你<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">li</span><span style=\"color: #0000ff;\">&gt;</span>\n        <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">li </span><span style=\"color: #ff0000;\">data-view</span><span style=\"color: #0000ff;\">=\"7\"</span><span style=\"color: #0000ff;\">&gt;</span>\n            <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">a </span><span style=\"color: #ff0000;\">href</span><span style=\"color: #0000ff;\">=\"/2.mp3\"</span><span style=\"color: #ff0000;\"> singer</span><span style=\"color: #0000ff;\">=\"任贤齐\"</span><span style=\"color: #0000ff;\">&gt;</span>沧海一声笑<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">a</span><span style=\"color: #0000ff;\">&gt;</span>\n        <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">li</span><span style=\"color: #0000ff;\">&gt;</span>\n        <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">li </span><span style=\"color: #ff0000;\">data-view</span><span style=\"color: #0000ff;\">=\"4\"</span><span style=\"color: #ff0000;\"> class</span><span style=\"color: #0000ff;\">=\"active\"</span><span style=\"color: #0000ff;\">&gt;</span>\n            <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">a </span><span style=\"color: #ff0000;\">href</span><span style=\"color: #0000ff;\">=\"/3.mp3\"</span><span style=\"color: #ff0000;\"> singer</span><span style=\"color: #0000ff;\">=\"齐秦\"</span><span style=\"color: #0000ff;\">&gt;</span>往事随风<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">a</span><span style=\"color: #0000ff;\">&gt;</span>\n        <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">li</span><span style=\"color: #0000ff;\">&gt;</span>\n        <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">li </span><span style=\"color: #ff0000;\">data-view</span><span style=\"color: #0000ff;\">=\"6\"</span><span style=\"color: #0000ff;\">&gt;&lt;</span><span style=\"color: #800000;\">a </span><span style=\"color: #ff0000;\">href</span><span style=\"color: #0000ff;\">=\"/4.mp3\"</span><span style=\"color: #ff0000;\"> singer</span><span style=\"color: #0000ff;\">=\"beyond\"</span><span style=\"color: #0000ff;\">&gt;</span>光辉岁月<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">a</span><span style=\"color: #0000ff;\">&gt;&lt;/</span><span style=\"color: #800000;\">li</span><span style=\"color: #0000ff;\">&gt;</span>\n        <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">li </span><span style=\"color: #ff0000;\">data-view</span><span style=\"color: #0000ff;\">=\"5\"</span><span style=\"color: #0000ff;\">&gt;&lt;</span><span style=\"color: #800000;\">a </span><span style=\"color: #ff0000;\">href</span><span style=\"color: #0000ff;\">=\"/5.mp3\"</span><span style=\"color: #ff0000;\"> singer</span><span style=\"color: #0000ff;\">=\"陈慧琳\"</span><span style=\"color: #0000ff;\">&gt;</span>记事本<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">a</span><span style=\"color: #0000ff;\">&gt;&lt;/</span><span style=\"color: #800000;\">li</span><span style=\"color: #0000ff;\">&gt;</span>\n        <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">li </span><span style=\"color: #ff0000;\">data-view</span><span style=\"color: #0000ff;\">=\"5\"</span><span style=\"color: #0000ff;\">&gt;</span>\n            <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">a </span><span style=\"color: #ff0000;\">href</span><span style=\"color: #0000ff;\">=\"/6.mp3\"</span><span style=\"color: #ff0000;\"> singer</span><span style=\"color: #0000ff;\">=\"邓丽君\"</span><span style=\"color: #0000ff;\">&gt;&lt;</span><span style=\"color: #800000;\">i </span><span style=\"color: #ff0000;\">class</span><span style=\"color: #0000ff;\">=\"fa fa-user\"</span><span style=\"color: #0000ff;\">&gt;&lt;/</span><span style=\"color: #800000;\">i</span><span style=\"color: #0000ff;\">&gt;</span>但愿人长久<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">a</span><span style=\"color: #0000ff;\">&gt;</span>\n        <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">li</span><span style=\"color: #0000ff;\">&gt;</span>\n    <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">ul</span><span style=\"color: #0000ff;\">&gt;</span>\n<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">div</span><span style=\"color: #0000ff;\">&gt;</span>\'\'\'</pre>\n</div>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 匹配带有active类的li标签</span>\nresult = re.search(<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">&lt;li.*?active.*?singer=\"(.*?)\"&gt;(.*?)&lt;/a&gt;</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">, html, re.S)\n</span><span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> result:\n    </span><span style=\"color: #0000ff;\">print</span>(result.group(1), result.group(2))  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 齐秦 往事随风</span></pre>\n</div>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 匹配li标签（只要匹配成功就返回）</span>\nresult = re.search(<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">&lt;li.*?singer=\"(.*?)\"&gt;(.*?)&lt;/a&gt;</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">, html, re.S)\n</span><span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> result:\n    </span><span style=\"color: #0000ff;\">print</span>(result.group(1), result.group(2))  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 任贤齐 沧海一声笑</span></pre>\n</div>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 匹配li标签（将re.S去掉）</span>\nresult = re.search(<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">&lt;li.*?singer=\"(.*?)\"&gt;(.*?)&lt;/a&gt;</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">, html)\n</span><span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> result:\n    </span><span style=\"color: #0000ff;\">print</span>(result.group(1), result.group(2))  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> beyond 光辉岁月</span></pre>\n</div>\n<h2><span style=\"background-color: #00ccff;\">四、re.findall</span></h2>\n<p>返回所有满足匹配条件的结果，放在列表里。</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'647e43dc-51ea-42c0-b734-b3f46222ba43\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_647e43dc-51ea-42c0-b734-b3f46222ba43\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_647e43dc-51ea-42c0-b734-b3f46222ba43\" onclick=\"cnblogs_code_hide(\'647e43dc-51ea-42c0-b734-b3f46222ba43\',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_647e43dc-51ea-42c0-b734-b3f46222ba43\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> re\n\nhtml </span>= <span style=\"color: #800000;\">\'\'\'</span><span style=\"color: #800000;\">&lt;div id=\"songs-list\"&gt;\n    &lt;h2 class=\"title\"&gt;经典老歌&lt;/h2&gt;\n    &lt;p class=\"introduction\"&gt;\n        经典老歌列表\n    &lt;/p&gt;\n    &lt;ul id=\"list\" class=\"list-group\"&gt;\n        &lt;li data-view=\"2\"&gt;一路上有你&lt;/li&gt;\n        &lt;li data-view=\"7\"&gt;\n            &lt;a href=\"/2.mp3\" singer=\"任贤齐\"&gt;沧海一声笑&lt;/a&gt;\n        &lt;/li&gt;\n        &lt;li data-view=\"4\" class=\"active\"&gt;\n            &lt;a href=\"/3.mp3\" singer=\"齐秦\"&gt;往事随风&lt;/a&gt;\n        &lt;/li&gt;\n        &lt;li data-view=\"6\"&gt;&lt;a href=\"/4.mp3\" singer=\"beyond\"&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;\n        &lt;li data-view=\"5\"&gt;&lt;a href=\"/5.mp3\" singer=\"陈慧琳\"&gt;记事本&lt;/a&gt;&lt;/li&gt;\n        &lt;li data-view=\"5\"&gt;\n            &lt;a href=\"/6.mp3\" singer=\"邓丽君\"&gt;但愿人长久&lt;/a&gt;\n        &lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/div&gt;</span><span style=\"color: #800000;\">\'\'\'</span><span style=\"color: #000000;\">\n\nresult </span>= re.findall(<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">&lt;li.*?href=\"(.*?)\".*?singer=\"(.*?)\"&gt;(.*?)&lt;/a&gt;</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">, html, re.S)\n</span><span style=\"color: #0000ff;\">for</span> item <span style=\"color: #0000ff;\">in</span><span style=\"color: #000000;\"> result:\n    </span><span style=\"color: #0000ff;\">print</span><span style=\"color: #000000;\">(item)\n\n</span><span style=\"color: #800000;\">\"\"\"</span><span style=\"color: #800000;\">\n(\'/2.mp3\', \'任贤齐\', \'沧海一声笑\')\n(\'/3.mp3\', \'齐秦\', \'往事随风\')\n(\'/4.mp3\', \'beyond\', \'光辉岁月\')\n(\'/5.mp3\', \'陈慧琳\', \'记事本\')\n(\'/6.mp3\', \'邓丽君\', \'但愿人长久\')\n</span><span style=\"color: #800000;\">\"\"\"</span></pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>上面的例子可以看到并没有匹配到第一个li，这是因为li标签并没有包含a标签，不符合匹配规则。如果我们也想把这个内容也获取到，怎么做呢？</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'27772ae8-8531-410a-b3ea-de6a7d5da2aa\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_27772ae8-8531-410a-b3ea-de6a7d5da2aa\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_27772ae8-8531-410a-b3ea-de6a7d5da2aa\" onclick=\"cnblogs_code_hide(\'27772ae8-8531-410a-b3ea-de6a7d5da2aa\',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_27772ae8-8531-410a-b3ea-de6a7d5da2aa\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> re\n\nhtml </span>= <span style=\"color: #800000;\">\'\'\'</span><span style=\"color: #800000;\">&lt;div id=\"songs-list\"&gt;\n    &lt;h2 class=\"title\"&gt;经典老歌&lt;/h2&gt;\n    &lt;p class=\"introduction\"&gt;\n        经典老歌列表\n    &lt;/p&gt;\n    &lt;ul id=\"list\" class=\"list-group\"&gt;\n        &lt;li data-view=\"2\"&gt;一路上有你&lt;/li&gt;\n        &lt;li data-view=\"7\"&gt;\n            &lt;a href=\"/2.mp3\" singer=\"任贤齐\"&gt;沧海一声笑&lt;/a&gt;\n        &lt;/li&gt;\n        &lt;li data-view=\"4\" class=\"active\"&gt;\n            &lt;a href=\"/3.mp3\" singer=\"齐秦\"&gt;往事随风&lt;/a&gt;\n        &lt;/li&gt;\n        &lt;li data-view=\"6\"&gt;&lt;a href=\"/4.mp3\" singer=\"beyond\"&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;\n        &lt;li data-view=\"5\"&gt;&lt;a href=\"/5.mp3\" singer=\"陈慧琳\"&gt;记事本&lt;/a&gt;&lt;/li&gt;\n        &lt;li data-view=\"5\"&gt;\n            &lt;a href=\"/6.mp3\" singer=\"邓丽君\"&gt;但愿人长久&lt;/a&gt;\n        &lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/div&gt;</span><span style=\"color: #800000;\">\'\'\'</span><span style=\"color: #000000;\">\n\nresult </span>= re.findall(<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">&lt;li.*?&gt;\\s*?(&lt;a.*?&gt;)?(\\w+)(&lt;/a&gt;)?\\s*?&lt;/li&gt;</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">, html)\n</span><span style=\"color: #0000ff;\">for</span> item <span style=\"color: #0000ff;\">in</span><span style=\"color: #000000;\"> result:\n    </span><span style=\"color: #0000ff;\">print</span><span style=\"color: #000000;\">(item)\n    </span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> print(item[1])</span>\n<span style=\"color: #800000;\">\"\"\"</span><span style=\"color: #800000;\">\n(\'\', \'一路上有你\', \'\')\n(\'&lt;a href=\"/2.mp3\" singer=\"任贤齐\"&gt;\', \'沧海一声笑\', \'&lt;/a&gt;\')\n(\'&lt;a href=\"/3.mp3\" singer=\"齐秦\"&gt;\', \'往事随风\', \'&lt;/a&gt;\')\n(\'&lt;a href=\"/4.mp3\" singer=\"beyond\"&gt;\', \'光辉岁月\', \'&lt;/a&gt;\')\n(\'&lt;a href=\"/5.mp3\" singer=\"陈慧琳\"&gt;\', \'记事本\', \'&lt;/a&gt;\')\n(\'&lt;a href=\"/6.mp3\" singer=\"邓丽君\"&gt;\', \'但愿人长久\', \'&lt;/a&gt;\')\n</span><span style=\"color: #800000;\">\"\"\"</span></pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<h2><span style=\"background-color: #00ccff;\">五、re.sub</span></h2>\n<p>替换字符串中每一个匹配的子串后返回替换后的字符串。</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> re\n\ncontent </span>= <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Hello 1234567 World</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">\n\nresult1 </span>= re.sub(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">\\d</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">v</span><span style=\"color: #800000;\">\"</span>, content, 3)  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 将数字替换成 v ,参数3表示替换3个</span>\n<span style=\"color: #0000ff;\">print</span>(result1)  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> Hello vvv4567 World</span>\n<span style=\"color: #000000;\">\nresult2 </span>= re.sub(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">\\d</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">v</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, content)\n</span><span style=\"color: #0000ff;\">print</span>(result2)  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> Hello vvvvvvv World</span>\n<span style=\"color: #000000;\">\nresult3 </span>= re.sub(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">\\d+</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">v</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, content)\n</span><span style=\"color: #0000ff;\">print</span>(result3)  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> Hello v World</span>\n<span style=\"color: #000000;\">\nresult4 </span>= re.sub(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">\\d+</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"\"</span><span style=\"color: #000000;\">, content)\n</span><span style=\"color: #0000ff;\">print</span>(result4)  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> Hello  World</span></pre>\n</div>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> re\n\ncontent </span>= <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Hello 1234567 World</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">\nresult </span>= re.sub(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">(\\d+)</span><span style=\"color: #800000;\">\"</span>, r<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">\\1 8910</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, content)\n</span><span style=\"color: #0000ff;\">print</span>(result)  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> Hello 1234567 8910 World</span>\n<strong><span style=\"background-color: #ff99cc;\"># 使用 \\1 拿到匹配内容，即用1234567 8910 替换1234567</span></strong></pre>\n</div>\n<p>会了re.sub，对于上面re.findall的第二个例子，现在就简单多了：</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'0a4b3279-185c-44da-b0bf-79a1c427201a\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_0a4b3279-185c-44da-b0bf-79a1c427201a\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_0a4b3279-185c-44da-b0bf-79a1c427201a\" onclick=\"cnblogs_code_hide(\'0a4b3279-185c-44da-b0bf-79a1c427201a\',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_0a4b3279-185c-44da-b0bf-79a1c427201a\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> re\n\nhtml </span>= <span style=\"color: #800000;\">\'\'\'</span><span style=\"color: #800000;\">&lt;div id=\"songs-list\"&gt;\n    &lt;h2 class=\"title\"&gt;经典老歌&lt;/h2&gt;\n    &lt;p class=\"introduction\"&gt;\n        经典老歌列表\n    &lt;/p&gt;\n    &lt;ul id=\"list\" class=\"list-group\"&gt;\n        &lt;li data-view=\"2\"&gt;一路上有你&lt;/li&gt;\n        &lt;li data-view=\"7\"&gt;\n            &lt;a href=\"/2.mp3\" singer=\"任贤齐\"&gt;沧海一声笑&lt;/a&gt;\n        &lt;/li&gt;\n        &lt;li data-view=\"4\" class=\"active\"&gt;\n            &lt;a href=\"/3.mp3\" singer=\"齐秦\"&gt;往事随风&lt;/a&gt;\n        &lt;/li&gt;\n        &lt;li data-view=\"6\"&gt;&lt;a href=\"/4.mp3\" singer=\"beyond\"&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;\n        &lt;li data-view=\"5\"&gt;&lt;a href=\"/5.mp3\" singer=\"陈慧琳\"&gt;记事本&lt;/a&gt;&lt;/li&gt;\n        &lt;li data-view=\"5\"&gt;\n            &lt;a href=\"/6.mp3\" singer=\"邓丽君\"&gt;但愿人长久&lt;/a&gt;\n        &lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/div&gt;</span><span style=\"color: #800000;\">\'\'\'</span><span style=\"color: #000000;\">\nhtml </span>= re.sub(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">&lt;a.*?&gt;|&lt;/a&gt;</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"\"</span><span style=\"color: #000000;\">, html)\n</span><span style=\"color: #0000ff;\">print</span><span style=\"color: #000000;\">(html)\nresult </span>= re.findall(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">&lt;li.*?&gt;(.*?)&lt;/li&gt;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, html, re.S)\n</span><span style=\"color: #0000ff;\">print</span><span style=\"color: #000000;\">(result)\n</span><span style=\"color: #0000ff;\">for</span> item <span style=\"color: #0000ff;\">in</span><span style=\"color: #000000;\"> result:\n    </span><span style=\"color: #0000ff;\">print</span>(item.strip())</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<h2><span style=\"background-color: #00ccff;\">六、re.compile</span></h2>\n<p>将正则字符串编译成正则表达式对象，以便于复用该匹配模式。</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> re\n\ncontent </span>= <span style=\"color: #800000;\">\'\'\'</span><span style=\"color: #800000;\">Hello 1234567 World_This\nis a Regex Demo</span><span style=\"color: #800000;\">\'\'\'</span>\n<span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 方式1</span>\npattern = re.compile(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Hello.*Demo</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, re.S)\nresult1 </span>=<span style=\"color: #000000;\"> re.match(pattern, content)\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 方式2</span>\nresult2 = re.match(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Hello.*Demo</span><span style=\"color: #800000;\">\"</span>, content, re.S)</pre>\n</div>\n<h2><span style=\"background-color: #00ccff;\">七、实战</span></h2>\n<p> </p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> re\n</span><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> requests\n\nhtml </span>= requests.get(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">https://movie.douban.com/chart</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">).text\npattern </span>= re.compile(<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">&lt;table.*?nbg.*?href=\"(.*?)\".*?title=\"(.*?)\".*?rating_nums\"&gt;(.*?)&lt;/span&gt;.*?&lt;/table&gt;</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">, re.S)\nresult </span>=<span style=\"color: #000000;\"> re.findall(pattern, html)\n</span><span style=\"color: #0000ff;\">for</span> item <span style=\"color: #0000ff;\">in</span><span style=\"color: #000000;\"> result:\n    url, title, rating_nums </span>=<span style=\"color: #000000;\"> item\n    </span><span style=\"color: #0000ff;\">print</span>(url, title, rating_nums)</pre>\n</div>\n<div class=\"cnblogs_Highlighter\">\n<pre class=\"brush:python;gutter:true;\">https://movie.douban.com/subject/25986662/ 疯狂的外星人 　　　　　　 6.4\nhttps://movie.douban.com/subject/3878007/  海王 　　　　　　　　　　 7.7\nhttps://movie.douban.com/subject/27597250/ 极限职业 　　　　　　　　 7.7\nhttps://movie.douban.com/subject/26816076/ “大”人物 　　　　　　　　 6.5\nhttps://movie.douban.com/subject/30209818/ 忌日快乐2 　　　　　　　　6.7\nhttps://movie.douban.com/subject/20438964/ 无敌破坏王2：大闹互联网 　8.1\nhttps://movie.douban.com/subject/26147417/ 神奇动物：格林德沃之罪 　 7.1\nhttps://movie.douban.com/subject/27119586/ 谁先爱上他的 　　　　　　 8.6\nhttps://movie.douban.com/subject/27065898/ 神探蒲松龄   　　　　　　 3.8\nhttps://movie.douban.com/subject/30170448/ 何以为家 　　　　　　    8.8\n</pre>\n</div>\n<p> </p>', 8);
INSERT INTO `blog_articledetail` VALUES (9, '<h2><span style=\"background-color: #00ccff;\">collections模块</span></h2>\n<p>在内置数据类型（dict、list、set、tuple）的基础上，<span data-slate-fragment=\"JTdCJTIyZGF0YSUyMiUzQSU3QiU3RCUyQyUyMmtpbmQlMjIlM0ElMjJkb2N1bWVudCUyMiUyQyUyMm5vZGVzJTIyJTNBJTVCJTdCJTIyZGF0YSUyMiUzQSU3QiU3RCUyQyUyMmtpbmQlMjIlM0ElMjJibG9jayUyMiUyQyUyMmlzVm9pZCUyMiUzQWZhbHNlJTJDJTIydHlwZSUyMiUzQSUyMnBhcmFncmFwaCUyMiUyQyUyMm5vZGVzJTIyJTNBJTVCJTdCJTIya2luZCUyMiUzQSUyMnRleHQlMjIlMkMlMjJyYW5nZXMlMjIlM0ElNUIlN0IlMjJraW5kJTIyJTNBJTIycmFuZ2UlMjIlMkMlMjJ0ZXh0JTIyJTNBJTIyY29sbGVjdGlvbnMlRTYlQTglQTElRTUlOUQlOTclRTUlOUMlQTglRTUlODYlODUlRTclQkQlQUUlRTYlOTUlQjAlRTYlOEQlQUUlRTclQjElQkIlRTUlOUUlOEIlRUYlQkMlODhkaWN0JUUzJTgwJTgxbGlzdCVFMyU4MCU4MXNldCVFMyU4MCU4MXR1cGxlJUVGJUJDJTg5JUU3JTlBJTg0JUU1JTlGJUJBJUU3JUExJTgwJUU0JUI4JThBJUVGJUJDJThDJUU4JUJGJTk4JUU2JThGJTkwJUU0JUJFJTlCJUU0JUJBJTg2JUU1JTg3JUEwJUU0JUI4JUFBJUU5JUEyJTlEJUU1JUE0JTk2JUU3JTlBJTg0JUU2JTk1JUIwJUU2JThEJUFFJUU3JUIxJUJCJUU1JTlFJThCJUVGJUJDJTlBQ2hhaW5NYXAlRTMlODAlODFDb3VudGVyJUUzJTgwJTgxZGVxdWUlRTMlODAlODFkZWZhdWx0ZGljdCVFMyU4MCU4MW5hbWVkdHVwbGUlRTUlOTIlOENPcmRlcmVkRGljdCVFNyVBRCU4OSVFMyU4MCU4MiUyMiUyQyUyMm1hcmtzJTIyJTNBJTVCJTVEJTdEJTVEJTdEJTVEJTdEJTJDJTdCJTIyZGF0YSUyMiUzQSU3QiU3RCUyQyUyMmtpbmQlMjIlM0ElMjJibG9jayUyMiUyQyUyMmlzVm9pZCUyMiUzQWZhbHNlJTJDJTIydHlwZSUyMiUzQSUyMnBhcmFncmFwaCUyMiUyQyUyMm5vZGVzJTIyJTNBJTVCJTdCJTIya2luZCUyMiUzQSUyMnRleHQlMjIlMkMlMjJyYW5nZXMlMjIlM0ElNUIlN0IlMjJraW5kJTIyJTNBJTIycmFuZ2UlMjIlMkMlMjJ0ZXh0JTIyJTNBJTIyMS5uYW1lZHR1cGxlJTNBJTIwJUU3JTk0JTlGJUU2JTg4JTkwJUU1JThGJUFGJUU0JUJCJUE1JUU0JUJEJUJGJUU3JTk0JUE4JUU1JTkwJThEJUU1JUFEJTk3JUU2JTlEJUE1JUU4JUFFJUJGJUU5JTk3JUFFJUU1JTg1JTgzJUU3JUI0JUEwJUU1JTg2JTg1JUU1JUFFJUI5JUU3JTlBJTg0dHVwbGUlRTUlQUQlOTAlRTclQjElQkIlNUNuMi5kZXF1ZSUzQSUyMCVFNSU4RiU4QyVFNyVBQiVBRiVFOSU5OCU5RiVFNSU4OCU5NyVFRiVCQyU4QyVFNSU4RiVBRiVFNCVCQiVBNSVFNSVCRiVBQiVFOSU4MCU5RiVFNyU5QSU4NCVFNCVCQiU4RSVFNSU4RiVBNiVFNSVBNCU5NiVFNCVCOCU4MCVFNCVCRSVBNyVFOCVCRiVCRCVFNSU4QSVBMCVFNSU5MiU4QyVFNiU4RSVBOCVFNSU4NyVCQSVFNSVBRiVCOSVFOCVCMSVBMSU1Q24zLkNvdW50ZXIlM0ElMjAlRTglQUUlQTElRTYlOTUlQjAlRTUlOTklQTglRUYlQkMlOEMlRTQlQjglQkIlRTglQTYlODElRTclOTQlQTglRTYlOUQlQTUlRTglQUUlQTElRTYlOTUlQjAlNUNuNC5PcmRlcmVkRGljdCUzQSUyMCVFNiU5QyU4OSVFNSVCQSU4RiVFNSVBRCU5NyVFNSU4NSVCOCU1Q241LmRlZmF1bHRkaWN0JTNBJTIwJUU1JUI4JUE2JUU2JTlDJTg5JUU5JUJCJTk4JUU4JUFFJUE0JUU1JTgwJUJDJUU3JTlBJTg0JUU1JUFEJTk3JUU1JTg1JUI4JTIyJTJDJTIybWFya3MlMjIlM0ElNUIlNUQlN0QlNUQlN0QlNUQlN0QlNUQlN0Q=\">collections模块还提供了几个额外的数据类型：Counter、deque、defaultdict、namedtuple和OrderedDict等。</span></p>\n<ul>\n<li data-key=\"294\"><span data-key=\"285\">namedtuple：生成可以使用名字来访问元素内容的tuple</span></li>\n<li data-key=\"294\"><span data-key=\"285\">deque：双端队列，可以快速的从另外一侧追加和推出<span style=\"font-size: 14px;\">对象</span></span></li>\n<li data-key=\"294\"><span data-key=\"285\">Counter：计数器，主要用来计数</span></li>\n<li data-key=\"294\"><span data-key=\"285\">Ordered<span style=\"font-size: 14px;\">D</span>ict：有序字典</span></li>\n<li data-key=\"294\"><span data-key=\"285\">defaultdict：带有默认值的字典</span></li>\n</ul>\n<p data-key=\"294\"><span style=\"font-size: 16px;\"><strong><span data-key=\"285\">namedtuple</span></strong></span></p>\n<p data-key=\"294\"><span style=\"font-size: 14px;\"><span data-key=\"285\">我<span data-offset-key=\"297-0\">们知道<span data-offset-key=\"297-1\"><code>tuple</code><span data-offset-key=\"297-2\">可以表示不变集合，例如，一个点的二维坐标就可以表示成：</span></span></span></span></span></p>\n<div class=\"cnblogs_code\">\n<pre>p = (1, 2)</pre>\n</div>\n<p><span data-slate-fragment=\"JTdCJTIyZGF0YSUyMiUzQSU3QiU3RCUyQyUyMmtpbmQlMjIlM0ElMjJkb2N1bWVudCUyMiUyQyUyMm5vZGVzJTIyJTNBJTVCJTdCJTIyZGF0YSUyMiUzQSU3QiU3RCUyQyUyMmtpbmQlMjIlM0ElMjJibG9jayUyMiUyQyUyMmlzVm9pZCUyMiUzQWZhbHNlJTJDJTIydHlwZSUyMiUzQSUyMnBhcmFncmFwaCUyMiUyQyUyMm5vZGVzJTIyJTNBJTVCJTdCJTIya2luZCUyMiUzQSUyMnRleHQlMjIlMkMlMjJyYW5nZXMlMjIlM0ElNUIlN0IlMjJraW5kJTIyJTNBJTIycmFuZ2UlMjIlMkMlMjJ0ZXh0JTIyJTNBJTIyJUU0JUJEJTg2JUU2JTk4JUFGJUVGJUJDJThDJUU3JTlDJThCJUU1JTg4JUIwJTIyJTJDJTIybWFya3MlMjIlM0ElNUIlNUQlN0QlMkMlN0IlMjJraW5kJTIyJTNBJTIycmFuZ2UlMjIlMkMlMjJ0ZXh0JTIyJTNBJTIyKDElMkMlMjAyKSUyMiUyQyUyMm1hcmtzJTIyJTNBJTVCJTdCJTIyZGF0YSUyMiUzQSU3QiU3RCUyQyUyMmtpbmQlMjIlM0ElMjJtYXJrJTIyJTJDJTIydHlwZSUyMiUzQSUyMkNPREUlMjIlN0QlNUQlN0QlMkMlN0IlMjJraW5kJTIyJTNBJTIycmFuZ2UlMjIlMkMlMjJ0ZXh0JTIyJTNBJTIyJUVGJUJDJThDJUU1JUJFJTg4JUU5JTlBJUJFJUU3JTlDJThCJUU1JTg3JUJBJUU4JUJGJTk5JUU0JUI4JUFBJTIyJTJDJTIybWFya3MlMjIlM0ElNUIlNUQlN0QlMkMlN0IlMjJraW5kJTIyJTNBJTIycmFuZ2UlMjIlMkMlMjJ0ZXh0JTIyJTNBJTIydHVwbGUlMjIlMkMlMjJtYXJrcyUyMiUzQSU1QiU3QiUyMmRhdGElMjIlM0ElN0IlN0QlMkMlMjJraW5kJTIyJTNBJTIybWFyayUyMiUyQyUyMnR5cGUlMjIlM0ElMjJDT0RFJTIyJTdEJTVEJTdEJTJDJTdCJTIya2luZCUyMiUzQSUyMnJhbmdlJTIyJTJDJTIydGV4dCUyMiUzQSUyMiVFNiU5OCVBRiVFNyU5NCVBOCVFNiU5RCVBNSVFOCVBMSVBOCVFNyVBNCVCQSVFNCVCOCU4MCVFNCVCOCVBQSVFNSU5RCU5MCVFNiVBMCU4NyVFNyU5QSU4NCVFMyU4MCU4MiUyMiUyQyUyMm1hcmtzJTIyJTNBJTVCJTVEJTdEJTVEJTdEJTVEJTdEJTJDJTdCJTIyZGF0YSUyMiUzQSU3QiU3RCUyQyUyMmtpbmQlMjIlM0ElMjJibG9jayUyMiUyQyUyMmlzVm9pZCUyMiUzQWZhbHNlJTJDJTIydHlwZSUyMiUzQSUyMnBhcmFncmFwaCUyMiUyQyUyMm5vZGVzJTIyJTNBJTVCJTdCJTIya2luZCUyMiUzQSUyMnRleHQlMjIlMkMlMjJyYW5nZXMlMjIlM0ElNUIlN0IlMjJraW5kJTIyJTNBJTIycmFuZ2UlMjIlMkMlMjJ0ZXh0JTIyJTNBJTIyJUU1JUFFJTlBJUU0JUI5JTg5JUU0JUI4JTgwJUU0JUI4JUFBY2xhc3MlRTUlOEYlODglRTUlQjAlOEYlRTklQTIlOTglRTUlQTQlQTclRTUlODElOUElRTQlQkElODYlRUYlQkMlOEMlRTglQkYlOTklRTYlOTclQjYlRUYlQkMlOEMlMjIlMkMlMjJtYXJrcyUyMiUzQSU1QiU1RCU3RCUyQyU3QiUyMmtpbmQlMjIlM0ElMjJyYW5nZSUyMiUyQyUyMnRleHQlMjIlM0ElMjJuYW1lZHR1cGxlJTIyJTJDJTIybWFya3MlMjIlM0ElNUIlN0IlMjJkYXRhJTIyJTNBJTdCJTdEJTJDJTIya2luZCUyMiUzQSUyMm1hcmslMjIlMkMlMjJ0eXBlJTIyJTNBJTIyQ09ERSUyMiU3RCU1RCU3RCUyQyU3QiUyMmtpbmQlMjIlM0ElMjJyYW5nZSUyMiUyQyUyMnRleHQlMjIlM0ElMjIlRTUlQjAlQjElRTYlQjQlQkUlRTQlQjglOEElRTQlQkElODYlRTclOTQlQTglRTUlOUMlQkElRUYlQkMlOUElMjIlMkMlMjJtYXJrcyUyMiUzQSU1QiU1RCU3RCU1RCU3RCU1RCU3RCU1RCU3RA==\">但是，看到(1, 2)，很难看出这个tuple是用来表示一个坐标的。</span></p>\n<p data-key=\"313\"><span data-key=\"310\"><span data-offset-key=\"310-0\">这时，<span data-offset-key=\"310-1\"><span style=\"font-size: 14px;\"><code>namedtuple</code></span><span data-offset-key=\"310-2\">就派上了用场：</span></span></span></span></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">from</span> collections <span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> namedtuple\n\nPoint </span>= namedtuple(<span style=\"color: #800000;\">\"P</span><span style=\"color: #800000;\">oint</span><span style=\"color: #800000;\">\"</span>, [<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">x</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">y</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">])\np </span>= Point(1, 2<span style=\"color: #000000;\">)\n</span><span style=\"color: #0000ff;\">print</span>(p.x)  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 1</span>\n<span style=\"color: #0000ff;\">print</span>(p.y)  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 2</span></pre>\n</div>\n<p>类<span data-offset-key=\"357-0\">似的，如果要用坐标和半径表示一个圆，也可以用<span data-offset-key=\"357-1\"><code>namedtuple</code><span data-offset-key=\"357-2\">定义：</span></span></span></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\">namedtuple(\'名称\', [属性list]):</span>\nCircle = namedtuple(<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">Circle</span><span style=\"color: #800000;\">\'</span>, [<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">x</span><span style=\"color: #800000;\">\'</span>, <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">y</span><span style=\"color: #800000;\">\'</span>, <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">r</span><span style=\"color: #800000;\">\'</span>])</pre>\n</div>\n<p data-key=\"294\"><span style=\"font-size: 16px;\"><strong><span data-key=\"285\">queue：队列</span></strong></span></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\">put()放值、get()取值</span>\n<span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> queue<br/>\nq </span>=<span style=\"color: #000000;\"> queue.Queue()\nq.put([</span>1,2,3<span style=\"color: #000000;\">])\nq.put(</span>5<span style=\"color: #000000;\">)\nq.put(</span>6<span style=\"color: #000000;\">)\n</span><span style=\"color: #0000ff;\">print</span>(q.get())  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\">[1, 2, 3]</span>\n<span style=\"color: #0000ff;\">print</span>(q.get())  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\">5</span>\n<span style=\"color: #0000ff;\">print</span>(q.get())  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\">6</span></pre>\n</div>\n<p data-key=\"294\"><span style=\"font-size: 16px;\"><strong><span data-key=\"285\">deque</span></strong></span></p>\n<p data-key=\"294\"><span style=\"font-size: 14px;\"><span data-key=\"285\"><span data-slate-fragment=\"JTdCJTIyZGF0YSUyMiUzQSU3QiU3RCUyQyUyMmtpbmQlMjIlM0ElMjJkb2N1bWVudCUyMiUyQyUyMm5vZGVzJTIyJTNBJTVCJTdCJTIyZGF0YSUyMiUzQSU3QiU3RCUyQyUyMmtpbmQlMjIlM0ElMjJibG9jayUyMiUyQyUyMmlzVm9pZCUyMiUzQWZhbHNlJTJDJTIydHlwZSUyMiUzQSUyMnBhcmFncmFwaCUyMiUyQyUyMm5vZGVzJTIyJTNBJTVCJTdCJTIya2luZCUyMiUzQSUyMnRleHQlMjIlMkMlMjJyYW5nZXMlMjIlM0ElNUIlN0IlMjJraW5kJTIyJTNBJTIycmFuZ2UlMjIlMkMlMjJ0ZXh0JTIyJTNBJTIyJUU0JUJEJUJGJUU3JTk0JUE4JTIyJTJDJTIybWFya3MlMjIlM0ElNUIlNUQlN0QlMkMlN0IlMjJraW5kJTIyJTNBJTIycmFuZ2UlMjIlMkMlMjJ0ZXh0JTIyJTNBJTIybGlzdCUyMiUyQyUyMm1hcmtzJTIyJTNBJTVCJTdCJTIyZGF0YSUyMiUzQSU3QiU3RCUyQyUyMmtpbmQlMjIlM0ElMjJtYXJrJTIyJTJDJTIydHlwZSUyMiUzQSUyMkNPREUlMjIlN0QlNUQlN0QlMkMlN0IlMjJraW5kJTIyJTNBJTIycmFuZ2UlMjIlMkMlMjJ0ZXh0JTIyJTNBJTIyJUU1JUFEJTk4JUU1JTgyJUE4JUU2JTk1JUIwJUU2JThEJUFFJUU2JTk3JUI2JUVGJUJDJThDJUU2JThDJTg5JUU3JUI0JUEyJUU1JUJDJTk1JUU4JUFFJUJGJUU5JTk3JUFFJUU1JTg1JTgzJUU3JUI0JUEwJUU1JUJFJTg4JUU1JUJGJUFCJUVGJUJDJThDJUU0JUJEJTg2JUU2JTk4JUFGJUU2JThGJTkyJUU1JTg1JUE1JUU1JTkyJThDJUU1JTg4JUEwJUU5JTk5JUE0JUU1JTg1JTgzJUU3JUI0JUEwJUU1JUIwJUIxJUU1JUJFJTg4JUU2JTg1JUEyJUU0JUJBJTg2JUVGJUJDJThDJUU1JTlCJUEwJUU0JUI4JUJBJTIyJTJDJTIybWFya3MlMjIlM0ElNUIlNUQlN0QlMkMlN0IlMjJraW5kJTIyJTNBJTIycmFuZ2UlMjIlMkMlMjJ0ZXh0JTIyJTNBJTIybGlzdCUyMiUyQyUyMm1hcmtzJTIyJTNBJTVCJTdCJTIyZGF0YSUyMiUzQSU3QiU3RCUyQyUyMmtpbmQlMjIlM0ElMjJtYXJrJTIyJTJDJTIydHlwZSUyMiUzQSUyMkNPREUlMjIlN0QlNUQlN0QlMkMlN0IlMjJraW5kJTIyJTNBJTIycmFuZ2UlMjIlMkMlMjJ0ZXh0JTIyJTNBJTIyJUU2JTk4JUFGJUU3JUJBJUJGJUU2JTgwJUE3JUU1JUFEJTk4JUU1JTgyJUE4JUVGJUJDJThDJUU2JTk1JUIwJUU2JThEJUFFJUU5JTg3JThGJUU1JUE0JUE3JUU3JTlBJTg0JUU2JTk3JUI2JUU1JTgwJTk5JUVGJUJDJThDJUU2JThGJTkyJUU1JTg1JUE1JUU1JTkyJThDJUU1JTg4JUEwJUU5JTk5JUE0JUU2JTk1JTg4JUU3JThFJTg3JUU1JUJFJTg4JUU0JUJEJThFJUUzJTgwJTgyJTIyJTJDJTIybWFya3MlMjIlM0ElNUIlNUQlN0QlNUQlN0QlNUQlN0QlMkMlN0IlMjJkYXRhJTIyJTNBJTdCJTdEJTJDJTIya2luZCUyMiUzQSUyMmJsb2NrJTIyJTJDJTIyaXNWb2lkJTIyJTNBZmFsc2UlMkMlMjJ0eXBlJTIyJTNBJTIycGFyYWdyYXBoJTIyJTJDJTIybm9kZXMlMjIlM0ElNUIlN0IlMjJraW5kJTIyJTNBJTIydGV4dCUyMiUyQyUyMnJhbmdlcyUyMiUzQSU1QiU3QiUyMmtpbmQlMjIlM0ElMjJyYW5nZSUyMiUyQyUyMnRleHQlMjIlM0ElMjJkZXF1ZSVFNiU5OCVBRiVFNCVCOCVCQSVFNCVCQSU4NiVFOSVBQiU5OCVFNiU5NSU4OCVFNSVBRSU5RSVFNyU4RSVCMCVFNiU4RiU5MiVFNSU4NSVBNSVFNSU5MiU4QyVFNSU4OCVBMCVFOSU5OSVBNCVFNiU5MyU4RCVFNCVCRCU5QyVFNyU5QSU4NCVFNSU4RiU4QyVFNSU5MCU5MSVFNSU4OCU5NyVFOCVBMSVBOCVFRiVCQyU4QyVFOSU4MCU4MiVFNSU5MCU4OCVFNyU5NCVBOCVFNCVCQSU4RSVFOSU5OCU5RiVFNSU4OCU5NyVFNSU5MiU4QyVFNiVBMCU4OCVFRiVCQyU5QSUyMiUyQyUyMm1hcmtzJTIyJTNBJTVCJTVEJTdEJTVEJTdEJTVEJTdEJTVEJTdE\">使用list存储数据时，按索引访问元素很快，但是插入和删除元素就很慢了，因为list是线性存储，数据量大的时候，插入和删除效率很低。</span></span></span></p>\n<p data-key=\"294\"><span style=\"background-color: #ff99cc;\"><span style=\"font-size: 14px;\"><span data-key=\"285\"><span data-slate-fragment=\"JTdCJTIyZGF0YSUyMiUzQSU3QiU3RCUyQyUyMmtpbmQlMjIlM0ElMjJkb2N1bWVudCUyMiUyQyUyMm5vZGVzJTIyJTNBJTVCJTdCJTIyZGF0YSUyMiUzQSU3QiU3RCUyQyUyMmtpbmQlMjIlM0ElMjJibG9jayUyMiUyQyUyMmlzVm9pZCUyMiUzQWZhbHNlJTJDJTIydHlwZSUyMiUzQSUyMnBhcmFncmFwaCUyMiUyQyUyMm5vZGVzJTIyJTNBJTVCJTdCJTIya2luZCUyMiUzQSUyMnRleHQlMjIlMkMlMjJyYW5nZXMlMjIlM0ElNUIlN0IlMjJraW5kJTIyJTNBJTIycmFuZ2UlMjIlMkMlMjJ0ZXh0JTIyJTNBJTIyJUU0JUJEJUJGJUU3JTk0JUE4JTIyJTJDJTIybWFya3MlMjIlM0ElNUIlNUQlN0QlMkMlN0IlMjJraW5kJTIyJTNBJTIycmFuZ2UlMjIlMkMlMjJ0ZXh0JTIyJTNBJTIybGlzdCUyMiUyQyUyMm1hcmtzJTIyJTNBJTVCJTdCJTIyZGF0YSUyMiUzQSU3QiU3RCUyQyUyMmtpbmQlMjIlM0ElMjJtYXJrJTIyJTJDJTIydHlwZSUyMiUzQSUyMkNPREUlMjIlN0QlNUQlN0QlMkMlN0IlMjJraW5kJTIyJTNBJTIycmFuZ2UlMjIlMkMlMjJ0ZXh0JTIyJTNBJTIyJUU1JUFEJTk4JUU1JTgyJUE4JUU2JTk1JUIwJUU2JThEJUFFJUU2JTk3JUI2JUVGJUJDJThDJUU2JThDJTg5JUU3JUI0JUEyJUU1JUJDJTk1JUU4JUFFJUJGJUU5JTk3JUFFJUU1JTg1JTgzJUU3JUI0JUEwJUU1JUJFJTg4JUU1JUJGJUFCJUVGJUJDJThDJUU0JUJEJTg2JUU2JTk4JUFGJUU2JThGJTkyJUU1JTg1JUE1JUU1JTkyJThDJUU1JTg4JUEwJUU5JTk5JUE0JUU1JTg1JTgzJUU3JUI0JUEwJUU1JUIwJUIxJUU1JUJFJTg4JUU2JTg1JUEyJUU0JUJBJTg2JUVGJUJDJThDJUU1JTlCJUEwJUU0JUI4JUJBJTIyJTJDJTIybWFya3MlMjIlM0ElNUIlNUQlN0QlMkMlN0IlMjJraW5kJTIyJTNBJTIycmFuZ2UlMjIlMkMlMjJ0ZXh0JTIyJTNBJTIybGlzdCUyMiUyQyUyMm1hcmtzJTIyJTNBJTVCJTdCJTIyZGF0YSUyMiUzQSU3QiU3RCUyQyUyMmtpbmQlMjIlM0ElMjJtYXJrJTIyJTJDJTIydHlwZSUyMiUzQSUyMkNPREUlMjIlN0QlNUQlN0QlMkMlN0IlMjJraW5kJTIyJTNBJTIycmFuZ2UlMjIlMkMlMjJ0ZXh0JTIyJTNBJTIyJUU2JTk4JUFGJUU3JUJBJUJGJUU2JTgwJUE3JUU1JUFEJTk4JUU1JTgyJUE4JUVGJUJDJThDJUU2JTk1JUIwJUU2JThEJUFFJUU5JTg3JThGJUU1JUE0JUE3JUU3JTlBJTg0JUU2JTk3JUI2JUU1JTgwJTk5JUVGJUJDJThDJUU2JThGJTkyJUU1JTg1JUE1JUU1JTkyJThDJUU1JTg4JUEwJUU5JTk5JUE0JUU2JTk1JTg4JUU3JThFJTg3JUU1JUJFJTg4JUU0JUJEJThFJUUzJTgwJTgyJTIyJTJDJTIybWFya3MlMjIlM0ElNUIlNUQlN0QlNUQlN0QlNUQlN0QlMkMlN0IlMjJkYXRhJTIyJTNBJTdCJTdEJTJDJTIya2luZCUyMiUzQSUyMmJsb2NrJTIyJTJDJTIyaXNWb2lkJTIyJTNBZmFsc2UlMkMlMjJ0eXBlJTIyJTNBJTIycGFyYWdyYXBoJTIyJTJDJTIybm9kZXMlMjIlM0ElNUIlN0IlMjJraW5kJTIyJTNBJTIydGV4dCUyMiUyQyUyMnJhbmdlcyUyMiUzQSU1QiU3QiUyMmtpbmQlMjIlM0ElMjJyYW5nZSUyMiUyQyUyMnRleHQlMjIlM0ElMjJkZXF1ZSVFNiU5OCVBRiVFNCVCOCVCQSVFNCVCQSU4NiVFOSVBQiU5OCVFNiU5NSU4OCVFNSVBRSU5RSVFNyU4RSVCMCVFNiU4RiU5MiVFNSU4NSVBNSVFNSU5MiU4QyVFNSU4OCVBMCVFOSU5OSVBNCVFNiU5MyU4RCVFNCVCRCU5QyVFNyU5QSU4NCVFNSU4RiU4QyVFNSU5MCU5MSVFNSU4OCU5NyVFOCVBMSVBOCVFRiVCQyU4QyVFOSU4MCU4MiVFNSU5MCU4OCVFNyU5NCVBOCVFNCVCQSU4RSVFOSU5OCU5RiVFNSU4OCU5NyVFNSU5MiU4QyVFNiVBMCU4OCVFRiVCQyU5QSUyMiUyQyUyMm1hcmtzJTIyJTNBJTVCJTVEJTdEJTVEJTdEJTVEJTdEJTVEJTdE\">deque是为了高效实现插入和删除操作的双向列表，适合用于队列和堆栈：</span></span></span></span></p>\n<ul>\n<li data-key=\"294\"><span data-key=\"285\"><span data-slate-fragment=\"JTdCJTIyZGF0YSUyMiUzQSU3QiU3RCUyQyUyMmtpbmQlMjIlM0ElMjJkb2N1bWVudCUyMiUyQyUyMm5vZGVzJTIyJTNBJTVCJTdCJTIyZGF0YSUyMiUzQSU3QiU3RCUyQyUyMmtpbmQlMjIlM0ElMjJibG9jayUyMiUyQyUyMmlzVm9pZCUyMiUzQWZhbHNlJTJDJTIydHlwZSUyMiUzQSUyMnBhcmFncmFwaCUyMiUyQyUyMm5vZGVzJTIyJTNBJTVCJTdCJTIya2luZCUyMiUzQSUyMnRleHQlMjIlMkMlMjJyYW5nZXMlMjIlM0ElNUIlN0IlMjJraW5kJTIyJTNBJTIycmFuZ2UlMjIlMkMlMjJ0ZXh0JTIyJTNBJTIyJUU0JUJEJUJGJUU3JTk0JUE4JTIyJTJDJTIybWFya3MlMjIlM0ElNUIlNUQlN0QlMkMlN0IlMjJraW5kJTIyJTNBJTIycmFuZ2UlMjIlMkMlMjJ0ZXh0JTIyJTNBJTIybGlzdCUyMiUyQyUyMm1hcmtzJTIyJTNBJTVCJTdCJTIyZGF0YSUyMiUzQSU3QiU3RCUyQyUyMmtpbmQlMjIlM0ElMjJtYXJrJTIyJTJDJTIydHlwZSUyMiUzQSUyMkNPREUlMjIlN0QlNUQlN0QlMkMlN0IlMjJraW5kJTIyJTNBJTIycmFuZ2UlMjIlMkMlMjJ0ZXh0JTIyJTNBJTIyJUU1JUFEJTk4JUU1JTgyJUE4JUU2JTk1JUIwJUU2JThEJUFFJUU2JTk3JUI2JUVGJUJDJThDJUU2JThDJTg5JUU3JUI0JUEyJUU1JUJDJTk1JUU4JUFFJUJGJUU5JTk3JUFFJUU1JTg1JTgzJUU3JUI0JUEwJUU1JUJFJTg4JUU1JUJGJUFCJUVGJUJDJThDJUU0JUJEJTg2JUU2JTk4JUFGJUU2JThGJTkyJUU1JTg1JUE1JUU1JTkyJThDJUU1JTg4JUEwJUU5JTk5JUE0JUU1JTg1JTgzJUU3JUI0JUEwJUU1JUIwJUIxJUU1JUJFJTg4JUU2JTg1JUEyJUU0JUJBJTg2JUVGJUJDJThDJUU1JTlCJUEwJUU0JUI4JUJBJTIyJTJDJTIybWFya3MlMjIlM0ElNUIlNUQlN0QlMkMlN0IlMjJraW5kJTIyJTNBJTIycmFuZ2UlMjIlMkMlMjJ0ZXh0JTIyJTNBJTIybGlzdCUyMiUyQyUyMm1hcmtzJTIyJTNBJTVCJTdCJTIyZGF0YSUyMiUzQSU3QiU3RCUyQyUyMmtpbmQlMjIlM0ElMjJtYXJrJTIyJTJDJTIydHlwZSUyMiUzQSUyMkNPREUlMjIlN0QlNUQlN0QlMkMlN0IlMjJraW5kJTIyJTNBJTIycmFuZ2UlMjIlMkMlMjJ0ZXh0JTIyJTNBJTIyJUU2JTk4JUFGJUU3JUJBJUJGJUU2JTgwJUE3JUU1JUFEJTk4JUU1JTgyJUE4JUVGJUJDJThDJUU2JTk1JUIwJUU2JThEJUFFJUU5JTg3JThGJUU1JUE0JUE3JUU3JTlBJTg0JUU2JTk3JUI2JUU1JTgwJTk5JUVGJUJDJThDJUU2JThGJTkyJUU1JTg1JUE1JUU1JTkyJThDJUU1JTg4JUEwJUU5JTk5JUE0JUU2JTk1JTg4JUU3JThFJTg3JUU1JUJFJTg4JUU0JUJEJThFJUUzJTgwJTgyJTIyJTJDJTIybWFya3MlMjIlM0ElNUIlNUQlN0QlNUQlN0QlNUQlN0QlMkMlN0IlMjJkYXRhJTIyJTNBJTdCJTdEJTJDJTIya2luZCUyMiUzQSUyMmJsb2NrJTIyJTJDJTIyaXNWb2lkJTIyJTNBZmFsc2UlMkMlMjJ0eXBlJTIyJTNBJTIycGFyYWdyYXBoJTIyJTJDJTIybm9kZXMlMjIlM0ElNUIlN0IlMjJraW5kJTIyJTNBJTIydGV4dCUyMiUyQyUyMnJhbmdlcyUyMiUzQSU1QiU3QiUyMmtpbmQlMjIlM0ElMjJyYW5nZSUyMiUyQyUyMnRleHQlMjIlM0ElMjJkZXF1ZSVFNiU5OCVBRiVFNCVCOCVCQSVFNCVCQSU4NiVFOSVBQiU5OCVFNiU5NSU4OCVFNSVBRSU5RSVFNyU4RSVCMCVFNiU4RiU5MiVFNSU4NSVBNSVFNSU5MiU4QyVFNSU4OCVBMCVFOSU5OSVBNCVFNiU5MyU4RCVFNCVCRCU5QyVFNyU5QSU4NCVFNSU4RiU4QyVFNSU5MCU5MSVFNSU4OCU5NyVFOCVBMSVBOCVFRiVCQyU4QyVFOSU4MCU4MiVFNSU5MCU4OCVFNyU5NCVBOCVFNCVCQSU4RSVFOSU5OCU5RiVFNSU4OCU5NyVFNSU5MiU4QyVFNiVBMCU4OCVFRiVCQyU5QSUyMiUyQyUyMm1hcmtzJTIyJTNBJTVCJTVEJTdEJTVEJTdEJTVEJTdEJTVEJTdE\">队列 ：先进先出</span></span></li>\n<li data-key=\"294\"><span style=\"font-size: 14px;\"><span data-key=\"285\"><span data-slate-fragment=\"JTdCJTIyZGF0YSUyMiUzQSU3QiU3RCUyQyUyMmtpbmQlMjIlM0ElMjJkb2N1bWVudCUyMiUyQyUyMm5vZGVzJTIyJTNBJTVCJTdCJTIyZGF0YSUyMiUzQSU3QiU3RCUyQyUyMmtpbmQlMjIlM0ElMjJibG9jayUyMiUyQyUyMmlzVm9pZCUyMiUzQWZhbHNlJTJDJTIydHlwZSUyMiUzQSUyMnBhcmFncmFwaCUyMiUyQyUyMm5vZGVzJTIyJTNBJTVCJTdCJTIya2luZCUyMiUzQSUyMnRleHQlMjIlMkMlMjJyYW5nZXMlMjIlM0ElNUIlN0IlMjJraW5kJTIyJTNBJTIycmFuZ2UlMjIlMkMlMjJ0ZXh0JTIyJTNBJTIyJUU0JUJEJUJGJUU3JTk0JUE4JTIyJTJDJTIybWFya3MlMjIlM0ElNUIlNUQlN0QlMkMlN0IlMjJraW5kJTIyJTNBJTIycmFuZ2UlMjIlMkMlMjJ0ZXh0JTIyJTNBJTIybGlzdCUyMiUyQyUyMm1hcmtzJTIyJTNBJTVCJTdCJTIyZGF0YSUyMiUzQSU3QiU3RCUyQyUyMmtpbmQlMjIlM0ElMjJtYXJrJTIyJTJDJTIydHlwZSUyMiUzQSUyMkNPREUlMjIlN0QlNUQlN0QlMkMlN0IlMjJraW5kJTIyJTNBJTIycmFuZ2UlMjIlMkMlMjJ0ZXh0JTIyJTNBJTIyJUU1JUFEJTk4JUU1JTgyJUE4JUU2JTk1JUIwJUU2JThEJUFFJUU2JTk3JUI2JUVGJUJDJThDJUU2JThDJTg5JUU3JUI0JUEyJUU1JUJDJTk1JUU4JUFFJUJGJUU5JTk3JUFFJUU1JTg1JTgzJUU3JUI0JUEwJUU1JUJFJTg4JUU1JUJGJUFCJUVGJUJDJThDJUU0JUJEJTg2JUU2JTk4JUFGJUU2JThGJTkyJUU1JTg1JUE1JUU1JTkyJThDJUU1JTg4JUEwJUU5JTk5JUE0JUU1JTg1JTgzJUU3JUI0JUEwJUU1JUIwJUIxJUU1JUJFJTg4JUU2JTg1JUEyJUU0JUJBJTg2JUVGJUJDJThDJUU1JTlCJUEwJUU0JUI4JUJBJTIyJTJDJTIybWFya3MlMjIlM0ElNUIlNUQlN0QlMkMlN0IlMjJraW5kJTIyJTNBJTIycmFuZ2UlMjIlMkMlMjJ0ZXh0JTIyJTNBJTIybGlzdCUyMiUyQyUyMm1hcmtzJTIyJTNBJTVCJTdCJTIyZGF0YSUyMiUzQSU3QiU3RCUyQyUyMmtpbmQlMjIlM0ElMjJtYXJrJTIyJTJDJTIydHlwZSUyMiUzQSUyMkNPREUlMjIlN0QlNUQlN0QlMkMlN0IlMjJraW5kJTIyJTNBJTIycmFuZ2UlMjIlMkMlMjJ0ZXh0JTIyJTNBJTIyJUU2JTk4JUFGJUU3JUJBJUJGJUU2JTgwJUE3JUU1JUFEJTk4JUU1JTgyJUE4JUVGJUJDJThDJUU2JTk1JUIwJUU2JThEJUFFJUU5JTg3JThGJUU1JUE0JUE3JUU3JTlBJTg0JUU2JTk3JUI2JUU1JTgwJTk5JUVGJUJDJThDJUU2JThGJTkyJUU1JTg1JUE1JUU1JTkyJThDJUU1JTg4JUEwJUU5JTk5JUE0JUU2JTk1JTg4JUU3JThFJTg3JUU1JUJFJTg4JUU0JUJEJThFJUUzJTgwJTgyJTIyJTJDJTIybWFya3MlMjIlM0ElNUIlNUQlN0QlNUQlN0QlNUQlN0QlMkMlN0IlMjJkYXRhJTIyJTNBJTdCJTdEJTJDJTIya2luZCUyMiUzQSUyMmJsb2NrJTIyJTJDJTIyaXNWb2lkJTIyJTNBZmFsc2UlMkMlMjJ0eXBlJTIyJTNBJTIycGFyYWdyYXBoJTIyJTJDJTIybm9kZXMlMjIlM0ElNUIlN0IlMjJraW5kJTIyJTNBJTIydGV4dCUyMiUyQyUyMnJhbmdlcyUyMiUzQSU1QiU3QiUyMmtpbmQlMjIlM0ElMjJyYW5nZSUyMiUyQyUyMnRleHQlMjIlM0ElMjJkZXF1ZSVFNiU5OCVBRiVFNCVCOCVCQSVFNCVCQSU4NiVFOSVBQiU5OCVFNiU5NSU4OCVFNSVBRSU5RSVFNyU4RSVCMCVFNiU4RiU5MiVFNSU4NSVBNSVFNSU5MiU4QyVFNSU4OCVBMCVFOSU5OSVBNCVFNiU5MyU4RCVFNCVCRCU5QyVFNyU5QSU4NCVFNSU4RiU4QyVFNSU5MCU5MSVFNSU4OCU5NyVFOCVBMSVBOCVFRiVCQyU4QyVFOSU4MCU4MiVFNSU5MCU4OCVFNyU5NCVBOCVFNCVCQSU4RSVFOSU5OCU5RiVFNSU4OCU5NyVFNSU5MiU4QyVFNiVBMCU4OCVFRiVCQyU5QSUyMiUyQyUyMm1hcmtzJTIyJTNBJTVCJTVEJTdEJTVEJTdEJTVEJTdEJTVEJTdE\">堆栈 ：先进后出</span></span></span></li>\n</ul>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">from</span> collections <span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> deque\n\ndq </span>= deque([1, 3<span style=\"color: #000000;\">])\ndq.append(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">a</span><span style=\"color: #800000;\">\"</span>)       <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> [1, 3, \"a\"]          从后面放数据</span>\ndq.appendleft(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">b</span><span style=\"color: #800000;\">\"</span>)   <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> [\"b\", 1, 3, \"a\"]     从前面放数据</span>\ndq.insert(2, 2)      <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> [\"b\", 1, 2, 3,\"a\"]   在第二个位置插入2</span>\n\n<span style=\"color: #0000ff;\">print</span>(dq)  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> deque([\'b\', 1, 2, 3, \'a\'])</span>\n\n<span style=\"color: #0000ff;\">print</span>(dq.pop())      <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> a   从后面取数据</span>\n<span style=\"color: #0000ff;\">print</span>(dq.popleft())  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> b   从前面取数据</span>\n<span style=\"color: #0000ff;\">print</span>(dq)            <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> deque([1, 2, 3])</span></pre>\n</div>\n<p><span style=\"font-size: 16px;\"><strong>OrderedDict</strong></span></p>\n<p><span data-slate-fragment=\"JTdCJTIyZGF0YSUyMiUzQSU3QiU3RCUyQyUyMmtpbmQlMjIlM0ElMjJkb2N1bWVudCUyMiUyQyUyMm5vZGVzJTIyJTNBJTVCJTdCJTIyZGF0YSUyMiUzQSU3QiU3RCUyQyUyMmtpbmQlMjIlM0ElMjJibG9jayUyMiUyQyUyMmlzVm9pZCUyMiUzQWZhbHNlJTJDJTIydHlwZSUyMiUzQSUyMnBhcmFncmFwaCUyMiUyQyUyMm5vZGVzJTIyJTNBJTVCJTdCJTIya2luZCUyMiUzQSUyMnRleHQlMjIlMkMlMjJyYW5nZXMlMjIlM0ElNUIlN0IlMjJraW5kJTIyJTNBJTIycmFuZ2UlMjIlMkMlMjJ0ZXh0JTIyJTNBJTIyJUU0JUJEJUJGJUU3JTk0JUE4JTIyJTJDJTIybWFya3MlMjIlM0ElNUIlNUQlN0QlMkMlN0IlMjJraW5kJTIyJTNBJTIycmFuZ2UlMjIlMkMlMjJ0ZXh0JTIyJTNBJTIyZGljdCUyMiUyQyUyMm1hcmtzJTIyJTNBJTVCJTdCJTIyZGF0YSUyMiUzQSU3QiU3RCUyQyUyMmtpbmQlMjIlM0ElMjJtYXJrJTIyJTJDJTIydHlwZSUyMiUzQSUyMkNPREUlMjIlN0QlNUQlN0QlMkMlN0IlMjJraW5kJTIyJTNBJTIycmFuZ2UlMjIlMkMlMjJ0ZXh0JTIyJTNBJTIyJUU2JTk3JUI2JUVGJUJDJThDS2V5JUU2JTk4JUFGJUU2JTk3JUEwJUU1JUJBJThGJUU3JTlBJTg0JUUzJTgwJTgyJUU1JTlDJUE4JUU1JUFGJUI5JTIyJTJDJTIybWFya3MlMjIlM0ElNUIlNUQlN0QlMkMlN0IlMjJraW5kJTIyJTNBJTIycmFuZ2UlMjIlMkMlMjJ0ZXh0JTIyJTNBJTIyZGljdCUyMiUyQyUyMm1hcmtzJTIyJTNBJTVCJTdCJTIyZGF0YSUyMiUzQSU3QiU3RCUyQyUyMmtpbmQlMjIlM0ElMjJtYXJrJTIyJTJDJTIydHlwZSUyMiUzQSUyMkNPREUlMjIlN0QlNUQlN0QlMkMlN0IlMjJraW5kJTIyJTNBJTIycmFuZ2UlMjIlMkMlMjJ0ZXh0JTIyJTNBJTIyJUU1JTgxJTlBJUU4JUJGJUFEJUU0JUJCJUEzJUU2JTk3JUI2JUVGJUJDJThDJUU2JTg4JTkxJUU0JUJCJUFDJUU2JTk3JUEwJUU2JUIzJTk1JUU3JUExJUFFJUU1JUFFJTlBS2V5JUU3JTlBJTg0JUU5JUExJUJBJUU1JUJBJThGJUUzJTgwJTgyJTIyJTJDJTIybWFya3MlMjIlM0ElNUIlNUQlN0QlNUQlN0QlNUQlN0QlMkMlN0IlMjJkYXRhJTIyJTNBJTdCJTdEJTJDJTIya2luZCUyMiUzQSUyMmJsb2NrJTIyJTJDJTIyaXNWb2lkJTIyJTNBZmFsc2UlMkMlMjJ0eXBlJTIyJTNBJTIycGFyYWdyYXBoJTIyJTJDJTIybm9kZXMlMjIlM0ElNUIlN0IlMjJraW5kJTIyJTNBJTIydGV4dCUyMiUyQyUyMnJhbmdlcyUyMiUzQSU1QiU3QiUyMmtpbmQlMjIlM0ElMjJyYW5nZSUyMiUyQyUyMnRleHQlMjIlM0ElMjIlRTUlQTYlODIlRTYlOUUlOUMlRTglQTYlODElRTQlQkYlOUQlRTYlOEMlODFLZXklRTclOUElODQlRTklQTElQkElRTUlQkElOEYlRUYlQkMlOEMlRTUlOEYlQUYlRTQlQkIlQTUlRTclOTQlQTglMjIlMkMlMjJtYXJrcyUyMiUzQSU1QiU1RCU3RCUyQyU3QiUyMmtpbmQlMjIlM0ElMjJyYW5nZSUyMiUyQyUyMnRleHQlMjIlM0ElMjJPcmRlcmVkRGljdCUyMiUyQyUyMm1hcmtzJTIyJTNBJTVCJTdCJTIyZGF0YSUyMiUzQSU3QiU3RCUyQyUyMmtpbmQlMjIlM0ElMjJtYXJrJTIyJTJDJTIydHlwZSUyMiUzQSUyMkNPREUlMjIlN0QlNUQlN0QlMkMlN0IlMjJraW5kJTIyJTNBJTIycmFuZ2UlMjIlMkMlMjJ0ZXh0JTIyJTNBJTIyJUVGJUJDJTlBJTIyJTJDJTIybWFya3MlMjIlM0ElNUIlNUQlN0QlNUQlN0QlNUQlN0QlNUQlN0Q=\">使用dict时，Key是无序的。在对dict做迭代时，我们无法确定Key的顺序；</span><span data-key=\"443\"><span data-offset-key=\"443-0\">如果要保持Key的顺序，可以用 <span data-offset-key=\"443-1\"><code>OrderedDict。</code></span></span></span></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">from</span> collections <span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> OrderedDict\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> dict的Key是无序的</span>\ndic = dict([(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">a</span><span style=\"color: #800000;\">\"</span>, 1), (<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">b</span><span style=\"color: #800000;\">\"</span>, 2), (<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">c</span><span style=\"color: #800000;\">\"</span>, 3<span style=\"color: #000000;\">)])\n</span><span style=\"color: #0000ff;\">print</span>(dic)    <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 可能是 {\'a\': 1, \'c\': 3, \'b\': 2}</span>\n\n<span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> OrderedDict的Key是有序的</span>\no_dic = OrderedDict([(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">a</span><span style=\"color: #800000;\">\"</span>, 1), (<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">b</span><span style=\"color: #800000;\">\"</span>, 2), (<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">c</span><span style=\"color: #800000;\">\"</span>, 3<span style=\"color: #000000;\">)])\n</span><span style=\"color: #0000ff;\">print</span>(o_dic)  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> OrderedDict([(\'a\', 1), (\'b\', 2), (\'c\', 3)])</span></pre>\n</div>\n<p data-key=\"294\">注<span data-offset-key=\"462-0\">意，<span data-offset-key=\"462-1\"><code>OrderedDict</code><span data-offset-key=\"462-2\">的Key会按照插入的顺序排列，不是Key本身排序：</span></span></span></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">from</span> collections <span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> OrderedDict\n\no_dic </span>=<span style=\"color: #000000;\"> OrderedDict()\no_dic[</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">a</span><span style=\"color: #800000;\">\"</span>] = 1<span style=\"color: #000000;\">\no_dic[</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">b</span><span style=\"color: #800000;\">\"</span>] = 2<span style=\"color: #000000;\">\no_dic[</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">c</span><span style=\"color: #800000;\">\"</span>] = 3\n<span style=\"color: #0000ff;\">print</span>(o_dic.keys())  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 按照插入的Key的顺序返回</span><span style=\"color: #008000;\">\n#</span><span style=\"color: #008000;\"> odict_keys([\'a\', \'b\', \'c\'])</span></pre>\n</div>\n<p data-key=\"294\"><span style=\"font-size: 16px;\"><strong>defaultdict</strong></span></p>\n<p data-key=\"294\">有如下值集合 [11, 22, 33, 44, 55, 66, 77, 88, 99]，将所有大于 66 的值保存至字典的第一个key中，将小于 66 的值保存至第二个key的值中。</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">from</span> collections <span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> defaultdict\n\nl </span>= [11, 22, 33, 44, 55, 66, 77, 88, 99<span style=\"color: #000000;\">]\ndic </span>=<span style=\"color: #000000;\"> defaultdict(list)\n\n</span><span style=\"color: #0000ff;\">for</span> item <span style=\"color: #0000ff;\">in</span><span style=\"color: #000000;\"> l:\n    </span><span style=\"color: #0000ff;\">if</span> item &gt; 66<span style=\"color: #000000;\">:\n        dic[</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">k1</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">].append(item)\n    </span><span style=\"color: #0000ff;\">else</span><span style=\"color: #000000;\">:\n        dic[</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">k2</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">].append(item)\n</span><span style=\"color: #0000ff;\">print</span><span style=\"color: #000000;\">(dic)\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\">defaultdict(&lt;class \"list\"&gt;, {\"k2\": [11, 22, 33, 44, 55, 66], \"k1\": [77, 88, 99]})</span></pre>\n</div>\n<p><span style=\"font-size: 16px;\"><strong>Counter</strong></span></p>\n<p><span style=\"font-size: 14px;\">Counter类的目的是用来跟踪值出现的次数。它是一个无序的容器类型，以字典的键值对形式存储，其中元素作为key，其计数作为value。计数值可以是任意的Interger（包括0和负数）。</span></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">from</span> collections <span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> Counter\n\nc </span>= Counter(<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">abcdeabcdabcaba</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #0000ff;\">print</span>(c)  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> Counter({\'a\': 5, \'b\': 4, \'c\': 3, \'d\': 2, \'e\': 1})</span></pre>\n</div>\n<h2><span style=\"background-color: #00ccff;\">random模块</span></h2>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> random\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 随机小数</span>\n<span style=\"color: #0000ff;\">print</span>(random.random())  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 大于0小于1的小数</span>\n<span style=\"color: #0000ff;\">print</span>(random.uniform(6, 8))  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 大于6小于8的小数</span>\n\n<span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 随机整数</span>\n<span style=\"color: #0000ff;\">print</span>(random.randint(1, 5))  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 大于等于1小于等于5的整数</span>\n<span style=\"color: #0000ff;\">print</span>(random.randrange(1, 10, 2))  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 大于等于1且小于10之间的奇数，2为步长</span>\n\n<span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 随机选择一个返回</span>\n<span style=\"color: #0000ff;\">print</span>(random.choice([1, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">a</span><span style=\"color: #800000;\">\"</span>, [2, 3]]))  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 1或者\"a\"或者[2, 3]</span>\n\n<span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 随机选择多个返回，返回的个数为函数的第二个参数</span>\n<span style=\"color: #0000ff;\">print</span>(random.sample([1, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">a</span><span style=\"color: #800000;\">\"</span>, [2, 3]], 2))  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 列表元素任意2个组合</span>\n\n<span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 打乱列表顺序</span>\nitem = [1, 3, 5, 7, 9<span style=\"color: #000000;\">]\nrandom.shuffle(item)  </span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 打乱顺序</span>\n<span style=\"color: #0000ff;\">print</span>(item)</pre>\n</div>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'3ad2e3c5-288e-424a-a82e-8a76252a1711\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_3ad2e3c5-288e-424a-a82e-8a76252a1711\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_3ad2e3c5-288e-424a-a82e-8a76252a1711\" onclick=\"cnblogs_code_hide(\'3ad2e3c5-288e-424a-a82e-8a76252a1711\',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_3ad2e3c5-288e-424a-a82e-8a76252a1711\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> random\n\n</span><span style=\"color: #0000ff;\">def</span><span style=\"color: #000000;\"> random_verify_code():\n    code </span>= <span style=\"color: #800000;\">\"\"</span>\n    <span style=\"color: #0000ff;\">for</span> i <span style=\"color: #0000ff;\">in</span> range(5<span style=\"color: #000000;\">):\n        num </span>= random.randint(0, 9<span style=\"color: #000000;\">)\n        upper_alpha </span>= chr(random.randint(65, 90<span style=\"color: #000000;\">))\n        lower_alpha </span>= chr(random.randint(97, 122<span style=\"color: #000000;\">))\n        item </span>=<span style=\"color: #000000;\"> random.choice([num, upper_alpha, lower_alpha])\n        code </span>= <span style=\"color: #800000;\">\"\"</span><span style=\"color: #000000;\">.join([code, str(item)])\n    </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> code\n\n</span><span style=\"color: #0000ff;\">print</span>(random_verify_code())</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">随机验证码</span></div>\n<h2><span style=\"background-color: #00ccff;\">hashlib模块</span></h2>\n<p>Python的hashlib模块提供了常见的摘要算法；如MD5，SHA1等...</p>\n<p>以常见的摘要算法MD5为例，计算出一个字符串的MD5值：</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> hashlib\n\nmd5 </span>=<span style=\"color: #000000;\"> hashlib.md5()\nmd5.update(b</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">how to use md5 in python hashlib?</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #0000ff;\">print</span>(md5.hexdigest())</pre>\n</div>\n<p>如果数据量很大，可以分块多次调用update()，最后计算的结果是一样的：</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> hashlib\n\nmd5 </span>=<span style=\"color: #000000;\"> hashlib.md5()\nmd5.update(b</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">how to use md5 in </span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\nmd5.update(b</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">python hashlib?</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #0000ff;\">print</span>(md5.hexdigest())</pre>\n</div>\n<p>由于常用口令的 md5 值很容易被计算出来，所以，要确保存储的用户口令不是那些已经被计算出来的常用口令的 md5，这一方法通过对原始口令加一个复杂字符串来实现，俗称“加盐”：</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> hashlib\n\nmd5 </span>= hashlib.md5(bytes(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">salt</span><span style=\"color: #800000;\">\"</span>, encoding=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">utf-8</span><span style=\"color: #800000;\">\"</span>))  <span style=\"color: #008000;\"># </span><span style=\"color: #008000;\">\"salt\"可替换成任意字符串</span>\nmd5.update(b<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">how to use md5 in python hashlib?</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #0000ff;\">print</span>(md5.hexdigest())</pre>\n</div>\n<p>经过加盐处理的MD5口令，只要Salt不被黑客知道，即使用户输入简单口令，也很难通过MD5反推明文口令。</p>\n<p>但是如果有两个用户都使用了相同的简单口令比如123456，在数据库中，将存储两条相同的MD5值，这说明这两个用户的口令是一样的。有没有办法让使用相同口令的用户存储不同的MD5呢？</p>\n<p>如果假定用户名唯一，就可以通过把用户名作为Salt的一部分来计算MD5，从而实现相同口令的用户也存储不同的MD5。</p>\n<p>摘要算法在很多地方都有广泛的应用。要注意<span style=\"background-color: #ff99cc;\">摘要算法不属于加解密算法</span>，不能用于加密（因为无法通过摘要反推明文），只能用于防篡改，但是它的单向计算特性决定了可以在不存储明文口令的情况下验证用户口令。</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> hashlib\n\nusername </span>= input(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">username:</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\npassword </span>= input(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">password:</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\nmd5 </span>= hashlib.md5(bytes(username, encoding=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">utf-8</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">))\nmd5.update(bytes(password, encoding</span>=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">utf-8</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">))\nmd5_password </span>=<span style=\"color: #000000;\"> md5.hexdigest()\n</span><span style=\"color: #0000ff;\">if</span> username == <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span> <span style=\"color: #0000ff;\">and</span> md5_password == <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">bf55109f7e511ebf6d8f1f43a5a96539</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">:\n    </span><span style=\"color: #0000ff;\">print</span>(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">登录成功</span><span style=\"color: #800000;\">\"</span>)</pre>\n</div>\n<h2><span style=\"background-color: #00ccff;\">configparser模块</span></h2>\n<p>该模块适用于配置文件的格式与windows ini文件类似，可以包含一个或多个节（section），每个节可以有多个参数（键=值）。</p>\n<p><span style=\"background-color: #99cc00;\"><strong>创建文件</strong></span></p>\n<p><span style=\"color: #000000; font-size: 14px;\">来看一个好多软件的常见文档格式如下：</span></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #000000;\">[DEFAULT]\nServerAliveInterval </span>= 45<span style=\"color: #000000;\">\nCompression </span>=<span style=\"color: #000000;\"> yes\nCompressionLevel </span>= 9<span style=\"color: #000000;\">\nForwardX11 </span>=<span style=\"color: #000000;\"> yes\n  \n[bitbucket.org]\nUser </span>=<span style=\"color: #000000;\"> hg\n  \n[topsecret.server.com]\nPort </span>= 50022<span style=\"color: #000000;\">\nForwardX11 </span>= no</pre>\n</div>\n<p>如果想用python生成一个这样的文档怎么做呢？</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> configparser\nconfig </span>=<span style=\"color: #000000;\"> configparser.ConfigParser()\n\nconfig[</span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">DEFAULT</span><span style=\"color: #800000;\">\'</span>] = {<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">ServerAliveInterval</span><span style=\"color: #800000;\">\'</span>: <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">45</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">,\n                      </span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">Compression</span><span style=\"color: #800000;\">\'</span>: <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">yes</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">,\n                      </span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">CompressionLevel</span><span style=\"color: #800000;\">\'</span>: <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">9</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">,\n                      </span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">ForwardX11</span><span style=\"color: #800000;\">\'</span>: <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">yes</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">}\nconfig[</span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">bitbucket.org</span><span style=\"color: #800000;\">\'</span>] = {<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">User</span><span style=\"color: #800000;\">\'</span>: <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">hg</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">}\nconfig[</span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">topsecret.server.com</span><span style=\"color: #800000;\">\'</span>] = {<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">Host Port</span><span style=\"color: #800000;\">\'</span>: <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">50022</span><span style=\"color: #800000;\">\'</span>, <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">ForwardX11</span><span style=\"color: #800000;\">\'</span>: <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">no</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">}\n\nwith open(</span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">example.ini</span><span style=\"color: #800000;\">\'</span>, <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">w</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">) as configfile:\n   config.write(configfile)</span></pre>\n</div>\n<p><span style=\"background-color: #99cc00;\"><strong>增删改操作</strong></span></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> configparser\nconfig </span>=<span style=\"color: #000000;\"> configparser.ConfigParser()\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\">查找文件内容,基于字典的形式</span>\n\n<span style=\"color: #0000ff;\">print</span>(config.sections())    <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> []  没读文件，得到的是空</span>\n<span style=\"color: #000000;\">\nconfig.read(</span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">example.ini</span><span style=\"color: #800000;\">\'</span>, encoding=<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">utf-8</span><span style=\"color: #800000;\">\'</span>)  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\">读文件</span>\n\n<span style=\"color: #0000ff;\">print</span>(config.sections())    <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 获取所有节点  [\'bitbucket.org\', \'topsecret.server.com\']</span>\n\n<span style=\"color: #0000ff;\">print</span>(config.items(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">bitbucket.org</span><span style=\"color: #800000;\">\"</span>))    <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 获取指定节点下所有的键值对（如果有DEFAULT节点，默认也获取）</span>\n\n<span style=\"color: #0000ff;\">print</span>(config.get(<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">bitbucket.org</span><span style=\"color: #800000;\">\'</span>,<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">compression</span><span style=\"color: #800000;\">\'</span>))   <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 获取指定节点下指定key的值</span>\n<span style=\"color: #0000ff;\">print</span>(config[<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">bitbucket.org</span><span style=\"color: #800000;\">\'</span>][<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">user</span><span style=\"color: #800000;\">\"</span>])   <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 获取指定节点下指定key的值</span>\n\n<span style=\"color: #0000ff;\">print</span>(<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">bytebong.com</span><span style=\"color: #800000;\">\'</span> <span style=\"color: #0000ff;\">in</span> config)  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> False</span>\n<span style=\"color: #0000ff;\">print</span>(<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">bitbucket.org</span><span style=\"color: #800000;\">\'</span> <span style=\"color: #0000ff;\">in</span> config) <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> True</span>\n\n<span style=\"color: #0000ff;\">for</span> key <span style=\"color: #0000ff;\">in</span> config[<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">bitbucket.org</span><span style=\"color: #800000;\">\'</span>]:     <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 如果有DEFAULT节点的话，默认也同时获取key</span>\n    <span style=\"color: #0000ff;\">print</span><span style=\"color: #000000;\">(key)\n\n</span><span style=\"color: #0000ff;\">print</span>(config.options(<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">bitbucket.org</span><span style=\"color: #800000;\">\'</span>))  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 返回的是由key组成的列表</span></pre>\n</div>\n<p><span style=\"background-color: #99cc00;\"><strong>检查、添加、修改、删除</strong></span></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> configparser\nconfig </span>=<span style=\"color: #000000;\"> configparser.ConfigParser()\nconfig.read(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">example.ini</span><span style=\"color: #800000;\">\"</span>, encoding=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">utf-8</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\n\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 检查节点</span>\nhas_sec = config.has_section(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">bitbucket.org</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #0000ff;\">print</span>(has_sec)  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> True</span>\n\n<span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 添加新节点</span>\nconfig.add_section(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">xxx</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\nconfig.write(open(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">example.ini</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">w</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">))\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 修原有改节点键值对</span>\nconfig.set(<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">section</span><span style=\"color: #800000;\">\'</span>, <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">key</span><span style=\"color: #800000;\">\'</span>, <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">value</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">)\nconfig.write(open(</span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">filename</span><span style=\"color: #800000;\">\'</span>, <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">w</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">))\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 添加新节点，同时定义一对键值对</span>\nconfig.add_section(<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">new_section</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">)\nconfig.set(</span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">new_section</span><span style=\"color: #800000;\">\'</span>, <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">new_key</span><span style=\"color: #800000;\">\'</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">new_value</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\nconfig.write(open(</span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">filename</span><span style=\"color: #800000;\">\'</span>, <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">w</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">))\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 删除节点</span>\nconfig.remove_section(<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">bitbucket.org</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">)\nconfig.write(open(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">example.ini</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">w</span><span style=\"color: #800000;\">\"</span>))</pre>\n</div>\n<h2><span style=\"background-color: #00ccff;\">logging模块</span></h2>\n<p>用于便捷记录日志且线性安全的模块</p>\n<h3><span style=\"color: #ff6600;\">1、单文件日志（不推荐）</span></h3>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> logging\nlogging.basicConfig(filename</span>=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">log.log</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n                    level</span>=<span style=\"color: #000000;\">logging.DEBUG,\n                    format</span>=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%(asctime)s - %(module)s/%(filename)s[line:%(lineno)d] - %(levelname)s:%(message)s</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n                    datefmt</span>=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d-%b-%Y %H:%M:%S</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n                    filemode</span>=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">w</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\n\nlogging.debug(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">debug message</span><span style=\"color: #800000;\">\"</span>)         <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\">排错信息</span>\nlogging.info(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">info message</span><span style=\"color: #800000;\">\"</span>)           <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\">正常信息</span>\nlogging.warning(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">warning message</span><span style=\"color: #800000;\">\"</span>)     <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\">警告信息</span>\nlogging.error(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">error message</span><span style=\"color: #800000;\">\"</span>)         <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\">错误信息</span>\nlogging.critical(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">critical message</span><span style=\"color: #800000;\">\"</span>)   <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\">严重错误信息</span></pre>\n</div>\n<h3><img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1468833/201809/1468833-20180928223225459-1755291286.png\"/></h3>\n<h3><span style=\"color: #ff6600;\"><strong>2、多文件日志（推荐）</strong></span></h3>\n<p><span style=\"color: #000000;\">对于上述记录日志的功能，只能将日志记录在单文件中，如果想要设置多个日志文件，logging.basicConfig将无法完成，需要自定义文件和日志操作对象。</span></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #000000;\">logging.basicConfig()  函数中可通过具体参数来更改logging模块默认行为，可用参数有：\n\nfilename：--用指定的文件名创建FiledHandler，这样日志会被存储在指定的文件中。\nfilemode：--文件打开方式，在指定了filename时使用这个参数，默认值为“a”还可指定为“w”。\nformat：----指定handler使用的日志显示格式。\ndatefmt：---指定日期时间格式。\nlevel：-----设置rootlogger（后边会讲解具体概念）的日志级别\nstream：----用指定的stream创建StreamHandler。可以指定输出到sys.stderr,sys.stdout或者文件(f</span>=<span style=\"color: #000000;\">open(‘test.log’,’w’))，默认为sys.stderr。若同时列出了filename和stream两个参数，则stream参数会被忽略。\n\nformat参数中可能用到的格式化串：\n</span>%<span style=\"color: #000000;\">(name)s --------Logger的名字\n</span>%<span style=\"color: #000000;\">(levelno)s -----数字形式的日志级别\n</span>%<span style=\"color: #000000;\">(levelname)s ---文本形式的日志级别\n</span>%<span style=\"color: #000000;\">(pathname)s ----调用日志输出函数的模块的完整路径名，可能没有\n</span>%<span style=\"color: #000000;\">(filename)s ----调用日志输出函数的模块的文件名\n</span>%<span style=\"color: #000000;\">(module)s ------调用日志输出函数的模块名\n</span>%<span style=\"color: #000000;\">(funcName)s ----调用日志输出函数的函数名\n</span>%<span style=\"color: #000000;\">(lineno)d ------调用日志输出函数的语句所在的代码行\n</span>%<span style=\"color: #000000;\">(created)f------当前时间，用UNIX标准的表示时间的浮 点数表示\n</span>%<span style=\"color: #000000;\">(relativeCreated)d ---输出日志信息时的，自Logger创建以 来的毫秒数\n</span>%(asctime)s -----字符串形式的当前时间。默认格式是 “2003-07-08 16:49:45,896<span style=\"color: #000000;\">”。逗号后面的是毫秒\n</span>%<span style=\"color: #000000;\">(thread)d ------线程ID。可能没有\n</span>%<span style=\"color: #000000;\">(threadName)s --线程名。可能没有\n</span>%<span style=\"color: #000000;\">(process)d -----进程ID。可能没有\n</span>%(message)s -----用户输出的消息</pre>\n</div>\n<p><strong><span style=\"color: #000000; font-size: 14px;\"> logger对象配置流程</span></strong></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> logging\nlogger </span>=<span style=\"color: #000000;\"> logging.getLogger()\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 设置日志级别</span>\n<span style=\"color: #000000;\">logger.setLevel(logging.DEBUG)\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 创建一个handler(或者多个)，用于写入日志文件</span>\nfh = logging.FileHandler(<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">log</span><span style=\"color: #800000;\">\'</span>, encoding=<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">utf-8</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 创建一个handler，用于输出到控制台</span>\nsh =<span style=\"color: #000000;\"> logging.StreamHandler()\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 输出格式，可定义多个</span>\nformatter = logging.Formatter(<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">%(asctime)s - %(module)s/%(filename)s[line:%(lineno)d] - %(levelname)s:%(message)s</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">)\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> handler 关联 输出格式</span>\n<span style=\"color: #000000;\">fh.setFormatter(formatter)\nsh.setFormatter(formatter)\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> logger对象可以添加多个fh和sh对象</span>\n<span style=\"color: #000000;\">logger.addHandler(fh)\nlogger.addHandler(sh)\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 写日志，括号内可写任意内容</span>\nlogger.debug(<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">排错信息</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">)\nlogger.info(</span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">正常信息</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">)\nlogger.warning(</span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">警告信息</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">)\nlogger.error(</span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">错误信息</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">)\nlogger.critical(</span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">严重错误信息</span><span style=\"color: #800000;\">\'</span>)</pre>\n</div>\n<p>logging库提供了多个组件：Logger、Handler、Filter、Formatter。Logger对象提供应用程序可直接使用的接口；Handler发送日志到适当的目的地；Filter提供了过滤日志信息的方法；Formatter指定日志显示格式；另外，可以通过logger.setLevel(logging.Debug)设置级别。</p>\n<p> </p>', 9);
INSERT INTO `blog_articledetail` VALUES (11, '<p style=\"text-indent:28px;color:#666666;font-family:Arial;font-size:14px;background-color:#FFFFFF;\">\n<span style=\"color:#000000;\">前苏联领导人斯大林曾经说过：“有理想的人，生活总是火热的”，人总该是要有理想的，没有理想的人就是一条咸鱼。</span>\n</p>\n<p style=\"text-indent:28px;color:#666666;font-family:Arial;font-size:14px;background-color:#FFFFFF;\">\n<span style=\"color:#000000;\">从前，某块地里有两颗种子，一颗体型硕大，且已经冒出了一点儿芽儿，而再观另一颗，长得瘦瘦小小的，不知何时才能有出头之日，真不像是一块地里的种子。</span>\n</p>\n<p style=\"text-indent:28px;color:#666666;font-family:Arial;font-size:14px;background-color:#FFFFFF;\">\n<span style=\"color:#000000;\">那块大种子总是对小种子冷嘲热讽般说道：“像你这样的种子，是不可能有出头之日的，就别浪费主人给的水和大地母亲的养分了，乖乖地等着给主人养的老母鸡当零食吧。”</span>\n</p>\n<p style=\"text-indent:28px;color:#666666;font-family:Arial;font-size:14px;background-color:#FFFFFF;\">\n<span style=\"color:#000000;\">可是小种子他不甘心，不愿给母鸡提供养分。于是他努力地生长着，每天都拼命地汲取养分，哪里有水就往哪里钻，哪里有缝就往哪里钻，每天都或在紧张了，母鸡总是无处不在，于是东躲西藏，水分总是左窜右跳，所以拼命追赶，为了一滴水甘愿走到天涯海角， 人也是这样，不要放过任何一个难题，有时候细节决定了一切。</span>\n</p>\n<p style=\"text-indent:28px;color:#666666;font-family:Arial;font-size:14px;background-color:#FFFFFF;\">\n<span style=\"color:#000000;\">小种子已经很努力地在生长了，可是再看看大种子，那可真是太欺负人了，小种子也知道，那大种子种下来的时候，就种在了光照充足且十分显眼的地方，十分容易被人注意到，所以主人给了他很多很多的水。但也不带这么欺负人的吧，你看小种子都这么努力了，却只是勉强地冒出一点芽而已，离钻出地面还有好长一段距离，可大种子却已经冒出了地面两厘米高了，含着金钥匙出生的，果然还是不一样的。</span>\n</p>\n<p style=\"text-indent:28px;color:#666666;font-family:Arial;font-size:14px;background-color:#FFFFFF;\">\n<span style=\"color:#000000;\">尽管如此，小种子还是继续努力着，从来就没有放弃过，还是拼命地生存。又过了几个月，他觉得突然之间少了些什么，觉得生活空荡荡的，但就是想不起来是什么。噢，原来是少了大种子的嘲讽，他出了什么事吗?小种子放眼望去，那里已然没有了大种子的身影，只留下几条根须，和一个被母鸡啄过的深达五六厘米的大坑。</span>\n</p>\n<p style=\"text-indent:28px;color:#666666;font-family:Arial;font-size:14px;background-color:#FFFFFF;\">\n<span style=\"color:#000000;\">可想而知，大种子到底经历了些什么残忍的事情。有时候，太过优秀也并非是什么好事，要知道“木秀于林风必摧之”，总要学会韬光养晦，才能最终取得成功。</span>\n</p>\n<p style=\"text-indent:28px;color:#666666;font-family:Arial;font-size:14px;background-color:#FFFFFF;\">\n<span style=\"color:#000000;\">而小种子却是幸运的，那块地的主人看到前两个月刚长出的嫩芽被母鸡给吃了，就找来了一个铁围栏，将小种子所在的那块地给围了起来。于是不仅是小种子，而且小种子那块地里的一些白菜姐姐们也长得郁郁葱葱的，好看极了。</span>\n</p>\n<p style=\"text-indent:28px;color:#666666;font-family:Arial;font-size:14px;background-color:#FFFFFF;\">\n<span style=\"color:#000000;\">小种子的理想就是有朝一日，能长成参天大树，让后人靠着乘凉。于是他并不在意大种子日复一日的讥讽，一如既往地走他自己的路，最后他终于长成了一棵参天大树，那铁围栏也拆了，大树是不需要围栏的，需要那些的是柔弱的小树苗。</span>\n</p>', 11);
INSERT INTO `blog_articledetail` VALUES (13, '<div class=\"post-content\">\n<p>\n		etcd是近几年比较火热的一个开源的、分布式的键值对数据存储系统，提供共享配置、服务的注册和发现，本文主要介绍etcd的安装和使用。\n	</p>\n<h1 id=\"autoid-0-0-0\">\n		etcd\n	</h1>\n<h2 id=\"autoid-1-0-0\">\n		etcd介绍\n	</h2>\n<p>\n<a href=\"https://etcd.io/\" target=\"_blank\">etcd</a>是使用Go语言开发的一个开源的、高可用的分布式key-value存储系统，可以用于配置共享和服务的注册和发现。\n	</p>\n<p>\n		类似项目有zookeeper和consul。\n	</p>\n<p>\n		etcd具有以下特点：\n	</p>\n<ul>\n<li>\n			完全复制：集群中的每个节点都可以使用完整的存档\n		</li>\n<li>\n			高可用性：Etcd可用于避免硬件的单点故障或网络问题\n		</li>\n<li>\n			一致性：每次读取都会返回跨多主机的最新写入\n		</li>\n<li>\n			简单：包括一个定义良好、面向用户的API（gRPC）\n		</li>\n<li>\n			安全：实现了带有可选的客户端证书身份验证的自动化TLS\n		</li>\n<li>\n			快速：每秒10000次写入的基准速度\n		</li>\n<li>\n			可靠：使用Raft算法实现了强一致、高可用的服务存储目录\n		</li>\n</ul>\n<h2 id=\"autoid-1-1-0\">\n		etcd应用场景\n	</h2>\n<h3 id=\"autoid-1-2-0\">\n		服务发现\n	</h3>\n<p>\n		服务发现要解决的也是分布式系统中最常见的问题之一，即在同一个分布式集群中的进程或服务，要如何才能找到对方并建立连接。本质上来说，服务发现就是想要了解集群中是否有进程在监听 udp 或 tcp 端口，并且通过名字就可以查找和连接。\n	</p>\n<p>\n<img alt=\"img\" src=\"/images/Go/etcd/etcd_01.png\"/>\n</p>\n<h3 id=\"autoid-1-2-1\">\n		配置中心\n	</h3>\n<p>\n		将一些配置信息放到 etcd 上进行集中管理。\n	</p>\n<p>\n		这类场景的使用方式通常是这样：应用在启动的时候主动从 etcd 获取一次配置信息，同时，在 etcd 节点上注册一个 Watcher 并等待，以后每次配置有更新的时候，etcd 都会实时通知订阅者，以此达到获取最新配置信息的目的。\n	</p>\n<h3 id=\"autoid-1-2-2\">\n		分布式锁\n	</h3>\n<p>\n		因为 etcd 使用 Raft 算法保持了数据的强一致性，某次操作存储到集群中的值必然是全局一致的，所以很容易实现分布式锁。锁服务有两种使用方式，一是保持独占，二是控制时序。\n	</p>\n<ul>\n<li>\n<strong>保持独占即所有获取锁的用户最终只有一个可以得到</strong>。etcd 为此提供了一套实现分布式锁原子操作 CAS（CompareAndSwap）的 API。通过设置prevExist值，可以保证在多个节点同时去创建某个目录时，只有一个成功。而创建成功的用户就可以认为是获得了锁。\n		</li>\n<li>\n			控制时序，即所有想要获得锁的用户都会被安排执行，但是<strong>获得锁的顺序也是全局唯一的，同时决定了执行顺序</strong>。etcd 为此也提供了一套 API（自动创建有序键），对一个目录建值时指定为POST动作，这样 etcd 会自动在目录下生成一个当前最大的值为键，存储这个新的值（客户端编号）。同时还可以使用 API 按顺序列出所有当前目录下的键值。此时这些键的值就是客户端的时序，而这些键中存储的值可以是代表客户端的编号。\n		</li>\n</ul>\n<p>\n<img alt=\"img\" src=\"/images/Go/etcd/etcd_02.png\"/>\n</p>\n<h2 id=\"autoid-1-2-3\">\n		为什么用 etcd 而不用ZooKeeper？\n	</h2>\n<p>\n		etcd 实现的这些功能，ZooKeeper都能实现。那么为什么要用 etcd 而非直接使用ZooKeeper呢？\n	</p>\n<h3 id=\"autoid-1-3-0\">\n		为什么不选择ZooKeeper？\n	</h3>\n<ol>\n<li>\n			部署维护复杂，其使用的Paxos强一致性算法复杂难懂。官方只提供了Java和C两种语言的接口。\n		</li>\n<li>\n			使用Java编写引入大量的依赖。运维人员维护起来比较麻烦。\n		</li>\n<li>\n			最近几年发展缓慢，不如etcd和consul等后起之秀。\n		</li>\n</ol>\n<h3 id=\"autoid-1-3-1\">\n		为什么选择etcd？\n	</h3>\n<ol>\n<li>\n			简单。使用 Go 语言编写部署简单；支持HTTP/JSON API,使用简单；使用 Raft 算法保证强一致性让用户易于理解。\n		</li>\n<li>\n			etcd 默认数据一更新就进行持久化。\n		</li>\n<li>\n			etcd 支持 SSL 客户端安全认证。\n		</li>\n</ol>\n<p>\n		最后，etcd 作为一个年轻的项目，正在高速迭代和开发中，这既是一个优点，也是一个缺点。优点是它的未来具有无限的可能性，缺点是无法得到大项目长时间使用的检验。然而，目前CoreOS、Kubernetes和CloudFoundry等知名项目均在生产环境中使用了etcd，所以总的来说，etcd值得你去尝试。\n	</p>\n<h2 id=\"autoid-1-3-2\">\n		etcd集群\n	</h2>\n<p>\n		etcd 作为一个高可用键值存储系统，天生就是为集群化而设计的。由于 Raft 算法在做决策时需要多数节点的投票，所以 etcd 一般部署集群推荐奇数个节点，推荐的数量为 3、5 或者 7 个节点构成一个集群。\n	</p>\n<h3 id=\"autoid-1-4-0\">\n		搭建一个3节点集群示例：\n	</h3>\n<p>\n		在每个etcd节点指定集群成员，为了区分不同的集群最好同时配置一个独一无二的token。\n	</p>\n<p>\n		下面是提前定义好的集群信息，其中n1、n2和n3表示3个不同的etcd节点。\n	</p>\n<pre class=\"line-numbers language-bash\">TOKEN<span class=\"token operator\">=</span>token-01\nCLUSTER_STATE<span class=\"token operator\">=</span>new\nCLUSTER<span class=\"token operator\">=</span>n1<span class=\"token operator\">=</span>http://10.240.0.17:2380,n2<span class=\"token operator\">=</span>http://10.240.0.18:2380,n3<span class=\"token operator\">=</span>http://10.240.0.19:2380 <span class=\"line-numbers-rows\"><span></span><span></span><span></span></span></pre>\n<p>\n		在n1这台机器上执行以下命令来启动etcd：\n	</p>\n<pre class=\"line-numbers language-bash\">etcd --data-dir<span class=\"token operator\">=</span>data.etcd --name n1 \\\n	--initial-advertise-peer-urls http://10.240.0.17:2380 --listen-peer-urls http://10.240.0.17:2380 \\\n	--advertise-client-urls http://10.240.0.17:2379 --listen-client-urls http://10.240.0.17:2379 \\\n	--initial-cluster <span class=\"token variable\">${CLUSTER}</span> \\\n	--initial-cluster-state <span class=\"token variable\">${CLUSTER_STATE}</span> --initial-cluster-token <span class=\"token variable\">${TOKEN}</span> <span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></pre>\n<p>\n		在n2这台机器上执行以下命令启动etcd：\n	</p>\n<pre class=\"line-numbers language-bash\">etcd --data-dir<span class=\"token operator\">=</span>data.etcd --name n2 \\\n	--initial-advertise-peer-urls http://10.240.0.18:2380 --listen-peer-urls http://10.240.0.18:2380 \\\n	--advertise-client-urls http://10.240.0.18:2379 --listen-client-urls http://10.240.0.18:2379 \\\n	--initial-cluster <span class=\"token variable\">${CLUSTER}</span> \\\n	--initial-cluster-state <span class=\"token variable\">${CLUSTER_STATE}</span> --initial-cluster-token <span class=\"token variable\">${TOKEN}</span> <span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></pre>\n<p>\n		在n3这台机器上执行以下命令启动etcd：\n	</p>\n<pre class=\"line-numbers language-bash\">etcd --data-dir<span class=\"token operator\">=</span>data.etcd --name n3 \\\n	--initial-advertise-peer-urls http://10.240.0.19:2380 --listen-peer-urls http://10.240.0.19:2380 \\\n	--advertise-client-urls http://10.240.0.19:2379 --listen-client-urls http://10.240.0.19:2379 \\\n	--initial-cluster <span class=\"token variable\">${CLUSTER}</span> \\\n	--initial-cluster-state <span class=\"token variable\">${CLUSTER_STATE}</span> --initial-cluster-token <span class=\"token variable\">${TOKEN}</span> <span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></pre>\n<p>\n		etcd 官网提供了一个可以公网访问的 etcd 存储地址。你可以通过如下命令得到 etcd 服务的目录，并把它作为-discovery参数使用。\n	</p>\n<pre class=\"line-numbers language-bash\"><span class=\"token function\">curl</span> https://discovery.etcd.io/new?size<span class=\"token operator\">=</span>3\nhttps://discovery.etcd.io/a81b5818e67a6ea83e9d4daea5ecbc92 <span class=\"token comment\"># grab this token</span> TOKEN<span class=\"token operator\">=</span>token-01\nCLUSTER_STATE<span class=\"token operator\">=</span>new\nDISCOVERY<span class=\"token operator\">=</span>https://discovery.etcd.io/a81b5818e67a6ea83e9d4daea5ecbc92\n\n\netcd --data-dir<span class=\"token operator\">=</span>data.etcd --name n1 \\\n	--initial-advertise-peer-urls http://10.240.0.17:2380 --listen-peer-urls http://10.240.0.17:2380 \\\n	--advertise-client-urls http://10.240.0.17:2379 --listen-client-urls http://10.240.0.17:2379 \\\n	--discovery <span class=\"token variable\">${DISCOVERY}</span> \\\n	--initial-cluster-state <span class=\"token variable\">${CLUSTER_STATE}</span> --initial-cluster-token <span class=\"token variable\">${TOKEN}</span> etcd --data-dir<span class=\"token operator\">=</span>data.etcd --name n2 \\\n	--initial-advertise-peer-urls http://10.240.0.18:2380 --listen-peer-urls http://10.240.0.18:2380 \\\n	--advertise-client-urls http://10.240.0.18:2379 --listen-client-urls http://10.240.0.18:2379 \\\n	--discovery <span class=\"token variable\">${DISCOVERY}</span> \\\n	--initial-cluster-state <span class=\"token variable\">${CLUSTER_STATE}</span> --initial-cluster-token <span class=\"token variable\">${TOKEN}</span> etcd --data-dir<span class=\"token operator\">=</span>data.etcd --name n3 \\\n	--initial-advertise-peer-urls http://10.240.0.19:2380 --listen-peer-urls http://10.240.0.19:2380 \\\n	--advertise-client-urls http://10.240.0.19:2379 --listen-client-urls http:/10.240.0.19:2379 \\\n	--discovery <span class=\"token variable\">${DISCOVERY}</span> \\\n	--initial-cluster-state <span class=\"token variable\">${CLUSTER_STATE}</span> --initial-cluster-token <span class=\"token variable\">${TOKEN}</span> <span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre>\n<p>\n		到此etcd集群就搭建起来了，可以使用etcdctl来连接etcd。\n	</p>\n<pre class=\"line-numbers language-bash\"><span class=\"token function\">export</span> ETCDCTL_API<span class=\"token operator\">=</span>3\nHOST_1<span class=\"token operator\">=</span>10.240.0.17\nHOST_2<span class=\"token operator\">=</span>10.240.0.18\nHOST_3<span class=\"token operator\">=</span>10.240.0.19\nENDPOINTS<span class=\"token operator\">=</span><span class=\"token variable\">$HOST_1</span>:2379,<span class=\"token variable\">$HOST_2</span>:2379,<span class=\"token variable\">$HOST_3</span>:2379\n\netcdctl --endpoints<span class=\"token operator\">=</span><span class=\"token variable\">$ENDPOINTS</span> member list <span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre>\n<h2 id=\"autoid-1-4-1\">\n		Go语言操作etcd\n	</h2>\n<p>\n		这里使用官方的<a href=\"https://github.com/etcd-io/etcd/tree/master/clientv3\" target=\"_blank\">etcd/clientv3</a>包来连接etcd并进行相关操作。\n	</p>\n<h3 id=\"autoid-1-5-0\">\n		安装\n	</h3>\n<pre class=\"line-numbers language-bash\">go get go.etcd.io/etcd/clientv3 <span class=\"line-numbers-rows\"><span></span></span></pre>\n<h3 id=\"autoid-1-5-1\">\n		put和get操作\n	</h3>\n<p>\n		put命令用来设置键值对数据，get命令用来根据key获取值。\n	</p>\n<pre class=\"line-numbers language-go\"><span class=\"token keyword keyword-package\">package</span> main <span class=\"token keyword keyword-import\">import</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">\"context\"</span> <span class=\"token string\">\"fmt\"</span> <span class=\"token string\">\"time\"</span> <span class=\"token string\">\"go.etcd.io/etcd/clientv3\"</span> <span class=\"token punctuation\">)</span> <span class=\"token comment\">// etcd client put/get demo</span> <span class=\"token comment\">// use etcd/clientv3</span> <span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> cli<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> clientv3<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>clientv3<span class=\"token punctuation\">.</span>Config<span class=\"token punctuation\">{</span> Endpoints<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"127.0.0.1:2379\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> DialTimeout<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// handle error!</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"connect to etcd failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-return\">return</span> <span class=\"token punctuation\">}</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"connect to etcd success\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-defer\">defer</span> cli<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// put</span> ctx<span class=\"token punctuation\">,</span> cancel <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithTimeout</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> cli<span class=\"token punctuation\">.</span><span class=\"token function\">Put</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"q1mi\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dsb\"</span><span class=\"token punctuation\">)</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"put to etcd failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-return\">return</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// get</span> ctx<span class=\"token punctuation\">,</span> cancel <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithTimeout</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span> resp<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> cli<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"q1mi\"</span><span class=\"token punctuation\">)</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get from etcd failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-return\">return</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-for\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> ev <span class=\"token operator\">:=</span> <span class=\"token keyword keyword-range\">range</span> resp<span class=\"token punctuation\">.</span>Kvs <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s:%s\\n\"</span><span class=\"token punctuation\">,</span> ev<span class=\"token punctuation\">.</span>Key<span class=\"token punctuation\">,</span> ev<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre>\n<h3 id=\"autoid-1-5-2\">\n		watch操作\n	</h3>\n<p>\n		watch用来获取未来更改的通知。\n	</p>\n<pre class=\"line-numbers language-go\"><span class=\"token keyword keyword-package\">package</span> main <span class=\"token keyword keyword-import\">import</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">\"context\"</span> <span class=\"token string\">\"fmt\"</span> <span class=\"token string\">\"time\"</span> <span class=\"token string\">\"go.etcd.io/etcd/clientv3\"</span> <span class=\"token punctuation\">)</span> <span class=\"token comment\">// watch demo</span> <span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> cli<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> clientv3<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>clientv3<span class=\"token punctuation\">.</span>Config<span class=\"token punctuation\">{</span> Endpoints<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"127.0.0.1:2379\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> DialTimeout<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"connect to etcd failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-return\">return</span> <span class=\"token punctuation\">}</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"connect to etcd success\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-defer\">defer</span> cli<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// watch key:q1mi change</span> rch <span class=\"token operator\">:=</span> cli<span class=\"token punctuation\">.</span><span class=\"token function\">Watch</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"q1mi\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// &lt;-chan WatchResponse</span> <span class=\"token keyword keyword-for\">for</span> wresp <span class=\"token operator\">:=</span> <span class=\"token keyword keyword-range\">range</span> rch <span class=\"token punctuation\">{</span> <span class=\"token keyword keyword-for\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> ev <span class=\"token operator\">:=</span> <span class=\"token keyword keyword-range\">range</span> wresp<span class=\"token punctuation\">.</span>Events <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Type: %s Key:%s Value:%s\\n\"</span><span class=\"token punctuation\">,</span> ev<span class=\"token punctuation\">.</span>Type<span class=\"token punctuation\">,</span> ev<span class=\"token punctuation\">.</span>Kv<span class=\"token punctuation\">.</span>Key<span class=\"token punctuation\">,</span> ev<span class=\"token punctuation\">.</span>Kv<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre>\n<p>\n		将上面的代码保存编译执行，此时程序就会等待etcd中q1mi这个key的变化。\n	</p>\n<p>\n		例如：我们打开终端执行以下命令修改、删除、设置q1mi这个key。\n	</p>\n<pre class=\"line-numbers language-bash\">etcd<span class=\"token operator\">&gt;</span> etcdctl.exe --endpoints<span class=\"token operator\">=</span>http://127.0.0.1:2379 put q1mi <span class=\"token string\">\"dsb2\"</span> OK\n\netcd<span class=\"token operator\">&gt;</span> etcdctl.exe --endpoints<span class=\"token operator\">=</span>http://127.0.0.1:2379 del q1mi\n1\n\netcd<span class=\"token operator\">&gt;</span> etcdctl.exe --endpoints<span class=\"token operator\">=</span>http://127.0.0.1:2379 put q1mi <span class=\"token string\">\"dsb3\"</span> OK <span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre>\n<p>\n		上面的程序都能收到如下通知。\n	</p>\n<pre class=\"line-numbers language-bash\">watch<span class=\"token operator\">&gt;</span>watch.exe\nconnect to etcd success\nType: PUT Key:q1mi Value:dsb2\nType: DELETE Key:q1mi Value:\nType: PUT Key:q1mi Value:dsb3 <span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></pre>\n<h3 id=\"autoid-1-5-3\">\n		lease租约\n	</h3>\n<pre class=\"line-numbers language-go\"><span class=\"token keyword keyword-package\">package</span> main <span class=\"token keyword keyword-import\">import</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">\"fmt\"</span> <span class=\"token string\">\"time\"</span> <span class=\"token punctuation\">)</span> <span class=\"token comment\">// etcd lease</span> <span class=\"token keyword keyword-import\">import</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">\"context\"</span> <span class=\"token string\">\"log\"</span> <span class=\"token string\">\"go.etcd.io/etcd/clientv3\"</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> cli<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> clientv3<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>clientv3<span class=\"token punctuation\">.</span>Config<span class=\"token punctuation\">{</span> Endpoints<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"127.0.0.1:2379\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> DialTimeout<span class=\"token punctuation\">:</span> time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span> log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"connect to etcd success.\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-defer\">defer</span> cli<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 创建一个5秒的租约</span> resp<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> cli<span class=\"token punctuation\">.</span><span class=\"token function\">Grant</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span> log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 5秒钟之后, /nazha/ 这个key就会被移除</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> cli<span class=\"token punctuation\">.</span><span class=\"token function\">Put</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/nazha/\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dsb\"</span><span class=\"token punctuation\">,</span> clientv3<span class=\"token punctuation\">.</span><span class=\"token function\">WithLease</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span> log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre>\n<h3 id=\"autoid-1-5-4\">\n		keepAlive\n	</h3>\n<pre class=\"line-numbers language-go\"><span class=\"token keyword keyword-package\">package</span> main <span class=\"token keyword keyword-import\">import</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">\"context\"</span> <span class=\"token string\">\"fmt\"</span> <span class=\"token string\">\"log\"</span> <span class=\"token string\">\"time\"</span> <span class=\"token string\">\"go.etcd.io/etcd/clientv3\"</span> <span class=\"token punctuation\">)</span> <span class=\"token comment\">// etcd keepAlive</span> <span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> cli<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> clientv3<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>clientv3<span class=\"token punctuation\">.</span>Config<span class=\"token punctuation\">{</span> Endpoints<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"127.0.0.1:2379\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> DialTimeout<span class=\"token punctuation\">:</span> time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span> log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"connect to etcd success.\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-defer\">defer</span> cli<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> resp<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> cli<span class=\"token punctuation\">.</span><span class=\"token function\">Grant</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span> log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> cli<span class=\"token punctuation\">.</span><span class=\"token function\">Put</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/nazha/\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dsb\"</span><span class=\"token punctuation\">,</span> clientv3<span class=\"token punctuation\">.</span><span class=\"token function\">WithLease</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span> log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// the key \'foo\' will be kept forever</span> ch<span class=\"token punctuation\">,</span> kaerr <span class=\"token operator\">:=</span> cli<span class=\"token punctuation\">.</span><span class=\"token function\">KeepAlive</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-if\">if</span> kaerr <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span> log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>kaerr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-for\">for</span> <span class=\"token punctuation\">{</span> ka <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>ch\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ttl:\"</span><span class=\"token punctuation\">,</span> ka<span class=\"token punctuation\">.</span>TTL<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre>\n<h3 id=\"autoid-1-5-5\">\n		基于etcd实现分布式锁\n	</h3>\n<p>\n		go.etcd.io/etcd/clientv3/concurrency在etcd之上实现并发操作，如分布式锁、屏障和选举。\n	</p>\n<p>\n		导入该包：\n	</p>\n<pre class=\"line-numbers language-go\"><span class=\"token keyword keyword-import\">import</span> <span class=\"token string\">\"go.etcd.io/etcd/clientv3/concurrency\"</span> <span class=\"line-numbers-rows\"><span></span></span></pre>\n<p>\n		基于etcd实现的分布式锁示例：\n	</p>\n<pre class=\"line-numbers language-go\">cli<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> clientv3<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>clientv3<span class=\"token punctuation\">.</span>Config<span class=\"token punctuation\">{</span>Endpoints<span class=\"token punctuation\">:</span> endpoints<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span> log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-defer\">defer</span> cli<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 创建两个单独的会话用来演示锁竞争</span> s1<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> concurrency<span class=\"token punctuation\">.</span><span class=\"token function\">NewSession</span><span class=\"token punctuation\">(</span>cli<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span> log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-defer\">defer</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> m1 <span class=\"token operator\">:=</span> concurrency<span class=\"token punctuation\">.</span><span class=\"token function\">NewMutex</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/my-lock/\"</span><span class=\"token punctuation\">)</span> s2<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> concurrency<span class=\"token punctuation\">.</span><span class=\"token function\">NewSession</span><span class=\"token punctuation\">(</span>cli<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span> log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-defer\">defer</span> s2<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> m2 <span class=\"token operator\">:=</span> concurrency<span class=\"token punctuation\">.</span><span class=\"token function\">NewMutex</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/my-lock/\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 会话s1获取锁</span> <span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">:=</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span> log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"acquired lock for s1\"</span><span class=\"token punctuation\">)</span> m2Locked <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-chan\">chan</span> <span class=\"token keyword keyword-struct\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-go\">go</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword keyword-defer\">defer</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>m2Locked<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 等待直到会话s1释放了/my-lock/的锁</span> <span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">:=</span> m2<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span> log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">:=</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span> log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"released lock for s1\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span>m2Locked\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"acquired lock for s2\"</span><span class=\"token punctuation\">)</span> <span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre>\n<p>\n		输出：\n	</p>\n<pre class=\"line-numbers language-bash\">acquired lock <span class=\"token keyword keyword-for\">for</span> s1\nreleased lock <span class=\"token keyword keyword-for\">for</span> s1\nacquired lock <span class=\"token keyword keyword-for\">for</span> s2 <span class=\"line-numbers-rows\"><span></span><span></span><span></span></span></pre>\n<p>\n<a href=\"https://godoc.org/go.etcd.io/etcd/clientv3/concurrency\" target=\"_blank\">查看文档了解更多</a>\n</p>\n<h3 id=\"autoid-1-5-6\">\n		其他操作\n	</h3>\n<p>\n		其他操作请查看<a href=\"https://godoc.org/go.etcd.io/etcd/clientv3\" target=\"_blank\">etcd/clientv3官方文档</a>。\n	</p>\n<p>\n		参考链接：\n	</p>\n<ul>\n<li>\n<a href=\"https://etcd.io/docs/v3.3.12/demo/\" target=\"_blank\">https://etcd.io/docs/v3.3.12/demo/</a>\n</li>\n<li>\n<a href=\"https://www.infoq.cn/article/etcd-interpretation-application-scenario-implement-principle/\" target=\"_blank\">https://www.infoq.cn/article/etcd-interpretation-application-scenario-implement-principle/</a>\n</li>\n</ul>\n</div>', 13);
INSERT INTO `blog_articledetail` VALUES (14, '<div class=\"post-content\">\n<p>\n		在 Go http包的Server中，每一个请求在都有一个对应的 goroutine 去处理。请求处理函数通常会启动额外的 goroutine 用来访问后端服务，比如数据库和RPC服务。用来处理一个请求的 goroutine 通常需要访问一些与请求特定的数据，比如终端用户的身份认证信息、验证相关的token、请求的截止时间。 当一个请求被取消或超时时，所有用来处理该请求的 goroutine 都应该迅速退出，然后系统才能释放这些 goroutine 占用的资源。\n	</p>\n<h2 id=\"autoid-0-0-0\">\n		为什么需要Context\n	</h2>\n<h3 id=\"autoid-0-1-0\">\n		基本示例\n	</h3>\n<pre class=\"line-numbers language-go\"><span class=\"token keyword keyword-package\">package</span> main <span class=\"token keyword keyword-import\">import</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">\"fmt\"</span> <span class=\"token string\">\"sync\"</span> <span class=\"token string\">\"time\"</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-var\">var</span> wg sync<span class=\"token punctuation\">.</span>WaitGroup <span class=\"token comment\">// 初始的例子</span> <span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword keyword-for\">for</span> <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"worker\"</span><span class=\"token punctuation\">)</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 如何接收外部命令实现退出</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-go\">go</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 如何优雅的实现结束子goroutine</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"over\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre>\n<h3 id=\"autoid-0-1-1\">\n		全局变量方式\n	</h3>\n<pre class=\"line-numbers language-go\"><span class=\"token keyword keyword-package\">package</span> main <span class=\"token keyword keyword-import\">import</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">\"fmt\"</span> <span class=\"token string\">\"sync\"</span> <span class=\"token string\">\"time\"</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-var\">var</span> wg sync<span class=\"token punctuation\">.</span>WaitGroup <span class=\"token keyword keyword-var\">var</span> exit <span class=\"token builtin\">bool</span> <span class=\"token comment\">// 全局变量方式存在的问题：</span> <span class=\"token comment\">// 1. 使用全局变量在跨包调用时不容易统一</span> <span class=\"token comment\">// 2. 如果worker中再启动goroutine，就不太好控制了。</span> <span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword keyword-for\">for</span> <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"worker\"</span><span class=\"token punctuation\">)</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-if\">if</span> exit <span class=\"token punctuation\">{</span> <span class=\"token keyword keyword-break\">break</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-go\">go</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// sleep3秒以免程序过快退出</span> exit <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 修改全局变量实现子goroutine的退出</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"over\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre>\n<h3 id=\"autoid-0-1-2\">\n		通道方式\n	</h3>\n<pre class=\"line-numbers language-go\"><span class=\"token keyword keyword-package\">package</span> main <span class=\"token keyword keyword-import\">import</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">\"fmt\"</span> <span class=\"token string\">\"sync\"</span> <span class=\"token string\">\"time\"</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-var\">var</span> wg sync<span class=\"token punctuation\">.</span>WaitGroup <span class=\"token comment\">// 管道方式存在的问题：</span> <span class=\"token comment\">// 1. 使用全局变量在跨包调用时不容易实现规范和统一，需要维护一个共用的channel</span> <span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span>exitChan <span class=\"token keyword keyword-chan\">chan</span> <span class=\"token keyword keyword-struct\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> LOOP<span class=\"token punctuation\">:</span> <span class=\"token keyword keyword-for\">for</span> <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"worker\"</span><span class=\"token punctuation\">)</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-select\">select</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword keyword-case\">case</span> <span class=\"token operator\">&lt;-</span>exitChan<span class=\"token punctuation\">:</span> <span class=\"token comment\">// 等待接收上级通知</span> <span class=\"token keyword keyword-break\">break</span> LOOP <span class=\"token keyword keyword-default\">default</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword keyword-var\">var</span> exitChan <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-chan\">chan</span> <span class=\"token keyword keyword-struct\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-go\">go</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span>exitChan<span class=\"token punctuation\">)</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// sleep3秒以免程序过快退出</span> exitChan <span class=\"token operator\">&lt;-</span> <span class=\"token keyword keyword-struct\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 给子goroutine发送退出信号</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>exitChan<span class=\"token punctuation\">)</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"over\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre>\n<h3 id=\"autoid-0-1-3\">\n		官方版的方案\n	</h3>\n<pre class=\"line-numbers language-go\"><span class=\"token keyword keyword-package\">package</span> main <span class=\"token keyword keyword-import\">import</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">\"context\"</span> <span class=\"token string\">\"fmt\"</span> <span class=\"token string\">\"sync\"</span> <span class=\"token string\">\"time\"</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-var\">var</span> wg sync<span class=\"token punctuation\">.</span>WaitGroup <span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> LOOP<span class=\"token punctuation\">:</span> <span class=\"token keyword keyword-for\">for</span> <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"worker\"</span><span class=\"token punctuation\">)</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-select\">select</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword keyword-case\">case</span> <span class=\"token operator\">&lt;-</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">// 等待上级通知</span> <span class=\"token keyword keyword-break\">break</span> LOOP <span class=\"token keyword keyword-default\">default</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> ctx<span class=\"token punctuation\">,</span> cancel <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithCancel</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-go\">go</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 通知子goroutine结束</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"over\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre>\n<p>\n		当子goroutine又开启另外一个goroutine时，只需要将ctx传入即可：\n	</p>\n<pre class=\"line-numbers language-go\"><span class=\"token keyword keyword-package\">package</span> main <span class=\"token keyword keyword-import\">import</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">\"context\"</span> <span class=\"token string\">\"fmt\"</span> <span class=\"token string\">\"sync\"</span> <span class=\"token string\">\"time\"</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-var\">var</span> wg sync<span class=\"token punctuation\">.</span>WaitGroup <span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword keyword-go\">go</span> <span class=\"token function\">worker2</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span> LOOP<span class=\"token punctuation\">:</span> <span class=\"token keyword keyword-for\">for</span> <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"worker\"</span><span class=\"token punctuation\">)</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-select\">select</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword keyword-case\">case</span> <span class=\"token operator\">&lt;-</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">// 等待上级通知</span> <span class=\"token keyword keyword-break\">break</span> LOOP <span class=\"token keyword keyword-default\">default</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">worker2</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> LOOP<span class=\"token punctuation\">:</span> <span class=\"token keyword keyword-for\">for</span> <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"worker2\"</span><span class=\"token punctuation\">)</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-select\">select</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword keyword-case\">case</span> <span class=\"token operator\">&lt;-</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">// 等待上级通知</span> <span class=\"token keyword keyword-break\">break</span> LOOP <span class=\"token keyword keyword-default\">default</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> ctx<span class=\"token punctuation\">,</span> cancel <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithCancel</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-go\">go</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 通知子goroutine结束</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"over\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre>\n<h2 id=\"autoid-0-1-4\">\n		Context初识\n	</h2>\n<p>\n		Go1.7加入了一个新的标准库context，它定义了Context类型，专门用来简化 对于处理单个请求的多个 goroutine 之间与请求域的数据、取消信号、截止时间等相关操作，这些操作可能涉及多个 API 调用。\n	</p>\n<p>\n		对服务器传入的请求应该创建上下文，而对服务器的传出调用应该接受上下文。它们之间的函数调用链必须传递上下文，或者可以使用WithCancel、WithDeadline、WithTimeout或WithValue创建的派生上下文。当一个上下文被取消时，它派生的所有上下文也被取消。\n	</p>\n<h2 id=\"autoid-0-2-0\">\n		Context接口\n	</h2>\n<p>\n		context.Context是一个接口，该接口定义了四个需要实现的方法。具体签名如下：\n	</p>\n<pre class=\"line-numbers language-go\"><span class=\"token keyword keyword-type\">type</span> Context <span class=\"token keyword keyword-interface\">interface</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">Deadline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>deadline time<span class=\"token punctuation\">.</span>Time<span class=\"token punctuation\">,</span> ok <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span><span class=\"token keyword keyword-chan\">chan</span> <span class=\"token keyword keyword-struct\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token function\">Err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token function\">Value</span><span class=\"token punctuation\">(</span>key <span class=\"token keyword keyword-interface\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-interface\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre>\n<p>\n		其中：\n	</p>\n<ul>\n<li>\n			Deadline方法需要返回当前Context被取消的时间，也就是完成工作的截止时间（deadline）；\n		</li>\n<li>\n			Done方法需要返回一个Channel，这个Channel会在当前工作完成或者上下文被取消之后关闭，多次调用Done方法会返回同一个Channel；\n		</li>\n<li>\n			Err方法会返回当前Context结束的原因，它只会在Done返回的Channel被关闭时才会返回非空的值；\n			<ul>\n<li>\n					如果当前Context被取消就会返回Canceled错误；\n				</li>\n<li>\n					如果当前Context超时就会返回DeadlineExceeded错误；\n				</li>\n</ul>\n</li>\n<li>\n			Value方法会从Context中返回键对应的值，对于同一个上下文来说，多次调用Value并传入相同的Key会返回相同的结果，该方法仅用于传递跨API和进程间跟请求域的数据；\n		</li>\n</ul>\n<h3 id=\"autoid-0-3-0\">\n		Background()和TODO()\n	</h3>\n<p>\n		Go内置两个函数：Background()和TODO()，这两个函数分别返回一个实现了Context接口的background和todo。我们代码中最开始都是以这两个内置的上下文对象作为最顶层的partent context，衍生出更多的子上下文对象。\n	</p>\n<p>\n		Background()主要用于main函数、初始化以及测试代码中，作为Context这个树结构的最顶层的Context，也就是根Context。\n	</p>\n<p>\n		TODO()，它目前还不知道具体的使用场景，如果我们不知道该使用什么Context的时候，可以使用这个。\n	</p>\n<p>\n		background和todo本质上都是emptyCtx结构体类型，是一个不可取消，没有设置截止时间，没有携带任何值的Context。\n	</p>\n<h2 id=\"autoid-0-3-1\">\n		With系列函数\n	</h2>\n<p>\n		此外，context包中还定义了四个With系列函数。\n	</p>\n<h3 id=\"autoid-0-4-0\">\n		WithCancel\n	</h3>\n<p>\n		WithCancel的函数签名如下：\n	</p>\n<pre class=\"line-numbers language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">WithCancel</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>ctx Context<span class=\"token punctuation\">,</span> cancel CancelFunc<span class=\"token punctuation\">)</span> <span class=\"line-numbers-rows\"><span></span></span></pre>\n<p>\n		WithCancel返回带有新Done通道的父节点的副本。当调用返回的cancel函数或当关闭父上下文的Done通道时，将关闭返回上下文的Done通道，无论先发生什么情况。\n	</p>\n<p>\n		取消此上下文将释放与其关联的资源，因此代码应该在此上下文中运行的操作完成后立即调用cancel。\n	</p>\n<pre class=\"line-numbers language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">gen</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span><span class=\"token keyword keyword-chan\">chan</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span> dst <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-chan\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> n <span class=\"token operator\">:=</span> <span class=\"token number\">1</span> <span class=\"token keyword keyword-go\">go</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword keyword-for\">for</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword keyword-select\">select</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword keyword-case\">case</span> <span class=\"token operator\">&lt;-</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword keyword-return\">return</span> <span class=\"token comment\">// return结束该goroutine，防止泄露</span> <span class=\"token keyword keyword-case\">case</span> dst <span class=\"token operator\">&lt;-</span> n<span class=\"token punctuation\">:</span> n<span class=\"token operator\">++</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-return\">return</span> dst <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> ctx<span class=\"token punctuation\">,</span> cancel <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithCancel</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-defer\">defer</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 当我们取完需要的整数后调用cancel</span> <span class=\"token keyword keyword-for\">for</span> n <span class=\"token operator\">:=</span> <span class=\"token keyword keyword-range\">range</span> <span class=\"token function\">gen</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-if\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword keyword-break\">break</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre>\n<p>\n		上面的示例代码中，gen函数在单独的goroutine中生成整数并将它们发送到返回的通道。\ngen的调用者在使用生成的整数之后需要取消上下文，以免gen启动的内部goroutine发生泄漏。\n	</p>\n<h3 id=\"autoid-0-4-1\">\n		WithDeadline\n	</h3>\n<p>\n		WithDeadline的函数签名如下：\n	</p>\n<pre class=\"line-numbers language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">WithDeadline</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">,</span> deadline time<span class=\"token punctuation\">.</span>Time<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">,</span> CancelFunc<span class=\"token punctuation\">)</span> <span class=\"line-numbers-rows\"><span></span></span></pre>\n<p>\n		返回父上下文的副本，并将deadline调整为不迟于d。如果父上下文的deadline已经早于d，则WithDeadline(parent, d)在语义上等同于父上下文。当截止日过期时，当调用返回的cancel函数时，或者当父上下文的Done通道关闭时，返回上下文的Done通道将被关闭，以最先发生的情况为准。\n	</p>\n<p>\n		取消此上下文将释放与其关联的资源，因此代码应该在此上下文中运行的操作完成后立即调用cancel。\n	</p>\n<pre class=\"line-numbers language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> d <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Millisecond<span class=\"token punctuation\">)</span> ctx<span class=\"token punctuation\">,</span> cancel <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithDeadline</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 尽管ctx会过期，但在任何情况下调用它的cancel函数都是很好的实践。</span> <span class=\"token comment\">// 如果不这样做，可能会使上下文及其父类存活的时间超过必要的时间。</span> <span class=\"token keyword keyword-defer\">defer</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-select\">select</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword keyword-case\">case</span> <span class=\"token operator\">&lt;-</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">After</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"overslept\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-case\">case</span> <span class=\"token operator\">&lt;-</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre>\n<p>\n		上面的代码中，定义了一个50毫秒之后过期的deadline，然后我们调用context.WithDeadline(context.Background(), d)得到一个上下文（ctx）和一个取消函数（cancel），然后使用一个select让主程序陷入等待：等待1秒后打印overslept退出或者等待ctx过期后退出。\n因为ctx50秒后就过期，所以ctx.Done()会先接收到值，上面的代码会打印ctx.Err()取消原因。\n	</p>\n<h3 id=\"autoid-0-4-2\">\n		WithTimeout\n	</h3>\n<p>\n		WithTimeout的函数签名如下：\n	</p>\n<pre class=\"line-numbers language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">WithTimeout</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">,</span> timeout time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">,</span> CancelFunc<span class=\"token punctuation\">)</span> <span class=\"line-numbers-rows\"><span></span></span></pre>\n<p>\n		WithTimeout返回WithDeadline(parent, time.Now().Add(timeout))。\n	</p>\n<p>\n		取消此上下文将释放与其相关的资源，因此代码应该在此上下文中运行的操作完成后立即调用cancel，通常用于数据库或者网络连接的超时控制。具体示例如下：\n	</p>\n<pre class=\"line-numbers language-go\"><span class=\"token keyword keyword-package\">package</span> main <span class=\"token keyword keyword-import\">import</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">\"context\"</span> <span class=\"token string\">\"fmt\"</span> <span class=\"token string\">\"sync\"</span> <span class=\"token string\">\"time\"</span> <span class=\"token punctuation\">)</span> <span class=\"token comment\">// context.WithTimeout</span> <span class=\"token keyword keyword-var\">var</span> wg sync<span class=\"token punctuation\">.</span>WaitGroup <span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> LOOP<span class=\"token punctuation\">:</span> <span class=\"token keyword keyword-for\">for</span> <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"db connecting ...\"</span><span class=\"token punctuation\">)</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Millisecond <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 假设正常连接数据库耗时10毫秒</span> <span class=\"token keyword keyword-select\">select</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword keyword-case\">case</span> <span class=\"token operator\">&lt;-</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">// 50毫秒后自动调用</span> <span class=\"token keyword keyword-break\">break</span> LOOP <span class=\"token keyword keyword-default\">default</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"worker done!\"</span><span class=\"token punctuation\">)</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 设置一个50毫秒的超时</span> ctx<span class=\"token punctuation\">,</span> cancel <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithTimeout</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>Millisecond<span class=\"token operator\">*</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-go\">go</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 通知子goroutine结束</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"over\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre>\n<h3 id=\"autoid-0-4-3\">\n		WithValue\n	</h3>\n<p>\n		WithValue函数能够将请求作用域的数据与 Context 对象建立关系。声明如下：\n	</p>\n<pre class=\"line-numbers language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">WithValue</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> val <span class=\"token keyword keyword-interface\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> Context <span class=\"line-numbers-rows\"><span></span></span></pre>\n<p>\n		WithValue返回父节点的副本，其中与key关联的值为val。\n	</p>\n<p>\n		仅对API和进程间传递请求域的数据使用上下文值，而不是使用它来传递可选参数给函数。\n	</p>\n<p>\n		所提供的键必须是可比较的，并且不应该是string类型或任何其他内置类型，以避免使用上下文在包之间发生冲突。WithValue的用户应该为键定义自己的类型。为了避免在分配给interface{}时进行分配，上下文键通常具有具体类型struct{}。或者，导出的上下文关键变量的静态类型应该是指针或接口。\n	</p>\n<pre class=\"line-numbers language-go\"><span class=\"token keyword keyword-package\">package</span> main <span class=\"token keyword keyword-import\">import</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">\"context\"</span> <span class=\"token string\">\"fmt\"</span> <span class=\"token string\">\"sync\"</span> <span class=\"token string\">\"time\"</span> <span class=\"token punctuation\">)</span> <span class=\"token comment\">// context.WithValue</span> <span class=\"token keyword keyword-type\">type</span> TraceCode <span class=\"token builtin\">string</span> <span class=\"token keyword keyword-var\">var</span> wg sync<span class=\"token punctuation\">.</span>WaitGroup <span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> key <span class=\"token operator\">:=</span> <span class=\"token function\">TraceCode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TRACE_CODE\"</span><span class=\"token punctuation\">)</span> traceCode<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Value</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 在子goroutine中获取trace code</span> <span class=\"token keyword keyword-if\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invalid trace code\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> LOOP<span class=\"token punctuation\">:</span> <span class=\"token keyword keyword-for\">for</span> <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"worker, trace code:%s\\n\"</span><span class=\"token punctuation\">,</span> traceCode<span class=\"token punctuation\">)</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Millisecond <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 假设正常连接数据库耗时10毫秒</span> <span class=\"token keyword keyword-select\">select</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword keyword-case\">case</span> <span class=\"token operator\">&lt;-</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">// 50毫秒后自动调用</span> <span class=\"token keyword keyword-break\">break</span> LOOP <span class=\"token keyword keyword-default\">default</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"worker done!\"</span><span class=\"token punctuation\">)</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 设置一个50毫秒的超时</span> ctx<span class=\"token punctuation\">,</span> cancel <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithTimeout</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>Millisecond<span class=\"token operator\">*</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 在系统的入口中设置trace code传递给后续启动的goroutine实现日志数据聚合</span> ctx <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithValue</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token function\">TraceCode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TRACE_CODE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"12512312234\"</span><span class=\"token punctuation\">)</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-go\">go</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 通知子goroutine结束</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"over\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre>\n<h2 id=\"autoid-0-4-4\">\n		使用Context的注意事项\n	</h2>\n<ul>\n<li>\n			推荐以参数的方式显示传递Context\n		</li>\n<li>\n			以Context作为参数的函数方法，应该把Context作为第一个参数。\n		</li>\n<li>\n			给一个函数方法传递Context的时候，不要传递nil，如果不知道传递什么，就使用context.TODO()\n		</li>\n<li>\n			Context的Value相关方法应该传递请求域的必要数据，不应该用于传递可选参数\n		</li>\n<li>\n			Context是线程安全的，可以放心的在多个goroutine中传递\n		</li>\n</ul>\n<h2 id=\"autoid-0-5-0\">\n		客户端超时取消示例\n	</h2>\n<p>\n		调用服务端API时如何在客户端实现超时控制？\n	</p>\n<h3 id=\"autoid-0-6-0\">\n		server端\n	</h3>\n<pre class=\"line-numbers language-go\"><span class=\"token comment\">// context_timeout/server/main.go</span> <span class=\"token keyword keyword-package\">package</span> main <span class=\"token keyword keyword-import\">import</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">\"fmt\"</span> <span class=\"token string\">\"math/rand\"</span> <span class=\"token string\">\"net/http\"</span> <span class=\"token string\">\"time\"</span> <span class=\"token punctuation\">)</span> <span class=\"token comment\">// server端，随机出现慢响应</span> <span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">indexHandler</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> number <span class=\"token operator\">:=</span> rand<span class=\"token punctuation\">.</span><span class=\"token function\">Intn</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-if\">if</span> number <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 耗时10秒的慢响应</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token string\">\"slow response\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-return\">return</span> <span class=\"token punctuation\">}</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprint</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token string\">\"quick response\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> indexHandler<span class=\"token punctuation\">)</span> err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":8000\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre>\n<h3 id=\"autoid-0-6-1\">\n		client端\n	</h3>\n<pre class=\"line-numbers language-go\"><span class=\"token comment\">// context_timeout/client/main.go</span> <span class=\"token keyword keyword-package\">package</span> main <span class=\"token keyword keyword-import\">import</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">\"context\"</span> <span class=\"token string\">\"fmt\"</span> <span class=\"token string\">\"io/ioutil\"</span> <span class=\"token string\">\"net/http\"</span> <span class=\"token string\">\"sync\"</span> <span class=\"token string\">\"time\"</span> <span class=\"token punctuation\">)</span> <span class=\"token comment\">// 客户端</span> <span class=\"token keyword keyword-type\">type</span> respData <span class=\"token keyword keyword-struct\">struct</span> <span class=\"token punctuation\">{</span> resp <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Response\n	err <span class=\"token builtin\">error</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">doCall</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> transport <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span>Transport<span class=\"token punctuation\">{</span> <span class=\"token comment\">// 请求频繁可定义全局的client对象并启用长链接</span> <span class=\"token comment\">// 请求不频繁使用短链接</span> DisableKeepAlives<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">}</span> client <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span>Client<span class=\"token punctuation\">{</span> Transport<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>transport<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">}</span> respChan <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-chan\">chan</span> <span class=\"token operator\">*</span>respData<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> req<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">NewRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"http://127.0.0.1:8000/\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"new requestg failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-return\">return</span> <span class=\"token punctuation\">}</span> req <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">WithContext</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 使用带超时的ctx创建一个新的client request</span> <span class=\"token keyword keyword-var\">var</span> wg sync<span class=\"token punctuation\">.</span>WaitGroup\n	wg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-defer\">defer</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-go\">go</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> resp<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">Do</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"client.do resp:%v, err:%v\\n\"</span><span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span> rd <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>respData<span class=\"token punctuation\">{</span> resp<span class=\"token punctuation\">:</span> resp<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">:</span> err<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">}</span> respChan <span class=\"token operator\">&lt;-</span> rd\n		wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-select\">select</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword keyword-case\">case</span> <span class=\"token operator\">&lt;-</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">//transport.CancelRequest(req)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"call api timeout\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-case\">case</span> result <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>respChan<span class=\"token punctuation\">:</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"call server api success\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-if\">if</span> result<span class=\"token punctuation\">.</span>err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"call server api failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-return\">return</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-defer\">defer</span> result<span class=\"token punctuation\">.</span>resp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> data<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> ioutil<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAll</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>resp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"resp:%v\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 定义一个100毫秒的超时</span> ctx<span class=\"token punctuation\">,</span> cancel <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithTimeout</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>Millisecond<span class=\"token operator\">*</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-defer\">defer</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 调用cancel释放子goroutine资源</span> <span class=\"token function\">doCall</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre>\n</div>', 14);
INSERT INTO `blog_articledetail` VALUES (15, '<div class=\"post-content\">\n<p>本文简单介绍了ES、Kibana和Go语言操作ES。</p>\n<h2 id=\"autoid-0-0-0\">Elasticsearch</h2>\n<h3 id=\"autoid-0-1-0\">介绍</h3>\n<p>Elasticsearch（ES）是一个基于Lucene构建的开源、分布式、RESTful接口的全文搜索引擎。Elasticsearch还是一个分布式文档数据库，其中每个字段均可被索引，而且每个字段的数据均可被搜索，ES能够横向扩展至数以百计的服务器存储以及处理PB级的数据。可以在极短的时间内存储、搜索和分析大量的数据。通常作为具有复杂搜索场景情况下的核心发动机。</p>\n<h3 id=\"autoid-0-1-1\">Elasticsearch能做什么</h3>\n<ol>\n<li>当你经营一家网上商店，你可以让你的客户搜索你卖的商品。在这种情况下，你可以使用ElasticSearch来存储你的整个产品目录和库存信息，为客户提供精准搜索，可以为客户推荐相关商品。</li>\n<li>当你想收集日志或者交易数据的时候，需要分析和挖掘这些数据，寻找趋势，进行统计，总结，或发现异常。在这种情况下，你可以使用Logstash或者其他工具来进行收集数据，当这引起数据存储到ElasticsSearch中。你可以搜索和汇总这些数据，找到任何你感兴趣的信息。</li>\n<li>对于程序员来说，比较有名的案例是GitHub，GitHub的搜索是基于ElasticSearch构建的，在github.com/search页面，你可以搜索项目、用户、issue、pull request，还有代码。共有40~50个索引库，分别用于索引网站需要跟踪的各种数据。虽然只索引项目的主分支（master），但这个数据量依然巨大，包括20亿个索引文档，30TB的索引文件。</li>\n</ol>\n<h3 id=\"autoid-0-1-2\">Elasticsearch基本概念</h3>\n<h4 id=\"near-realtime-nrt-几乎实时\">Near Realtime(NRT) 几乎实时</h4>\n<p>Elasticsearch是一个几乎实时的搜索平台。意思是，从索引一个文档到这个文档可被搜索只需要一点点的延迟，这个时间一般为毫秒级。</p>\n<h4 id=\"cluster-集群\">Cluster 集群</h4>\n<p>群集是一个或多个节点（服务器）的集合， 这些节点共同保存整个数据，并在所有节点上提供联合索引和搜索功能。一个集群由一个唯一集群ID确定，并指定一个集群名（默认为“elasticsearch”）。该集群名非常重要，因为节点可以通过这个集群名加入群集，一个节点只能是群集的一部分。</p>\n<p>确保在不同的环境中不要使用相同的群集名称，否则可能会导致连接错误的群集节点。例如，你可以使用logging-dev、logging-stage、logging-prod分别为开发、阶段产品、生产集群做记录。</p>\n<h4 id=\"node节点\">Node节点</h4>\n<p>节点是单个服务器实例，它是群集的一部分，可以存储数据，并参与群集的索引和搜索功能。就像一个集群，节点的名称默认为一个随机的通用唯一标识符（UUID），确定在启动时分配给该节点。如果不希望默认，可以定义任何节点名。这个名字对管理很重要，目的是要确定你的网络服务器对应于你的ElasticSearch群集节点。</p>\n<p>我们可以通过群集名配置节点以连接特定的群集。默认情况下，每个节点设置加入名为“elasticSearch”的集群。这意味着如果你启动多个节点在网络上，假设他们能发现彼此都会自动形成和加入一个名为“elasticsearch”的集群。</p>\n<p>在单个群集中，你可以拥有尽可能多的节点。此外，如果“elasticsearch”在同一个网络中，没有其他节点正在运行，从单个节点的默认情况下会形成一个新的单节点名为”elasticsearch”的集群。</p>\n<h4 id=\"index索引\">Index索引</h4>\n<p>索引是具有相似特性的文档集合。例如，可以为客户数据提供索引，为产品目录建立另一个索引，以及为订单数据建立另一个索引。索引由名称（必须全部为小写）标识，该名称用于在对其中的文档执行索引、搜索、更新和删除操作时引用索引。在单个群集中，你可以定义尽可能多的索引。</p>\n<h4 id=\"type类型\">Type类型</h4>\n<p>在索引中，可以定义一个或多个类型。类型是索引的逻辑类别/分区，其语义完全取决于你。一般来说，类型定义为具有公共字段集的文档。例如，假设你运行一个博客平台，并将所有数据存储在一个索引中。在这个索引中，你可以为用户数据定义一种类型，为博客数据定义另一种类型，以及为注释数据定义另一类型。</p>\n<h4 id=\"document文档\">Document文档</h4>\n<p>文档是可以被索引的信息的基本单位。例如，你可以为单个客户提供一个文档，单个产品提供另一个文档，以及单个订单提供另一个文档。本文件的表示形式为JSON（JavaScript Object Notation）格式，这是一种非常普遍的互联网数据交换格式。</p>\n<p>在索引/类型中，你可以存储尽可能多的文档。请注意，尽管文档物理驻留在索引中，文档实际上必须索引或分配到索引中的类型。</p>\n<h4 id=\"shards-replicas分片与副本\">Shards &amp; Replicas分片与副本</h4>\n<p>索引可以存储大量的数据，这些数据可能超过单个节点的硬件限制。例如，十亿个文件占用磁盘空间1TB的单指标可能不适合对单个节点的磁盘或可能太慢服务仅从单个节点的搜索请求。</p>\n<p>为了解决这一问题，Elasticsearch提供细分你的指标分成多个块称为分片的能力。当你创建一个索引，你可以简单地定义你想要的分片数量。每个分片本身是一个全功能的、独立的“指数”，可以托管在集群中的任何节点。</p>\n<p><strong>Shards分片的重要性主要体现在以下两个特征：</strong></p>\n<ol>\n<li>分片允许你水平拆分或缩放内容的大小</li>\n<li>分片允许你分配和并行操作的碎片（可能在多个节点上）从而提高性能/吞吐量\n这个机制中的碎片是分布式的以及其文件汇总到搜索请求是完全由ElasticSearch管理，对用户来说是透明的。</li>\n</ol>\n<p>在同一个集群网络或云环境上，故障是任何时候都会出现的，拥有一个故障转移机制以防分片和节点因为某些原因离线或消失是非常有用的，并且被强烈推荐。为此，Elasticsearch允许你创建一个或多个拷贝，你的索引分片进入所谓的副本或称作复制品的分片，简称Replicas。</p>\n<p><strong>Replicas的重要性主要体现在以下两个特征：</strong></p>\n<ol>\n<li>副本为分片或节点失败提供了高可用性。为此，需要注意的是，一个副本的分片不会分配在同一个节点作为原始的或主分片，副本是从主分片那里复制过来的。</li>\n<li>副本允许用户扩展你的搜索量或吞吐量，因为搜索可以在所有副本上并行执行。</li>\n</ol>\n<h4 id=\"es基本概念与关系型数据库的比较\">ES基本概念与关系型数据库的比较</h4>\n<table>\n<thead>\n<tr>\n<th>ES概念</th>\n<th>关系型数据库</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Index（索引）支持全文检索</td>\n<td>Database（数据库）</td>\n</tr>\n<tr>\n<td>Type（类型）</td>\n<td>Table（表）</td>\n</tr>\n<tr>\n<td>Document（文档），不同文档可以有不同的字段集合</td>\n<td>Row（数据行）</td>\n</tr>\n<tr>\n<td>Field（字段）</td>\n<td>Column（数据列）</td>\n</tr>\n<tr>\n<td>Mapping（映射）</td>\n<td>Schema（模式）</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"autoid-0-1-3\">ES API</h2>\n<p>以下示例使用<code>curl</code>演示。</p>\n<h3 id=\"autoid-0-2-0\">查看健康状态</h3>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -X GET 127.0.0.1:9200/_cat/health?v\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>输出：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">epoch      timestamp cluster       status node.total node.data shards pri relo init unassign pending_tasks max_task_wait_time active_shards_percent\n1564726309 06:11:49  elasticsearch yellow          1         1      3   3    0    0        1             0                  -                 75.0%\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"autoid-0-2-1\">查询当前es集群中所有的indices</h3>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -X GET 127.0.0.1:9200/_cat/indices?v\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>输出：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">health status index                uuid                   pri rep docs.count docs.deleted store.size pri.store.size\ngreen  <span class=\"token function\">open</span>   .kibana_task_manager LUo-IxjDQdWeAbR-SYuYvQ   1   0          2            0     45.5kb         45.5kb\ngreen  <span class=\"token function\">open</span>   .kibana_1            PLvyZV1bRDWex05xkOrNNg   1   0          4            1     23.9kb         23.9kb\nyellow <span class=\"token function\">open</span>   user                 o42mIpDeSgSWZ6eARWUfKw   1   1          0            0       283b           283b\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"autoid-0-2-2\">创建索引</h3>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -X PUT 127.0.0.1:9200/www\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>输出：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">{</span><span class=\"token string\">\"acknowledged\"</span>:true,<span class=\"token string\">\"shards_acknowledged\"</span>:true,<span class=\"token string\">\"index\"</span><span class=\"token keyword keyword-:\">:</span><span class=\"token string\">\"www\"</span><span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"autoid-0-2-3\">删除索引</h3>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -X DELETE 127.0.0.1:9200/www\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>输出：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">{</span><span class=\"token string\">\"acknowledged\"</span>:true<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"autoid-0-2-4\">插入记录</h3>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -H <span class=\"token string\">\"ContentType:application/json\"</span> -X POST 127.0.0.1:9200/user/person -d <span class=\"token string\">\'\n{\n	\"name\": \"dsb\",\n	\"age\": 9000,\n	\"married\": true\n}\'</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>输出：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"_index\"</span><span class=\"token keyword keyword-:\">:</span> <span class=\"token string\">\"user\"</span>,\n    <span class=\"token string\">\"_type\"</span><span class=\"token keyword keyword-:\">:</span> <span class=\"token string\">\"person\"</span>,\n    <span class=\"token string\">\"_id\"</span><span class=\"token keyword keyword-:\">:</span> <span class=\"token string\">\"MLcwUWwBvEa8j5UrLZj4\"</span>,\n    <span class=\"token string\">\"_version\"</span><span class=\"token keyword keyword-:\">:</span> 1,\n    <span class=\"token string\">\"result\"</span><span class=\"token keyword keyword-:\">:</span> <span class=\"token string\">\"created\"</span>,\n    <span class=\"token string\">\"_shards\"</span><span class=\"token keyword keyword-:\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"total\"</span><span class=\"token keyword keyword-:\">:</span> 2,\n        <span class=\"token string\">\"successful\"</span><span class=\"token keyword keyword-:\">:</span> 1,\n        <span class=\"token string\">\"failed\"</span><span class=\"token keyword keyword-:\">:</span> 0\n    <span class=\"token punctuation\">}</span>,\n    <span class=\"token string\">\"_seq_no\"</span><span class=\"token keyword keyword-:\">:</span> 3,\n    <span class=\"token string\">\"_primary_term\"</span><span class=\"token keyword keyword-:\">:</span> 1\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>也可以使用PUT方法，但是需要传入id</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -H <span class=\"token string\">\"ContentType:application/json\"</span> -X PUT 127.0.0.1:9200/user/person/4 -d <span class=\"token string\">\'\n{\n	\"name\": \"sb\",\n	\"age\": 9,\n	\"married\": false\n}\'</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"autoid-0-2-5\">检索</h3>\n<p>Elasticsearch的检索语法比较特别，使用GET方法携带JSON格式的查询条件。</p>\n<p>全检索：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -X GET 127.0.0.1:9200/user/person/_search\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>按条件检索：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -H <span class=\"token string\">\"ContentType:application/json\"</span> -X PUT 127.0.0.1:9200/user/person/4 -d <span class=\"token string\">\'\n{\n	\"query\":{\n		\"match\": {\"name\": \"sb\"}\n	}	\n}\'</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>ElasticSearch默认一次最多返回10条结果，可以像下面的示例通过size字段来设置返回结果的数目。</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -H <span class=\"token string\">\"ContentType:application/json\"</span> -X PUT 127.0.0.1:9200/user/person/4 -d <span class=\"token string\">\'\n{\n	\"query\":{\n		\"match\": {\"name\": \"sb\"},\n		\"size\": 2\n	}	\n}\'</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"autoid-0-2-6\">Go操作Elasticsearch</h2>\n<h3 id=\"autoid-0-3-0\">elastic client</h3>\n<p>我们使用第三方库<a href=\"https://github.com/olivere/elastic\" target=\"_blank\">https://github.com/olivere/elastic</a>来连接ES并进行操作。</p>\n<p>注意下载与你的ES相同版本的client，例如我们这里使用的ES是7.2.1的版本，那么我们下载的client也要与之对应为<code>github.com/olivere/elastic/v7</code>。</p>\n<p>使用<code>go.mod</code>来管理依赖：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\">require <span class=\"token punctuation\">(</span>\n    github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>olivere<span class=\"token operator\">/</span>elastic<span class=\"token operator\">/</span>v7 v7<span class=\"token punctuation\">.</span><span class=\"token number\">0.4</span>\n<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>简单示例：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-package\">package</span> main\n\n<span class=\"token keyword keyword-import\">import</span> <span class=\"token punctuation\">(</span>\n	<span class=\"token string\">\"context\"</span>\n	<span class=\"token string\">\"fmt\"</span>\n\n	<span class=\"token string\">\"github.com/olivere/elastic/v7\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Elasticsearch demo</span>\n\n<span class=\"token keyword keyword-type\">type</span> Person <span class=\"token keyword keyword-struct\">struct</span> <span class=\"token punctuation\">{</span>\n	Name    <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"name\"`</span>\n	Age     <span class=\"token builtin\">int</span>    <span class=\"token string\">`json:\"age\"`</span>\n	Married <span class=\"token builtin\">bool</span>   <span class=\"token string\">`json:\"married\"`</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	client<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> elastic<span class=\"token punctuation\">.</span><span class=\"token function\">NewClient</span><span class=\"token punctuation\">(</span>elastic<span class=\"token punctuation\">.</span><span class=\"token function\">SetURL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://192.168.1.7:9200\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		<span class=\"token comment\">// Handle error</span>\n		<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span>\n\n	fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"connect to es success\"</span><span class=\"token punctuation\">)</span>\n	p1 <span class=\"token operator\">:=</span> Person<span class=\"token punctuation\">{</span>Name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"rion\"</span><span class=\"token punctuation\">,</span> Age<span class=\"token punctuation\">:</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> Married<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span>\n	put1<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">Index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n		<span class=\"token function\">Index</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n		<span class=\"token function\">BodyJson</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n		<span class=\"token function\">Do</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		<span class=\"token comment\">// Handle error</span>\n		<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span>\n	fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Indexed user %s to index %s, type %s\\n\"</span><span class=\"token punctuation\">,</span> put1<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">,</span> put1<span class=\"token punctuation\">.</span>Index<span class=\"token punctuation\">,</span> put1<span class=\"token punctuation\">.</span>Type<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>更多使用详见文档：<a href=\"https://godoc.org/github.com/olivere/elastic\" target=\"_blank\">https://godoc.org/github.com/olivere/elastic</a></p>\n</div>', 15);
INSERT INTO `blog_articledetail` VALUES (16, '<div class=\"post-content\">\n<p><code>Gin</code>是一个用Go语言编写的web框架。它是一个类似于<code>martini</code>但拥有更好性能的API框架, 由于使用了<code>httprouter</code>，速度提高了近40倍。 如果你是性能和高效的追求者, 你会爱上<code>Gin</code>。</p>\n<h2 id=\"autoid-0-0-0\">Gin框架介绍</h2>\n<p>Go世界里最流行的Web框架，<a href=\"https://github.com/gin-gonic/gin\" target=\"_blank\">Github</a>上有<code>32K+</code>star。\n基于<a href=\"https://github.com/julienschmidt/httprouter\" target=\"_blank\">httprouter</a>开发的Web框架。\n<a href=\"https://gin-gonic.com/zh-cn/docs/\" target=\"_blank\">中文文档</a>齐全，简单易用的轻量级框架。</p>\n<h2 id=\"autoid-0-1-0\">Gin框架安装与使用</h2>\n<h3 id=\"autoid-0-2-0\">安装</h3>\n<p>下载并安装<code>Gin</code>:</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">go get -u github.com/gin-gonic/gin\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"autoid-0-2-1\">第一个Gin示例：</h3>\n<pre class=\"line-numbers language-golang\"><code class=\"language-golang\">package main\n\nimport (\n	\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n	// 创建一个默认的路由引擎\n	r := gin.Default()\n	// GET：请求方式；/hello：请求的路径\n	// 当客户端以GET方法请求/hello路径时，会执行后面的匿名函数\n	r.GET(\"/hello\", func(c *gin.Context) {\n		// c.JSON：返回JSON格式的数据\n		c.JSON(200, gin.H{\n			\"message\": \"Hello world!\",\n		})\n	})\n	// 启动HTTP服务，默认在0.0.0.0:8080启动服务\n	r.Run()\n}\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>将上面的代码保存并编译执行，然后使用浏览器打开<code>127.0.0.1:8080/hello</code>就能看到一串JSON字符串。</p>\n<h2 id=\"autoid-0-2-2\">RESTful API</h2>\n<p>REST与技术无关，代表的是一种软件架构风格，REST是Representational State Transfer的简称，中文翻译为“表征状态转移”或“表现层状态转化”。</p>\n<p>推荐阅读<a href=\"http://www.ruanyifeng.com/blog/2011/09/restful.html\" target=\"_blank\">阮一峰 理解RESTful架构</a></p>\n<p>简单来说，REST的含义就是客户端与Web服务器之间进行交互的时候，使用HTTP协议中的4个请求方法代表不同的动作。</p>\n<ul>\n<li><code>GET</code>用来获取资源</li>\n<li><code>POST</code>用来新建资源</li>\n<li><code>PUT</code>用来更新资源</li>\n<li><code>DELETE</code>用来删除资源。</li>\n</ul>\n<p>只要API程序遵循了REST风格，那就可以称其为RESTful API。目前在前后端分离的架构中，前后端基本都是通过RESTful API来进行交互。</p>\n<p>例如，我们现在要编写一个管理书籍的系统，我们可以查询对一本书进行查询、创建、更新和删除等操作，我们在编写程序的时候就要设计客户端浏览器与我们Web服务端交互的方式和路径。按照经验我们通常会设计成如下模式：</p>\n<table>\n<thead>\n<tr>\n<th>请求方法</th>\n<th>URL</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GET</td>\n<td>/book</td>\n<td>查询书籍信息</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>/create_book</td>\n<td>创建书籍记录</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>/update_book</td>\n<td>更新书籍信息</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>/delete_book</td>\n<td>删除书籍信息</td>\n</tr>\n</tbody>\n</table>\n<p>同样的需求我们按照RESTful API设计如下：</p>\n<table>\n<thead>\n<tr>\n<th>请求方法</th>\n<th>URL</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GET</td>\n<td>/book</td>\n<td>查询书籍信息</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>/book</td>\n<td>创建书籍记录</td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>/book</td>\n<td>更新书籍信息</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>/book</td>\n<td>删除书籍信息</td>\n</tr>\n</tbody>\n</table>\n<p>Gin框架支持开发RESTful API的开发。</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	r <span class=\"token operator\">:=</span> gin<span class=\"token punctuation\">.</span><span class=\"token function\">Default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	r<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/book\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n		c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span>\n			<span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span>\n		<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n	r<span class=\"token punctuation\">.</span><span class=\"token function\">POST</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/book\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n		c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span>\n			<span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span>\n		<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n	r<span class=\"token punctuation\">.</span><span class=\"token function\">PUT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/book\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n		c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span>\n			<span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"PUT\"</span><span class=\"token punctuation\">,</span>\n		<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n	r<span class=\"token punctuation\">.</span><span class=\"token function\">DELETE</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/book\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n		c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span>\n			<span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"DELETE\"</span><span class=\"token punctuation\">,</span>\n		<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>开发RESTful API的时候我们通常使用<a href=\"https://www.getpostman.com/\" target=\"_blank\">Postman</a>来作为客户端的测试工具。</p>\n<h2 id=\"autoid-0-3-0\">Gin渲染</h2>\n<h3 id=\"autoid-0-4-0\">HTML渲染</h3>\n<p>我们首先定义一个存放模板文件的<code>templates</code>文件夹，然后在其内部按照业务分别定义一个<code>posts</code>文件夹和一个<code>users</code>文件夹。\n<code>posts/index.html</code>文件的内容如下：</p>\n<pre class=\"line-numbers language-template\"><code class=\"language-template\">{{define \"posts/index.html\"}}\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt;\n    &lt;title&gt;posts/index&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    {{.title}}\n&lt;/body&gt;\n&lt;/html&gt;\n{{end}}\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>users/index.html</code>文件的内容如下：</p>\n<pre class=\"line-numbers language-template\"><code class=\"language-template\">{{define \"users/index.html\"}}\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt;\n    &lt;title&gt;users/index&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    {{.title}}\n&lt;/body&gt;\n&lt;/html&gt;\n{{end}}\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Gin框架中使用<code>LoadHTMLGlob()</code>或者<code>LoadHTMLFiles()</code>方法进行HTML模板渲染。</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	r <span class=\"token operator\">:=</span> gin<span class=\"token punctuation\">.</span><span class=\"token function\">Default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	r<span class=\"token punctuation\">.</span><span class=\"token function\">LoadHTMLGlob</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"templates/**/*\"</span><span class=\"token punctuation\">)</span>\n	<span class=\"token comment\">//r.LoadHTMLFiles(\"templates/posts/index.html\", \"templates/users/index.html\")</span>\n	r<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/posts/index\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n		c<span class=\"token punctuation\">.</span><span class=\"token function\">HTML</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> <span class=\"token string\">\"posts/index.html\"</span><span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span>\n			<span class=\"token string\">\"title\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"posts/index\"</span><span class=\"token punctuation\">,</span>\n		<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n	r<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"users/index\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n		c<span class=\"token punctuation\">.</span><span class=\"token function\">HTML</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> <span class=\"token string\">\"users/index.html\"</span><span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span>\n			<span class=\"token string\">\"title\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"users/index\"</span><span class=\"token punctuation\">,</span>\n		<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n	r<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":8080\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"autoid-0-4-1\">自定义模板函数</h3>\n<p>定义一个不转义相应内容的<code>safe</code>模板函数如下：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	router <span class=\"token operator\">:=</span> gin<span class=\"token punctuation\">.</span><span class=\"token function\">Default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	router<span class=\"token punctuation\">.</span><span class=\"token function\">SetFuncMap</span><span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">.</span>FuncMap<span class=\"token punctuation\">{</span>\n		<span class=\"token string\">\"safe\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>str <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> template<span class=\"token punctuation\">.</span>HTML<span class=\"token punctuation\">{</span>\n			<span class=\"token keyword keyword-return\">return</span> template<span class=\"token punctuation\">.</span><span class=\"token function\">HTML</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>\n		<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n	<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n	router<span class=\"token punctuation\">.</span><span class=\"token function\">LoadHTMLFiles</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./index.tmpl\"</span><span class=\"token punctuation\">)</span>\n\n	router<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/index\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n		c<span class=\"token punctuation\">.</span><span class=\"token function\">HTML</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> <span class=\"token string\">\"index.tmpl\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;a href=\'https://liwenzhou.com\'&gt;李文周的博客&lt;/a&gt;\"</span><span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n	router<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":8080\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在<code>index.tmpl</code>中使用定义好的<code>safe</code>模板函数：</p>\n<pre class=\"line-numbers language-template\"><code class=\"language-template\">&lt;!DOCTYPE html&gt;\n&lt;html lang=\"zh-CN\"&gt;\n&lt;head&gt;\n    &lt;title&gt;修改模板引擎的标识符&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div&gt;{{ . | safe }}&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"autoid-0-4-2\">静态文件处理</h3>\n<p>当我们渲染的HTML文件中引用了静态文件时，我们只需要按照以下方式在渲染页面前调用<code>gin.Static</code>方法即可。</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	r <span class=\"token operator\">:=</span> gin<span class=\"token punctuation\">.</span><span class=\"token function\">Default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	r<span class=\"token punctuation\">.</span><span class=\"token function\">Static</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/static\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./static\"</span><span class=\"token punctuation\">)</span>\n	r<span class=\"token punctuation\">.</span><span class=\"token function\">LoadHTMLGlob</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"templates/**/*\"</span><span class=\"token punctuation\">)</span>\n   <span class=\"token comment\">// ...</span>\n	r<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":8080\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"autoid-0-4-3\">使用模板继承</h3>\n<p>Gin框架默认都是使用单模板，如果需要使用<code>block template</code>功能，可以通过<code>\"github.com/gin-contrib/multitemplate\"</code>库实现，具体示例如下：</p>\n<p>首先，假设我们项目目录下的templates文件夹下有以下模板文件，其中<code>home.tmpl</code>和<code>index.tmpl</code>继承了<code>base.tmpl</code>：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">templates\n├── includes\n│   ├── home.tmpl\n│   └── index.tmpl\n├── layouts\n│   └── base.tmpl\n└── scripts.tmpl\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>然后我们定义一个<code>loadTemplates</code>函数如下：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">loadTemplates</span><span class=\"token punctuation\">(</span>templatesDir <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> multitemplate<span class=\"token punctuation\">.</span>Renderer <span class=\"token punctuation\">{</span>\n	r <span class=\"token operator\">:=</span> multitemplate<span class=\"token punctuation\">.</span><span class=\"token function\">NewRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	layouts<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> filepath<span class=\"token punctuation\">.</span><span class=\"token function\">Glob</span><span class=\"token punctuation\">(</span>templatesDir <span class=\"token operator\">+</span> <span class=\"token string\">\"/layouts/*.tmpl\"</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span>\n	includes<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> filepath<span class=\"token punctuation\">.</span><span class=\"token function\">Glob</span><span class=\"token punctuation\">(</span>templatesDir <span class=\"token operator\">+</span> <span class=\"token string\">\"/includes/*.tmpl\"</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token comment\">// 为layouts/和includes/目录生成 templates map</span>\n	<span class=\"token keyword keyword-for\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> include <span class=\"token operator\">:=</span> <span class=\"token keyword keyword-range\">range</span> includes <span class=\"token punctuation\">{</span>\n		layoutCopy <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>layouts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n		<span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>layoutCopy<span class=\"token punctuation\">,</span> layouts<span class=\"token punctuation\">)</span>\n		files <span class=\"token operator\">:=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>layoutCopy<span class=\"token punctuation\">,</span> include<span class=\"token punctuation\">)</span>\n		r<span class=\"token punctuation\">.</span><span class=\"token function\">AddFromFiles</span><span class=\"token punctuation\">(</span>filepath<span class=\"token punctuation\">.</span><span class=\"token function\">Base</span><span class=\"token punctuation\">(</span>include<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> files<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token keyword keyword-return\">return</span> r\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们在<code>main</code>函数中</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">indexFunc</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n	c<span class=\"token punctuation\">.</span><span class=\"token function\">HTML</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> <span class=\"token string\">\"index.tmpl\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">homeFunc</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n	c<span class=\"token punctuation\">.</span><span class=\"token function\">HTML</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> <span class=\"token string\">\"home.tmpl\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n	r <span class=\"token operator\">:=</span> gin<span class=\"token punctuation\">.</span><span class=\"token function\">Default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	r<span class=\"token punctuation\">.</span>HTMLRender <span class=\"token operator\">=</span> <span class=\"token function\">loadTemplates</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./templates\"</span><span class=\"token punctuation\">)</span>\n	r<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/index\"</span><span class=\"token punctuation\">,</span> indexFunc<span class=\"token punctuation\">)</span>\n	r<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/home\"</span><span class=\"token punctuation\">,</span> homeFunc<span class=\"token punctuation\">)</span>\n	r<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"autoid-0-4-4\">补充文件路径处理</h3>\n<p>关于模板文件和静态文件的路径，我们需要根据公司/项目的要求进行设置。可以使用下面的函数获取当前执行程序的路径。</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">getCurrentPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n	<span class=\"token keyword keyword-if\">if</span> ex<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Executable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		<span class=\"token keyword keyword-return\">return</span> filepath<span class=\"token punctuation\">.</span><span class=\"token function\">Dir</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token keyword keyword-return\">return</span> <span class=\"token string\">\"./\"</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"autoid-0-4-5\">JSON渲染</h3>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	r <span class=\"token operator\">:=</span> gin<span class=\"token punctuation\">.</span><span class=\"token function\">Default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n	<span class=\"token comment\">// gin.H 是map[string]interface{}的缩写</span>\n	r<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/someJSON\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n		<span class=\"token comment\">// 方式一：自己拼接JSON</span>\n		c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Hello world!\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n	r<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/moreJSON\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n		<span class=\"token comment\">// 方法二：使用结构体</span>\n		<span class=\"token keyword keyword-var\">var</span> msg <span class=\"token keyword keyword-struct\">struct</span> <span class=\"token punctuation\">{</span>\n			Name    <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"user\"`</span>\n			Message <span class=\"token builtin\">string</span>\n			Age     <span class=\"token builtin\">int</span>\n		<span class=\"token punctuation\">}</span>\n		msg<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">=</span> <span class=\"token string\">\"小王子\"</span>\n		msg<span class=\"token punctuation\">.</span>Message <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello world!\"</span>\n		msg<span class=\"token punctuation\">.</span>Age <span class=\"token operator\">=</span> <span class=\"token number\">18</span>\n		c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n	r<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":8080\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"autoid-0-4-6\">XML渲染</h3>\n<p>注意需要使用具名的结构体类型。</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	r <span class=\"token operator\">:=</span> gin<span class=\"token punctuation\">.</span><span class=\"token function\">Default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	<span class=\"token comment\">// gin.H 是map[string]interface{}的缩写</span>\n	r<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/someXML\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n		<span class=\"token comment\">// 方式一：自己拼接JSON</span>\n		c<span class=\"token punctuation\">.</span><span class=\"token function\">XML</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Hello world!\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n	r<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/moreXML\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n		<span class=\"token comment\">// 方法二：使用结构体</span>\n		<span class=\"token keyword keyword-type\">type</span> MessageRecord <span class=\"token keyword keyword-struct\">struct</span> <span class=\"token punctuation\">{</span>\n			Name    <span class=\"token builtin\">string</span>\n			Message <span class=\"token builtin\">string</span>\n			Age     <span class=\"token builtin\">int</span>\n		<span class=\"token punctuation\">}</span>\n		<span class=\"token keyword keyword-var\">var</span> msg MessageRecord\n		msg<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">=</span> <span class=\"token string\">\"小王子\"</span>\n		msg<span class=\"token punctuation\">.</span>Message <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello world!\"</span>\n		msg<span class=\"token punctuation\">.</span>Age <span class=\"token operator\">=</span> <span class=\"token number\">18</span>\n		c<span class=\"token punctuation\">.</span><span class=\"token function\">XML</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n	r<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":8080\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"autoid-0-4-7\">YMAL渲染</h3>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\">r<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/someYAML\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	c<span class=\"token punctuation\">.</span><span class=\"token function\">YAML</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"ok\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"status\"</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"autoid-0-4-8\">protobuf渲染</h3>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\">r<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/someProtoBuf\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	reps <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int64</span><span class=\"token punctuation\">{</span><span class=\"token function\">int64</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">int64</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n	label <span class=\"token operator\">:=</span> <span class=\"token string\">\"test\"</span>\n	<span class=\"token comment\">// protobuf 的具体定义写在 testdata/protoexample 文件中。</span>\n	data <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>protoexample<span class=\"token punctuation\">.</span>Test<span class=\"token punctuation\">{</span>\n		Label<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>label<span class=\"token punctuation\">,</span>\n		Reps<span class=\"token punctuation\">:</span>  reps<span class=\"token punctuation\">,</span>\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token comment\">// 请注意，数据在响应中变为二进制数据</span>\n	<span class=\"token comment\">// 将输出被 protoexample.Test protobuf 序列化了的数据</span>\n	c<span class=\"token punctuation\">.</span><span class=\"token function\">ProtoBuf</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"autoid-0-4-9\">获取参数</h2>\n<h3 id=\"autoid-0-5-0\">获取querystring参数</h3>\n<p><code>querystring</code>指的是URL中<code>?</code>后面携带的参数，例如：<code>/user/search?username=小王子&amp;address=沙河</code>。\n获取请求的querystring参数的方法如下：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	<span class=\"token comment\">//Default返回一个默认的路由引擎</span>\n	r <span class=\"token operator\">:=</span> gin<span class=\"token punctuation\">.</span><span class=\"token function\">Default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	r<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user/search\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n		username <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">DefaultQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"小王子\"</span><span class=\"token punctuation\">)</span>\n		<span class=\"token comment\">//username := c.Query(\"username\")</span>\n		address <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"address\"</span><span class=\"token punctuation\">)</span>\n		<span class=\"token comment\">//输出json结果给调用方</span>\n		c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span>\n			<span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span>  <span class=\"token string\">\"ok\"</span><span class=\"token punctuation\">,</span>\n			<span class=\"token string\">\"username\"</span><span class=\"token punctuation\">:</span> username<span class=\"token punctuation\">,</span>\n			<span class=\"token string\">\"address\"</span><span class=\"token punctuation\">:</span>  address<span class=\"token punctuation\">,</span>\n		<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n	r<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"autoid-0-5-1\">获取form参数</h3>\n<p>请求的数据通过form表单来提交，例如向<code>/user/search</code>发送一个POST请求，获取请求数据的方式如下：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	<span class=\"token comment\">//Default返回一个默认的路由引擎</span>\n	r <span class=\"token operator\">:=</span> gin<span class=\"token punctuation\">.</span><span class=\"token function\">Default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	r<span class=\"token punctuation\">.</span><span class=\"token function\">POST</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user/search\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n		<span class=\"token comment\">// DefaultPostForm取不到值时会返回指定的默认值</span>\n		<span class=\"token comment\">//username := c.DefaultPostForm(\"username\", \"小王子\")</span>\n		username <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">PostForm</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span>\n		address <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">PostForm</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"address\"</span><span class=\"token punctuation\">)</span>\n		<span class=\"token comment\">//输出json结果给调用方</span>\n		c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span>\n			<span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span>  <span class=\"token string\">\"ok\"</span><span class=\"token punctuation\">,</span>\n			<span class=\"token string\">\"username\"</span><span class=\"token punctuation\">:</span> username<span class=\"token punctuation\">,</span>\n			<span class=\"token string\">\"address\"</span><span class=\"token punctuation\">:</span>  address<span class=\"token punctuation\">,</span>\n		<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n	r<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":8080\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"autoid-0-5-2\">获取path参数</h3>\n<p>请求的参数通过URL路径传递，例如：<code>/user/search/小王子/沙河</code>。\n获取请求URL路径中的参数的方式如下。</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	<span class=\"token comment\">//Default返回一个默认的路由引擎</span>\n	r <span class=\"token operator\">:=</span> gin<span class=\"token punctuation\">.</span><span class=\"token function\">Default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	r<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user/search/:username/:address\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n		username <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span>\n		address <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"address\"</span><span class=\"token punctuation\">)</span>\n		<span class=\"token comment\">//输出json结果给调用方</span>\n		c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span>\n			<span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span>  <span class=\"token string\">\"ok\"</span><span class=\"token punctuation\">,</span>\n			<span class=\"token string\">\"username\"</span><span class=\"token punctuation\">:</span> username<span class=\"token punctuation\">,</span>\n			<span class=\"token string\">\"address\"</span><span class=\"token punctuation\">:</span>  address<span class=\"token punctuation\">,</span>\n		<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n	r<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":8080\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"autoid-0-5-3\">参数绑定</h3>\n<p>为了能够更方便的获取请求相关参数，提高开发效率，我们可以基于请求的<code>Content-Type</code>识别请求数据类型并利用反射机制自动提取请求中<code>QueryString</code>、<code>form表单</code>、<code>JSON</code>、<code>XML</code>等参数到结构体中。\n下面的示例代码演示了<code>.ShouldBind()</code>强大的功能，它能够基于请求自动提取<code>JSON</code>、<code>form表单</code>和<code>QueryString</code>类型的数据，并把值绑定到指定的结构体对象。</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token comment\">// Binding from JSON</span>\n<span class=\"token keyword keyword-type\">type</span> Login <span class=\"token keyword keyword-struct\">struct</span> <span class=\"token punctuation\">{</span>\n	User     <span class=\"token builtin\">string</span> <span class=\"token string\">`form:\"user\" json:\"user\" binding:\"required\"`</span>\n	Password <span class=\"token builtin\">string</span> <span class=\"token string\">`form:\"password\" json:\"password\" binding:\"required\"`</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	router <span class=\"token operator\">:=</span> gin<span class=\"token punctuation\">.</span><span class=\"token function\">Default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n	<span class=\"token comment\">// 绑定JSON的示例 ({\"user\": \"q1mi\", \"password\": \"123456\"})</span>\n	router<span class=\"token punctuation\">.</span><span class=\"token function\">POST</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/loginJSON\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n		<span class=\"token keyword keyword-var\">var</span> login Login\n\n		<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">ShouldBind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>login<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n			fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"login info:%#v\\n\"</span><span class=\"token punctuation\">,</span> login<span class=\"token punctuation\">)</span>\n			c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span>\n				<span class=\"token string\">\"user\"</span><span class=\"token punctuation\">:</span>     login<span class=\"token punctuation\">.</span>User<span class=\"token punctuation\">,</span>\n				<span class=\"token string\">\"password\"</span><span class=\"token punctuation\">:</span> login<span class=\"token punctuation\">.</span>Password<span class=\"token punctuation\">,</span>\n			<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n		<span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-else\">else</span> <span class=\"token punctuation\">{</span>\n			c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusBadRequest<span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">:</span> err<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n		<span class=\"token punctuation\">}</span>\n	<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n	<span class=\"token comment\">// 绑定form表单示例 (user=q1mi&amp;password=123456)</span>\n	router<span class=\"token punctuation\">.</span><span class=\"token function\">POST</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/loginForm\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n		<span class=\"token keyword keyword-var\">var</span> login Login\n		<span class=\"token comment\">// ShouldBind()会根据请求的Content-Type自行选择绑定器</span>\n		<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">ShouldBind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>login<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n			c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span>\n				<span class=\"token string\">\"user\"</span><span class=\"token punctuation\">:</span>     login<span class=\"token punctuation\">.</span>User<span class=\"token punctuation\">,</span>\n				<span class=\"token string\">\"password\"</span><span class=\"token punctuation\">:</span> login<span class=\"token punctuation\">.</span>Password<span class=\"token punctuation\">,</span>\n			<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n		<span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-else\">else</span> <span class=\"token punctuation\">{</span>\n			c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusBadRequest<span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">:</span> err<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n		<span class=\"token punctuation\">}</span>\n	<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n	<span class=\"token comment\">// 绑定QueryString示例 (/loginQuery?user=q1mi&amp;password=123456)</span>\n	router<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/loginForm\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n		<span class=\"token keyword keyword-var\">var</span> login Login\n		<span class=\"token comment\">// ShouldBind()会根据请求的Content-Type自行选择绑定器</span>\n		<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">ShouldBind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>login<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n			c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span>\n				<span class=\"token string\">\"user\"</span><span class=\"token punctuation\">:</span>     login<span class=\"token punctuation\">.</span>User<span class=\"token punctuation\">,</span>\n				<span class=\"token string\">\"password\"</span><span class=\"token punctuation\">:</span> login<span class=\"token punctuation\">.</span>Password<span class=\"token punctuation\">,</span>\n			<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n		<span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-else\">else</span> <span class=\"token punctuation\">{</span>\n			c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusBadRequest<span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">:</span> err<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n		<span class=\"token punctuation\">}</span>\n	<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n	<span class=\"token comment\">// Listen and serve on 0.0.0.0:8080</span>\n	router<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":8080\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>ShouldBind</code>会按照下面的顺序解析请求中的数据完成绑定：</p>\n<ol>\n<li>如果是 <code>GET</code> 请求，只使用 <code>Form</code> 绑定引擎（<code>query</code>）。</li>\n<li>如果是 <code>POST</code> 请求，首先检查 <code>content-type</code> 是否为 <code>JSON</code> 或 <code>XML</code>，然后再使用 <code>Form</code>（<code>form-data</code>）。</li>\n</ol>\n<h2 id=\"autoid-0-5-4\">文件上传</h2>\n<h3 id=\"autoid-0-6-0\">单个文件上传</h3>\n<p>文件上传前端页面代码：</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\"><span class=\"token doctype\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>zh-CN<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>上传文件示例<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/upload<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>post<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">enctype</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>multipart/form-data<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>file<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>f1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>上传<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>后端gin框架部分代码：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	router <span class=\"token operator\">:=</span> gin<span class=\"token punctuation\">.</span><span class=\"token function\">Default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	<span class=\"token comment\">// 处理multipart forms提交文件时默认的内存限制是32 MiB</span>\n	<span class=\"token comment\">// 可以通过下面的方式修改</span>\n	<span class=\"token comment\">// router.MaxMultipartMemory = 8 &lt;&lt; 20  // 8 MiB</span>\n	router<span class=\"token punctuation\">.</span><span class=\"token function\">POST</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/upload\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n		<span class=\"token comment\">// 单个文件</span>\n		file<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">FormFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"f1\"</span><span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n			c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusInternalServerError<span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span>\n				<span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> err<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n			<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n			<span class=\"token keyword keyword-return\">return</span>\n		<span class=\"token punctuation\">}</span>\n\n		log<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span>Filename<span class=\"token punctuation\">)</span>\n		dst <span class=\"token operator\">:=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C:/tmp/%s\"</span><span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">.</span>Filename<span class=\"token punctuation\">)</span>\n		<span class=\"token comment\">// 上传文件到指定的目录</span>\n		c<span class=\"token punctuation\">.</span><span class=\"token function\">SaveUploadedFile</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> dst<span class=\"token punctuation\">)</span>\n		c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span>\n			<span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\'%s\' uploaded!\"</span><span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">.</span>Filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n		<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n	router<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"autoid-0-6-1\">多个文件上传</h3>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	router <span class=\"token operator\">:=</span> gin<span class=\"token punctuation\">.</span><span class=\"token function\">Default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	<span class=\"token comment\">// 处理multipart forms提交文件时默认的内存限制是32 MiB</span>\n	<span class=\"token comment\">// 可以通过下面的方式修改</span>\n	<span class=\"token comment\">// router.MaxMultipartMemory = 8 &lt;&lt; 20  // 8 MiB</span>\n	router<span class=\"token punctuation\">.</span><span class=\"token function\">POST</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/upload\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n		<span class=\"token comment\">// Multipart form</span>\n		form<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">MultipartForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n		files <span class=\"token operator\">:=</span> form<span class=\"token punctuation\">.</span>File<span class=\"token punctuation\">[</span><span class=\"token string\">\"file\"</span><span class=\"token punctuation\">]</span>\n\n		<span class=\"token keyword keyword-for\">for</span> index<span class=\"token punctuation\">,</span> file <span class=\"token operator\">:=</span> <span class=\"token keyword keyword-range\">range</span> files <span class=\"token punctuation\">{</span>\n			log<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span>Filename<span class=\"token punctuation\">)</span>\n			dst <span class=\"token operator\">:=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C:/tmp/%s_%d\"</span><span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">.</span>Filename<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span>\n			<span class=\"token comment\">// 上传文件到指定的目录</span>\n			c<span class=\"token punctuation\">.</span><span class=\"token function\">SaveUploadedFile</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> dst<span class=\"token punctuation\">)</span>\n		<span class=\"token punctuation\">}</span>\n		c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span>\n			<span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d files uploaded!\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n		<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n	router<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"autoid-0-6-2\">重定向</h2>\n<h3 id=\"autoid-0-7-0\">HTTP重定向</h3>\n<p>HTTP 重定向很容易。 内部、外部重定向均支持。</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\">r<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	c<span class=\"token punctuation\">.</span><span class=\"token function\">Redirect</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusMovedPermanently<span class=\"token punctuation\">,</span> <span class=\"token string\">\"http://www.sogo.com/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"autoid-0-7-1\">路由重定向</h3>\n<p>路由重定向，使用<code>HandleContext</code>：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\">r<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 指定重定向的URL</span>\n    c<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span>Path <span class=\"token operator\">=</span> <span class=\"token string\">\"/test2\"</span>\n    r<span class=\"token punctuation\">.</span><span class=\"token function\">HandleContext</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nr<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test2\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"autoid-0-7-2\">Gin路由</h2>\n<h3 id=\"autoid-0-8-0\">普通路由</h3>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\">r<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/index\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nr<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nr<span class=\"token punctuation\">.</span><span class=\"token function\">POST</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>此外，还有一个可以匹配所有请求方法的<code>Any</code>方法如下：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\">r<span class=\"token punctuation\">.</span><span class=\"token function\">Any</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>为没有配置处理函数的路由添加处理程序，默认情况下它返回404代码，下面的代码为没有匹配到路由的请求都返回<code>views/404.html</code>页面。</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\">r<span class=\"token punctuation\">.</span><span class=\"token function\">NoRoute</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n		c<span class=\"token punctuation\">.</span><span class=\"token function\">HTML</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusNotFound<span class=\"token punctuation\">,</span> <span class=\"token string\">\"views/404.html\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"autoid-0-8-1\">路由组</h3>\n<p>我们可以将拥有共同URL前缀的路由划分为一个路由组。习惯性一对<code>{}</code>包裹同组的路由，这只是为了看着清晰，你用不用<code>{}</code>包裹功能上没什么区别。</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	r <span class=\"token operator\">:=</span> gin<span class=\"token punctuation\">.</span><span class=\"token function\">Default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	userGroup <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">Group</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user\"</span><span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">{</span>\n		userGroup<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/index\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n		userGroup<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n		userGroup<span class=\"token punctuation\">.</span><span class=\"token function\">POST</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n	<span class=\"token punctuation\">}</span>\n	shopGroup <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">Group</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/shop\"</span><span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">{</span>\n		shopGroup<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/index\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n		shopGroup<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/cart\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n		shopGroup<span class=\"token punctuation\">.</span><span class=\"token function\">POST</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/checkout\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span>\n	r<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>路由组也是支持嵌套的，例如：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\">shopGroup <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">Group</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/shop\"</span><span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">{</span>\n		shopGroup<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/index\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n		shopGroup<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/cart\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n		shopGroup<span class=\"token punctuation\">.</span><span class=\"token function\">POST</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/checkout\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n		<span class=\"token comment\">// 嵌套路由组</span>\n		xx <span class=\"token operator\">:=</span> shopGroup<span class=\"token punctuation\">.</span><span class=\"token function\">Group</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xx\"</span><span class=\"token punctuation\">)</span>\n		xx<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/oo\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>通常我们将路由分组用在划分业务逻辑或划分API版本时。</p>\n<h3 id=\"autoid-0-8-2\">路由原理</h3>\n<p>Gin框架中的路由使用的是<a href=\"https://github.com/julienschmidt/httprouter\" target=\"_blank\">httprouter</a>这个库。</p>\n<p>其基本原理就是构造一个路由地址的前缀树。</p>\n<h2 id=\"autoid-0-8-3\">Gin中间件</h2>\n<p>Gin框架允许开发者在处理请求的过程中，加入用户自己的钩子（Hook）函数。这个钩子函数就叫中间件，中间件适合处理一些公共的业务逻辑，比如登录认证、权限校验、数据分页、记录日志、耗时统计等。</p>\n<h3 id=\"autoid-0-9-0\">定义中间件</h3>\n<p>Gin中的中间件必须是一个<code>gin.HandlerFunc</code>类型。例如我们像下面的代码一样定义一个统计请求耗时的中间件。</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token comment\">// StatCost 是一个统计耗时请求耗时的中间件</span>\n<span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">StatCost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> gin<span class=\"token punctuation\">.</span>HandlerFunc <span class=\"token punctuation\">{</span>\n	<span class=\"token keyword keyword-return\">return</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n		start <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n		c<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"小王子\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 可以通过c.Set在请求上下文中设置值，后续的处理函数能够取到该值</span>\n		<span class=\"token comment\">// 调用该请求的剩余处理程序</span>\n		c<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n		<span class=\"token comment\">// 不调用该请求的剩余处理程序</span>\n		<span class=\"token comment\">// c.Abort()</span>\n		<span class=\"token comment\">// 计算耗时</span>\n		cost <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Since</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span>\n		log<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>cost<span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"autoid-0-9-1\">注册中间件</h3>\n<p>在gin框架中，我们可以为每个路由添加任意数量的中间件。</p>\n<h4 id=\"为全局路由注册\">为全局路由注册</h4>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	<span class=\"token comment\">// 新建一个没有任何默认中间件的路由</span>\n	r <span class=\"token operator\">:=</span> gin<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	<span class=\"token comment\">// 注册一个全局中间件</span>\n	r<span class=\"token punctuation\">.</span><span class=\"token function\">Use</span><span class=\"token punctuation\">(</span><span class=\"token function\">StatCost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n	\n	r<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n		name <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">MustGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 从上下文取值</span>\n		log<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n		c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span>\n			<span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Hello world!\"</span><span class=\"token punctuation\">,</span>\n		<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n	r<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"为某个路由单独注册\">为某个路由单独注册</h4>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token comment\">// 给/test2路由单独注册中间件（可注册多个）</span>\n	r<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test2\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">StatCost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n		name <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">MustGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 从上下文取值</span>\n		log<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n		c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span>\n			<span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Hello world!\"</span><span class=\"token punctuation\">,</span>\n		<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"为路由组注册中间件\">为路由组注册中间件</h4>\n<p>为路由组注册中间件有以下两种写法。</p>\n<p>写法1：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\">shopGroup <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">Group</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/shop\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">StatCost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    shopGroup<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/index\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>写法2：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\">shopGroup <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">Group</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/shop\"</span><span class=\"token punctuation\">)</span>\nshopGroup<span class=\"token punctuation\">.</span><span class=\"token function\">Use</span><span class=\"token punctuation\">(</span><span class=\"token function\">StatCost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    shopGroup<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/index\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"autoid-0-9-2\">中间件注意事项</h3>\n<h4 id=\"gin默认中间件\">gin默认中间件</h4>\n<p><code>gin.Default()</code>默认使用了<code>Logger</code>和<code>Recovery</code>中间件，其中：</p>\n<ul>\n<li><code>Logger</code>中间件将日志写入<code>gin.DefaultWriter</code>，即使配置了<code>GIN_MODE=release</code>。</li>\n<li><code>Recovery</code>中间件会recover任何<code>panic</code>。如果有panic的话，会写入500响应码。</li>\n</ul>\n<p>如果不想使用上面两个默认的中间件，可以使用<code>gin.New()</code>新建一个没有任何默认中间件的路由。</p>\n<h4 id=\"gin中间件中使用goroutine\">gin中间件中使用goroutine</h4>\n<p>当在中间件或<code>handler</code>中启动新的<code>goroutine</code>时，<strong>不能使用</strong>原始的上下文（c *gin.Context），必须使用其只读副本（<code>c.Copy()</code>）。</p>\n<h2 id=\"autoid-0-9-3\">运行多个服务</h2>\n<p>我们可以在多个端口启动服务，例如：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-package\">package</span> main\n\n<span class=\"token keyword keyword-import\">import</span> <span class=\"token punctuation\">(</span>\n	<span class=\"token string\">\"log\"</span>\n	<span class=\"token string\">\"net/http\"</span>\n	<span class=\"token string\">\"time\"</span>\n\n	<span class=\"token string\">\"github.com/gin-gonic/gin\"</span>\n	<span class=\"token string\">\"golang.org/x/sync/errgroup\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-var\">var</span> <span class=\"token punctuation\">(</span>\n	g errgroup<span class=\"token punctuation\">.</span>Group\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">router01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> http<span class=\"token punctuation\">.</span>Handler <span class=\"token punctuation\">{</span>\n	e <span class=\"token operator\">:=</span> gin<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	e<span class=\"token punctuation\">.</span><span class=\"token function\">Use</span><span class=\"token punctuation\">(</span>gin<span class=\"token punctuation\">.</span><span class=\"token function\">Recovery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n	e<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n		c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>\n			http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span>\n			gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span>\n				<span class=\"token string\">\"code\"</span><span class=\"token punctuation\">:</span>  http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span>\n				<span class=\"token string\">\"error\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Welcome server 01\"</span><span class=\"token punctuation\">,</span>\n			<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n		<span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n	<span class=\"token keyword keyword-return\">return</span> e\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">router02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> http<span class=\"token punctuation\">.</span>Handler <span class=\"token punctuation\">{</span>\n	e <span class=\"token operator\">:=</span> gin<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	e<span class=\"token punctuation\">.</span><span class=\"token function\">Use</span><span class=\"token punctuation\">(</span>gin<span class=\"token punctuation\">.</span><span class=\"token function\">Recovery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n	e<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n		c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>\n			http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span>\n			gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span>\n				<span class=\"token string\">\"code\"</span><span class=\"token punctuation\">:</span>  http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span>\n				<span class=\"token string\">\"error\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Welcome server 02\"</span><span class=\"token punctuation\">,</span>\n			<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n		<span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n	<span class=\"token keyword keyword-return\">return</span> e\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	server01 <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>http<span class=\"token punctuation\">.</span>Server<span class=\"token punctuation\">{</span>\n		Addr<span class=\"token punctuation\">:</span>         <span class=\"token string\">\":8080\"</span><span class=\"token punctuation\">,</span>\n		Handler<span class=\"token punctuation\">:</span>      <span class=\"token function\">router01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n		ReadTimeout<span class=\"token punctuation\">:</span>  <span class=\"token number\">5</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">,</span>\n		WriteTimeout<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">,</span>\n	<span class=\"token punctuation\">}</span>\n\n	server02 <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>http<span class=\"token punctuation\">.</span>Server<span class=\"token punctuation\">{</span>\n		Addr<span class=\"token punctuation\">:</span>         <span class=\"token string\">\":8081\"</span><span class=\"token punctuation\">,</span>\n		Handler<span class=\"token punctuation\">:</span>      <span class=\"token function\">router02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n		ReadTimeout<span class=\"token punctuation\">:</span>  <span class=\"token number\">5</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">,</span>\n		WriteTimeout<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">,</span>\n	<span class=\"token punctuation\">}</span>\n   <span class=\"token comment\">// 借助errgroup.Group或者自行开启两个goroutine分别启动两个服务</span>\n	g<span class=\"token punctuation\">.</span><span class=\"token function\">Go</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n		<span class=\"token keyword keyword-return\">return</span> server01<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n	g<span class=\"token punctuation\">.</span><span class=\"token function\">Go</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n		<span class=\"token keyword keyword-return\">return</span> server02<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">:=</span> g<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</div>', 16);
INSERT INTO `blog_articledetail` VALUES (17, '<div class=\"post-content\">\n<p>在项目开发中redis的使用也比较频繁，本文介绍了Go语言中<code>go-redis</code>库的基本使用。</p>\n<h1 id=\"autoid-0-0-0\">Redis介绍</h1>\n<p>Redis是一个开源的内存数据库，Redis提供了多种不同类型的数据结构，很多业务场景下的问题都可以很自然地映射到这些数据结构上。除此之外，通过复制、持久化和客户端分片等特性，我们可以很方便地将Redis扩展成一个能够包含数百GB数据、每秒处理上百万次请求的系统。</p>\n<h2 id=\"autoid-1-0-0\">Redis支持的数据结构</h2>\n<p>Redis支持诸如字符串（strings）、哈希（hashes）、列表（lists）、集合（sets）、带范围查询的排序集合（sorted sets）、位图（bitmaps）、hyperloglogs、带半径查询和流的地理空间索引等数据结构（geospatial indexes）。</p>\n<h2 id=\"autoid-1-1-0\">Redis应用场景</h2>\n<ul>\n<li>缓存系统，减轻主数据库（MySQL）的压力。</li>\n<li>计数场景，比如微博、抖音中的关注数和粉丝数。</li>\n<li>热门排行榜，需要排序的场景特别适合使用ZSET。</li>\n<li>利用LIST可以实现队列的功能。</li>\n</ul>\n<h2 id=\"autoid-1-2-0\">准备Redis环境</h2>\n<p>这里直接使用Docker启动一个redis环境，方便学习使用。</p>\n<p>docker启动一个名为redis507的5.0.7版本的redis server示例：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">docker run --name redis507 -p 6379:6379 -d redis:5.0.7\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>注意：</strong>此处的版本、容器名和端口号请根据自己需要设置。</p>\n<p>启动一个redis-cli连接上面的redis server:</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">docker run -it --network <span class=\"token function\">host</span> --rm redis:5.0.7 redis-cli\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h1 id=\"autoid-1-3-0\">go-redis库</h1>\n<h2 id=\"autoid-2-0-0\">安装</h2>\n<p>区别于另一个比较常用的Go语言redis client库：<a href=\"https://github.com/gomodule/redigo\" target=\"_blank\">redigo</a>，我们这里采用<a href=\"https://github.com/go-redis/redis\" target=\"_blank\">https://github.com/go-redis/redis</a>连接Redis数据库并进行操作，因为<code>go-redis</code>支持连接哨兵及集群模式的Redis。</p>\n<p>使用以下命令下载并安装:</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">go get -u github.com/go-redis/redis\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"autoid-2-1-0\">连接</h2>\n<h3 id=\"autoid-2-2-0\">普通连接</h3>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token comment\">// 声明一个全局的rdb变量</span>\n<span class=\"token keyword keyword-var\">var</span> rdb <span class=\"token operator\">*</span>redis<span class=\"token punctuation\">.</span>Client\n\n<span class=\"token comment\">// 初始化连接</span>\n<span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">initClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	rdb <span class=\"token operator\">=</span> redis<span class=\"token punctuation\">.</span><span class=\"token function\">NewClient</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>redis<span class=\"token punctuation\">.</span>Options<span class=\"token punctuation\">{</span>\n		Addr<span class=\"token punctuation\">:</span>     <span class=\"token string\">\"localhost:6379\"</span><span class=\"token punctuation\">,</span>\n		Password<span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// no password set</span>\n		DB<span class=\"token punctuation\">:</span>       <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// use default DB</span>\n	<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n	<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> rdb<span class=\"token punctuation\">.</span><span class=\"token function\">Ping</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		<span class=\"token keyword keyword-return\">return</span> err\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"autoid-2-2-1\">连接Redis哨兵模式</h3>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">initClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n	rdb <span class=\"token operator\">:=</span> redis<span class=\"token punctuation\">.</span><span class=\"token function\">NewFailoverClient</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>redis<span class=\"token punctuation\">.</span>FailoverOptions<span class=\"token punctuation\">{</span>\n		MasterName<span class=\"token punctuation\">:</span>    <span class=\"token string\">\"master\"</span><span class=\"token punctuation\">,</span>\n		SentinelAddrs<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"x.x.x.x:26379\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"xx.xx.xx.xx:26379\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"xxx.xxx.xxx.xxx:26379\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n	<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n	<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> rdb<span class=\"token punctuation\">.</span><span class=\"token function\">Ping</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		<span class=\"token keyword keyword-return\">return</span> err\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"autoid-2-2-2\">连接Redis集群</h3>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">initClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n	rdb <span class=\"token operator\">:=</span> redis<span class=\"token punctuation\">.</span><span class=\"token function\">NewClusterClient</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>redis<span class=\"token punctuation\">.</span>ClusterOptions<span class=\"token punctuation\">{</span>\n		Addrs<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\":7000\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\":7001\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\":7002\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\":7003\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\":7004\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\":7005\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n	<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n	<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> rdb<span class=\"token punctuation\">.</span><span class=\"token function\">Ping</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		<span class=\"token keyword keyword-return\">return</span> err\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"autoid-2-2-3\">基本使用</h2>\n<h3 id=\"autoid-2-3-0\">set/get示例</h3>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">redisExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	err <span class=\"token operator\">:=</span> rdb<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"score\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"set score failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n\n	val<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> rdb<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"score\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get score failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"score\"</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span>\n\n	val2<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> rdb<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">==</span> redis<span class=\"token punctuation\">.</span>Nil <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name does not exist\"</span><span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-else\">else</span> <span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get name failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-else\">else</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> val2<span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"autoid-2-3-1\">zset示例</h3>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">redisExample2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	zsetKey <span class=\"token operator\">:=</span> <span class=\"token string\">\"language_rank\"</span>\n	languages <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>redis<span class=\"token punctuation\">.</span>Z<span class=\"token punctuation\">{</span>\n		redis<span class=\"token punctuation\">.</span>Z<span class=\"token punctuation\">{</span>Score<span class=\"token punctuation\">:</span> <span class=\"token number\">90.0</span><span class=\"token punctuation\">,</span> Member<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Golang\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n		redis<span class=\"token punctuation\">.</span>Z<span class=\"token punctuation\">{</span>Score<span class=\"token punctuation\">:</span> <span class=\"token number\">98.0</span><span class=\"token punctuation\">,</span> Member<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Java\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n		redis<span class=\"token punctuation\">.</span>Z<span class=\"token punctuation\">{</span>Score<span class=\"token punctuation\">:</span> <span class=\"token number\">95.0</span><span class=\"token punctuation\">,</span> Member<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Python\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n		redis<span class=\"token punctuation\">.</span>Z<span class=\"token punctuation\">{</span>Score<span class=\"token punctuation\">:</span> <span class=\"token number\">97.0</span><span class=\"token punctuation\">,</span> Member<span class=\"token punctuation\">:</span> <span class=\"token string\">\"JavaScript\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n		redis<span class=\"token punctuation\">.</span>Z<span class=\"token punctuation\">{</span>Score<span class=\"token punctuation\">:</span> <span class=\"token number\">99.0</span><span class=\"token punctuation\">,</span> Member<span class=\"token punctuation\">:</span> <span class=\"token string\">\"C/C++\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token comment\">// ZADD</span>\n	num<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> rdb<span class=\"token punctuation\">.</span><span class=\"token function\">ZAdd</span><span class=\"token punctuation\">(</span>zsetKey<span class=\"token punctuation\">,</span> languages<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zadd failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zadd %d succ.\\n\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span>\n\n	<span class=\"token comment\">// 把Golang的分数加10</span>\n	newScore<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> rdb<span class=\"token punctuation\">.</span><span class=\"token function\">ZIncrBy</span><span class=\"token punctuation\">(</span>zsetKey<span class=\"token punctuation\">,</span> <span class=\"token number\">10.0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Golang\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zincrby failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Golang\'s score is %f now.\\n\"</span><span class=\"token punctuation\">,</span> newScore<span class=\"token punctuation\">)</span>\n\n	<span class=\"token comment\">// 取分数最高的3个</span>\n	ret<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> rdb<span class=\"token punctuation\">.</span><span class=\"token function\">ZRevRangeWithScores</span><span class=\"token punctuation\">(</span>zsetKey<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zrevrange failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token keyword keyword-for\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> z <span class=\"token operator\">:=</span> <span class=\"token keyword keyword-range\">range</span> ret <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">.</span>Member<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">.</span>Score<span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span>\n\n	<span class=\"token comment\">// 取95~100分的</span>\n	op <span class=\"token operator\">:=</span> redis<span class=\"token punctuation\">.</span>ZRangeBy<span class=\"token punctuation\">{</span>\n		Min<span class=\"token punctuation\">:</span> <span class=\"token string\">\"95\"</span><span class=\"token punctuation\">,</span>\n		Max<span class=\"token punctuation\">:</span> <span class=\"token string\">\"100\"</span><span class=\"token punctuation\">,</span>\n	<span class=\"token punctuation\">}</span>\n	ret<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> rdb<span class=\"token punctuation\">.</span><span class=\"token function\">ZRangeByScoreWithScores</span><span class=\"token punctuation\">(</span>zsetKey<span class=\"token punctuation\">,</span> op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zrangebyscore failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token keyword keyword-for\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> z <span class=\"token operator\">:=</span> <span class=\"token keyword keyword-range\">range</span> ret <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">.</span>Member<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">.</span>Score<span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>输出结果如下：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ ./06redis_demo \nzadd 0 succ.\nGolang\'s score is 100.000000 now.\nGolang 100\nC/C++ 99\nJava 98\nJavaScript 97\nJava 98\nC/C++ 99\nGolang 100\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"autoid-2-3-2\">Pipeline</h3>\n<p><code>Pipeline</code> 主要是一种网络优化。它本质上意味着客户端缓冲一堆命令并一次性将它们发送到服务器。这些命令不能保证在事务中执行。这样做的好处是节省了每个命令的网络往返时间（RTT）。</p>\n<p><code>Pipeline</code> 基本示例如下：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\">pipe <span class=\"token operator\">:=</span> rdb<span class=\"token punctuation\">.</span><span class=\"token function\">Pipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nincr <span class=\"token operator\">:=</span> pipe<span class=\"token punctuation\">.</span><span class=\"token function\">Incr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pipeline_counter\"</span><span class=\"token punctuation\">)</span>\npipe<span class=\"token punctuation\">.</span><span class=\"token function\">Expire</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pipeline_counter\"</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>Hour<span class=\"token punctuation\">)</span>\n\n<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> pipe<span class=\"token punctuation\">.</span><span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>incr<span class=\"token punctuation\">.</span><span class=\"token function\">Val</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面的代码相当于将以下两个命令一次发给redis server端执行，与不使用<code>Pipeline</code>相比能减少一次RTT。</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">INCR pipeline_counter\nEXPIRE pipeline_counts 3600\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>也可以使用<code>Pipelined</code>：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-var\">var</span> incr <span class=\"token operator\">*</span>redis<span class=\"token punctuation\">.</span>IntCmd\n<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> rdb<span class=\"token punctuation\">.</span><span class=\"token function\">Pipelined</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>pipe redis<span class=\"token punctuation\">.</span>Pipeliner<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n	incr <span class=\"token operator\">=</span> pipe<span class=\"token punctuation\">.</span><span class=\"token function\">Incr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pipelined_counter\"</span><span class=\"token punctuation\">)</span>\n	pipe<span class=\"token punctuation\">.</span><span class=\"token function\">Expire</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pipelined_counter\"</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>Hour<span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>incr<span class=\"token punctuation\">.</span><span class=\"token function\">Val</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在某些场景下，当我们有多条命令要执行时，就可以考虑使用pipeline来优化。</p>\n<h3 id=\"autoid-2-3-3\">事务</h3>\n<p>Redis是单线程的，因此单个命令始终是原子的，但是来自不同客户端的两个给定命令可以依次执行，例如在它们之间交替执行。但是，<code>Multi/exec</code>能够确保在<code>multi/exec</code>两个语句之间的命令之间没有其他客户端正在执行命令。</p>\n<p>在这种场景我们需要使用<code>TxPipeline</code>。<code>TxPipeline</code>总体上类似于上面的<code>Pipeline</code>，但是它内部会使用<code>MULTI/EXEC</code>包裹排队的命令。例如：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\">pipe <span class=\"token operator\">:=</span> rdb<span class=\"token punctuation\">.</span><span class=\"token function\">TxPipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nincr <span class=\"token operator\">:=</span> pipe<span class=\"token punctuation\">.</span><span class=\"token function\">Incr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tx_pipeline_counter\"</span><span class=\"token punctuation\">)</span>\npipe<span class=\"token punctuation\">.</span><span class=\"token function\">Expire</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tx_pipeline_counter\"</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>Hour<span class=\"token punctuation\">)</span>\n\n<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> pipe<span class=\"token punctuation\">.</span><span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>incr<span class=\"token punctuation\">.</span><span class=\"token function\">Val</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面代码相当于在一个RTT下执行了下面的redis命令：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">MULTI\nINCR pipeline_counter\nEXPIRE pipeline_counts 3600\nEXEC\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>还有一个与上文类似的<code>TxPipelined</code>方法，使用方法如下：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-var\">var</span> incr <span class=\"token operator\">*</span>redis<span class=\"token punctuation\">.</span>IntCmd\n<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> rdb<span class=\"token punctuation\">.</span><span class=\"token function\">TxPipelined</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>pipe redis<span class=\"token punctuation\">.</span>Pipeliner<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n	incr <span class=\"token operator\">=</span> pipe<span class=\"token punctuation\">.</span><span class=\"token function\">Incr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tx_pipelined_counter\"</span><span class=\"token punctuation\">)</span>\n	pipe<span class=\"token punctuation\">.</span><span class=\"token function\">Expire</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tx_pipelined_counter\"</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>Hour<span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>incr<span class=\"token punctuation\">.</span><span class=\"token function\">Val</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"autoid-2-3-4\">Watch</h3>\n<p>在某些场景下，我们除了要使用<code>MULTI/EXEC</code>命令外，还需要配合使用<code>WATCH</code>命令。在用户使用<code>WATCH</code>命令监视某个键之后，直到该用户执行<code>EXEC</code>命令的这段时间里，如果有其他用户抢先对被监视的键进行了替换、更新、删除等操作，那么当用户尝试执行<code>EXEC</code>的时候，事务将失败并返回一个错误，用户可以根据这个错误选择重试事务或者放弃事务。</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token function\">Watch</span><span class=\"token punctuation\">(</span>fn <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Tx<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">,</span> keys <span class=\"token operator\">...</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>Watch方法接收一个函数和一个或多个key作为参数。基本使用示例如下：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token comment\">// 监视watch_count的值，并在值不变的前提下将其值+1</span>\nkey <span class=\"token operator\">:=</span> <span class=\"token string\">\"watch_count\"</span>\nerr <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">Watch</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>tx <span class=\"token operator\">*</span>redis<span class=\"token punctuation\">.</span>Tx<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n	n<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> tx<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">&amp;&amp;</span> err <span class=\"token operator\">!=</span> redis<span class=\"token punctuation\">.</span>Nil <span class=\"token punctuation\">{</span>\n		<span class=\"token keyword keyword-return\">return</span> err\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> tx<span class=\"token punctuation\">.</span><span class=\"token function\">Pipelined</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>pipe redis<span class=\"token punctuation\">.</span>Pipeliner<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n		pipe<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">nil</span>\n	<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-return\">return</span> err\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>最后看一个官方文档中使用GET和SET命令以事务方式递增Key的值的示例：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-const\">const</span> routineCount <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n\nincrement <span class=\"token operator\">:=</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>key <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n	txf <span class=\"token operator\">:=</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>tx <span class=\"token operator\">*</span>redis<span class=\"token punctuation\">.</span>Tx<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n		<span class=\"token comment\">// 获得当前值或零值</span>\n		n<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> tx<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">&amp;&amp;</span> err <span class=\"token operator\">!=</span> redis<span class=\"token punctuation\">.</span>Nil <span class=\"token punctuation\">{</span>\n			<span class=\"token keyword keyword-return\">return</span> err\n		<span class=\"token punctuation\">}</span>\n\n		<span class=\"token comment\">// 实际操作（乐观锁定中的本地操作）</span>\n		n<span class=\"token operator\">++</span>\n\n		<span class=\"token comment\">// 仅在监视的Key保持不变的情况下运行</span>\n		<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> tx<span class=\"token punctuation\">.</span><span class=\"token function\">Pipelined</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span>pipe redis<span class=\"token punctuation\">.</span>Pipeliner<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n			<span class=\"token comment\">// pipe 处理错误情况</span>\n			pipe<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n			<span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">nil</span>\n		<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span> err\n	<span class=\"token punctuation\">}</span>\n\n	<span class=\"token keyword keyword-for\">for</span> retries <span class=\"token operator\">:=</span> routineCount<span class=\"token punctuation\">;</span> retries <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> retries<span class=\"token operator\">--</span> <span class=\"token punctuation\">{</span>\n		err <span class=\"token operator\">:=</span> rdb<span class=\"token punctuation\">.</span><span class=\"token function\">Watch</span><span class=\"token punctuation\">(</span>txf<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> redis<span class=\"token punctuation\">.</span>TxFailedErr <span class=\"token punctuation\">{</span>\n			<span class=\"token keyword keyword-return\">return</span> err\n		<span class=\"token punctuation\">}</span>\n		<span class=\"token comment\">// 乐观锁丢失</span>\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token keyword keyword-return\">return</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"increment reached maximum number of retries\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-var\">var</span> wg sync<span class=\"token punctuation\">.</span>WaitGroup\nwg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>routineCount<span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-for\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> routineCount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n	<span class=\"token keyword keyword-go\">go</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n		<span class=\"token keyword keyword-defer\">defer</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n		<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"counter3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n			fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"increment error:\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token punctuation\">}</span>\n	<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\nwg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nn<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> rdb<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"counter3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ended with\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>更多详情请查阅<a href=\"https://godoc.org/github.com/go-redis/redis\" target=\"_blank\">文档</a>。</p>\n</div>', 17);
INSERT INTO `blog_articledetail` VALUES (18, '<div class=\"post-content\">\n<p>MySQL是业界常用的关系型数据库，本文介绍了Go语言如何操作MySQL数据库。</p>\n<h1 id=\"autoid-0-0-0\">Go操作MySQL</h1>\n<h2 id=\"autoid-1-0-0\">连接</h2>\n<p>Go语言中的<code>database/sql</code>包提供了保证SQL或类SQL数据库的泛用接口，并不提供具体的数据库驱动。使用<code>database/sql</code>包时必须注入（至少）一个数据库驱动。</p>\n<p>我们常用的数据库基本上都有完整的第三方实现。例如：<a href=\"https://github.com/go-sql-driver/mysql\" target=\"_blank\">MySQL驱动</a></p>\n<h3 id=\"autoid-1-1-0\">下载依赖</h3>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">go get -u github.com/go-sql-driver/mysql\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"autoid-1-1-1\">使用MySQL驱动</h3>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">Open</span><span class=\"token punctuation\">(</span>driverName<span class=\"token punctuation\">,</span> dataSourceName <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>DB<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>Open打开一个dirverName指定的数据库，dataSourceName指定数据源，一般至少包括数据库文件名和其它连接必要的信息。</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-import\">import</span> <span class=\"token punctuation\">(</span>\n	<span class=\"token string\">\"database/sql\"</span>\n\n	<span class=\"token boolean\">_</span> <span class=\"token string\">\"github.com/go-sql-driver/mysql\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// DSN:Data Source Name</span>\n	dsn <span class=\"token operator\">:=</span> <span class=\"token string\">\"user:password@tcp(127.0.0.1:3306)/dbname\"</span>\n	db<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> sql<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mysql\"</span><span class=\"token punctuation\">,</span> dsn<span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token keyword keyword-defer\">defer</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 注意这行代码要写在上面err判断的下面</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>思考题</strong>：\n为什么上面代码中的<code>defer db.Close()</code>语句不应该写在<code>if err != nil</code>的前面呢？</p>\n<h3 id=\"autoid-1-1-2\">初始化连接</h3>\n<p>Open函数可能只是验证其参数格式是否正确，实际上并不创建与数据库的连接。如果要检查数据源的名称是否真实有效，应该调用Ping方法。</p>\n<p>返回的DB对象可以安全地被多个goroutine并发使用，并且维护其自己的空闲连接池。因此，Open函数应该仅被调用一次，很少需要关闭这个DB对象。</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token comment\">// 定义一个全局对象db</span>\n<span class=\"token keyword keyword-var\">var</span> db <span class=\"token operator\">*</span>sql<span class=\"token punctuation\">.</span>DB\n\n<span class=\"token comment\">// 定义一个初始化数据库的函数</span>\n<span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">initDB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	<span class=\"token comment\">// DSN:Data Source Name</span>\n	dsn <span class=\"token operator\">:=</span> <span class=\"token string\">\"user:password@tcp(127.0.0.1:3306)/sql_test?charset=utf8mb4&amp;parseTime=True\"</span>\n	<span class=\"token comment\">// 不会校验账号密码是否正确</span>\n	<span class=\"token comment\">// 注意！！！这里不要使用:=，我们是给全局变量赋值，然后在main函数中使用全局变量db</span>\n	db<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> sql<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mysql\"</span><span class=\"token punctuation\">,</span> dsn<span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		<span class=\"token keyword keyword-return\">return</span> err\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token comment\">// 尝试与数据库建立连接（校验dsn是否正确）</span>\n	err <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Ping</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		<span class=\"token keyword keyword-return\">return</span> err\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	err <span class=\"token operator\">:=</span> <span class=\"token function\">initDB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 调用输出化数据库的函数</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"init db failed,err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其中<code>sql.DB</code>是表示连接的数据库对象（结构体实例），它保存了连接数据库相关的所有信息。它内部维护着一个具有零到多个底层连接的连接池，它可以安全地被多个goroutine同时使用。</p>\n<h3 id=\"autoid-1-1-3\">SetMaxOpenConns</h3>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token punctuation\">(</span>db <span class=\"token operator\">*</span>DB<span class=\"token punctuation\">)</span> <span class=\"token function\">SetMaxOpenConns</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><code>SetMaxOpenConns</code>设置与数据库建立连接的最大数目。\n如果n大于0且小于最大闲置连接数，会将最大闲置连接数减小到匹配最大开启连接数的限制。\n如果n&lt;=0，不会限制最大开启连接数，默认为0（无限制）。</p>\n<h3 id=\"autoid-1-1-4\">SetMaxIdleConns</h3>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token punctuation\">(</span>db <span class=\"token operator\">*</span>DB<span class=\"token punctuation\">)</span> <span class=\"token function\">SetMaxIdleConns</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>SetMaxIdleConns设置连接池中的最大闲置连接数。\n如果n大于最大开启连接数，则新的最大闲置连接数会减小到匹配最大开启连接数的限制。\n如果n&lt;=0，不会保留闲置连接。</p>\n<h2 id=\"autoid-1-1-5\">CRUD</h2>\n<h3 id=\"autoid-1-2-0\">建库建表</h3>\n<p>我们先在MySQL中创建一个名为<code>sql_test</code>的数据库</p>\n<pre class=\"line-numbers language-sql\"><code class=\"language-sql\">CREATE DATABASE sql_test;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>进入该数据库:</p>\n<pre class=\"line-numbers language-sql\"><code class=\"language-sql\">use sql_test;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>执行以下命令创建一张用于测试的数据表：</p>\n<pre class=\"line-numbers language-sql\"><code class=\"language-sql\">CREATE TABLE `user` (\n    `id` BIGINT(20) NOT NULL AUTO_INCREMENT,\n    `name` VARCHAR(20) DEFAULT \'\',\n    `age` INT(11) DEFAULT \'0\',\n    PRIMARY KEY(`id`)\n)ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"autoid-1-2-1\">查询</h3>\n<p>为了方便查询，我们事先定义好一个结构体来存储user表的数据。</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-type\">type</span> user <span class=\"token keyword keyword-struct\">struct</span> <span class=\"token punctuation\">{</span>\n	id   <span class=\"token builtin\">int</span>\n	age  <span class=\"token builtin\">int</span>\n	name <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"单行查询\">单行查询</h4>\n<p>单行查询<code>db.QueryRow()</code>执行一次查询，并期望返回最多一行结果（即Row）。QueryRow总是返回非nil的值，直到返回值的Scan方法被调用时，才会返回被延迟的错误。（如：未找到结果）</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token punctuation\">(</span>db <span class=\"token operator\">*</span>DB<span class=\"token punctuation\">)</span> <span class=\"token function\">QueryRow</span><span class=\"token punctuation\">(</span>query <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> args <span class=\"token operator\">...</span><span class=\"token keyword keyword-interface\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Row\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>具体示例代码：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token comment\">// 查询单条数据示例</span>\n<span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">queryRowDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	sqlStr <span class=\"token operator\">:=</span> <span class=\"token string\">\"select id, name, age from user where id=?\"</span>\n	<span class=\"token keyword keyword-var\">var</span> u user\n	<span class=\"token comment\">// 非常重要：确保QueryRow之后调用Scan方法，否则持有的数据库链接不会被释放</span>\n	err <span class=\"token operator\">:=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">QueryRow</span><span class=\"token punctuation\">(</span>sqlStr<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Scan</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>u<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>u<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>u<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"scan failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id:%d name:%s age:%d\\n\"</span><span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"多行查询\">多行查询</h4>\n<p>多行查询<code>db.Query()</code>执行一次查询，返回多行结果（即Rows），一般用于执行select命令。参数args表示query中的占位参数。</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token punctuation\">(</span>db <span class=\"token operator\">*</span>DB<span class=\"token punctuation\">)</span> <span class=\"token function\">Query</span><span class=\"token punctuation\">(</span>query <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> args <span class=\"token operator\">...</span><span class=\"token keyword keyword-interface\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Rows<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>具体示例代码：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token comment\">// 查询多条数据示例</span>\n<span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">queryMultiRowDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	sqlStr <span class=\"token operator\">:=</span> <span class=\"token string\">\"select id, name, age from user where id &gt; ?\"</span>\n	rows<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Query</span><span class=\"token punctuation\">(</span>sqlStr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"query failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token comment\">// 非常重要：关闭rows释放持有的数据库链接</span>\n	<span class=\"token keyword keyword-defer\">defer</span> rows<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n	<span class=\"token comment\">// 循环读取结果集中的数据</span>\n	<span class=\"token keyword keyword-for\">for</span> rows<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n		<span class=\"token keyword keyword-var\">var</span> u user\n		err <span class=\"token operator\">:=</span> rows<span class=\"token punctuation\">.</span><span class=\"token function\">Scan</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>u<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>u<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>u<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n			fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"scan failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n			<span class=\"token keyword keyword-return\">return</span>\n		<span class=\"token punctuation\">}</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id:%d name:%s age:%d\\n\"</span><span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"autoid-1-2-2\">插入数据</h3>\n<p>插入、更新和删除操作都使用<code>Exec</code>方法。</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token punctuation\">(</span>db <span class=\"token operator\">*</span>DB<span class=\"token punctuation\">)</span> <span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span>query <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> args <span class=\"token operator\">...</span><span class=\"token keyword keyword-interface\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>Result<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>Exec执行一次命令（包括查询、删除、更新、插入等），返回的Result是对已执行的SQL命令的总结。参数args表示query中的占位参数。</p>\n<p>具体插入数据示例代码如下：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token comment\">// 插入数据</span>\n<span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">insertRowDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	sqlStr <span class=\"token operator\">:=</span> <span class=\"token string\">\"insert into user(name, age) values (?,?)\"</span>\n	ret<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span>sqlStr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">38</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"insert failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	theID<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> ret<span class=\"token punctuation\">.</span><span class=\"token function\">LastInsertId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 新插入数据的id</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get lastinsert ID failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"insert success, the id is %d.\\n\"</span><span class=\"token punctuation\">,</span> theID<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"autoid-1-2-3\">更新数据</h3>\n<p>具体更新数据示例代码如下：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token comment\">// 更新数据</span>\n<span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">updateRowDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	sqlStr <span class=\"token operator\">:=</span> <span class=\"token string\">\"update user set age=? where id = ?\"</span>\n	ret<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span>sqlStr<span class=\"token punctuation\">,</span> <span class=\"token number\">39</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"update failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	n<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> ret<span class=\"token punctuation\">.</span><span class=\"token function\">RowsAffected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 操作影响的行数</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get RowsAffected failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"update success, affected rows:%d\\n\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"autoid-1-2-4\">删除数据</h3>\n<p>具体删除数据的示例代码如下：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token comment\">// 删除数据</span>\n<span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">deleteRowDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	sqlStr <span class=\"token operator\">:=</span> <span class=\"token string\">\"delete from user where id = ?\"</span>\n	ret<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span>sqlStr<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"delete failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	n<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> ret<span class=\"token punctuation\">.</span><span class=\"token function\">RowsAffected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 操作影响的行数</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get RowsAffected failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"delete success, affected rows:%d\\n\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"autoid-1-2-5\">MySQL预处理</h2>\n<h3 id=\"autoid-1-3-0\">什么是预处理？</h3>\n<p>普通SQL语句执行过程：</p>\n<ol>\n<li>客户端对SQL语句进行占位符替换得到完整的SQL语句。</li>\n<li>客户端发送完整SQL语句到MySQL服务端</li>\n<li>MySQL服务端执行完整的SQL语句并将结果返回给客户端。</li>\n</ol>\n<p>预处理执行过程：</p>\n<ol>\n<li>把SQL语句分成两部分，命令部分与数据部分。</li>\n<li>先把命令部分发送给MySQL服务端，MySQL服务端进行SQL预处理。</li>\n<li>然后把数据部分发送给MySQL服务端，MySQL服务端对SQL语句进行占位符替换。</li>\n<li>MySQL服务端执行完整的SQL语句并将结果返回给客户端。</li>\n</ol>\n<h3 id=\"autoid-1-3-1\">为什么要预处理？</h3>\n<ol>\n<li>优化MySQL服务器重复执行SQL的方法，可以提升服务器性能，提前让服务器编译，一次编译多次执行，节省后续编译的成本。</li>\n<li>避免SQL注入问题。</li>\n</ol>\n<h3 id=\"autoid-1-3-2\">Go实现MySQL预处理</h3>\n<p><code>database/sql</code>中使用下面的<code>Prepare</code>方法来实现预处理操作。</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token punctuation\">(</span>db <span class=\"token operator\">*</span>DB<span class=\"token punctuation\">)</span> <span class=\"token function\">Prepare</span><span class=\"token punctuation\">(</span>query <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Stmt<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><code>Prepare</code>方法会先将sql语句发送给MySQL服务端，返回一个准备好的状态用于之后的查询和命令。返回值可以同时执行多个查询和命令。</p>\n<p>查询操作的预处理示例代码如下：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token comment\">// 预处理查询示例</span>\n<span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">prepareQueryDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	sqlStr <span class=\"token operator\">:=</span> <span class=\"token string\">\"select id, name, age from user where id &gt; ?\"</span>\n	stmt<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Prepare</span><span class=\"token punctuation\">(</span>sqlStr<span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prepare failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token keyword keyword-defer\">defer</span> stmt<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	rows<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> stmt<span class=\"token punctuation\">.</span><span class=\"token function\">Query</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"query failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token keyword keyword-defer\">defer</span> rows<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	<span class=\"token comment\">// 循环读取结果集中的数据</span>\n	<span class=\"token keyword keyword-for\">for</span> rows<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n		<span class=\"token keyword keyword-var\">var</span> u user\n		err <span class=\"token operator\">:=</span> rows<span class=\"token punctuation\">.</span><span class=\"token function\">Scan</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>u<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>u<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>u<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n			fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"scan failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n			<span class=\"token keyword keyword-return\">return</span>\n		<span class=\"token punctuation\">}</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id:%d name:%s age:%d\\n\"</span><span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>插入、更新和删除操作的预处理十分类似，这里以插入操作的预处理为例：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token comment\">// 预处理插入示例</span>\n<span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">prepareInsertDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	sqlStr <span class=\"token operator\">:=</span> <span class=\"token string\">\"insert into user(name, age) values (?,?)\"</span>\n	stmt<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Prepare</span><span class=\"token punctuation\">(</span>sqlStr<span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prepare failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token keyword keyword-defer\">defer</span> stmt<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> stmt<span class=\"token punctuation\">.</span><span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小王子\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"insert failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> stmt<span class=\"token punctuation\">.</span><span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"沙河娜扎\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"insert failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"insert success.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"autoid-1-3-3\">SQL注入问题</h3>\n<p><strong>我们任何时候都不应该自己拼接SQL语句！</strong></p>\n<p>这里我们演示一个自行拼接SQL语句的示例，编写一个根据name字段查询user表的函数如下：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token comment\">// sql注入示例</span>\n<span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">sqlInjectDemo</span><span class=\"token punctuation\">(</span>name <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	sqlStr <span class=\"token operator\">:=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select id, name, age from user where name=\'%s\'\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n	fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SQL:%s\\n\"</span><span class=\"token punctuation\">,</span> sqlStr<span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-var\">var</span> u user\n	err <span class=\"token operator\">:=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">QueryRow</span><span class=\"token punctuation\">(</span>sqlStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Scan</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>u<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>u<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>u<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exec failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user:%#v\\n\"</span><span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>此时以下输入字符串都可以引发SQL注入问题：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token function\">sqlInjectDemo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxx\' or 1=1#\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">sqlInjectDemo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxx\' union select * from user #\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">sqlInjectDemo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxx\' and (select count(*) from user) &lt;10 #\"</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>补充：</strong>不同的数据库中，SQL语句使用的占位符语法不尽相同。</p>\n<table>\n<thead>\n<tr>\n<th>数据库</th>\n<th>占位符语法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MySQL</td>\n<td><code>?</code></td>\n</tr>\n<tr>\n<td>PostgreSQL</td>\n<td><code>$1</code>, <code>$2</code>等</td>\n</tr>\n<tr>\n<td>SQLite</td>\n<td><code>?</code> 和<code>$1</code></td>\n</tr>\n<tr>\n<td>Oracle</td>\n<td><code>:name</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"autoid-1-3-4\">Go实现MySQL事务</h2>\n<h3 id=\"autoid-1-4-0\">什么是事务？</h3>\n<p>事务：一个最小的不可再分的工作单元；通常一个事务对应一个完整的业务(例如银行账户转账业务，该业务就是一个最小的工作单元)，同时这个完整的业务需要执行多次的DML(insert、update、delete)语句共同联合完成。A转账给B，这里面就需要执行两次update操作。</p>\n<p>在MySQL中只有使用了<code>Innodb</code>数据库引擎的数据库或表才支持事务。事务处理可以用来维护数据库的完整性，保证成批的SQL语句要么全部执行，要么全部不执行。</p>\n<h3 id=\"autoid-1-4-1\">事务的ACID</h3>\n<p>通常事务必须满足4个条件（ACID）：原子性（Atomicity，或称不可分割性）、一致性（Consistency）、隔离性（Isolation，又称独立性）、持久性（Durability）。</p>\n<table>\n<thead>\n<tr>\n<th>条件</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>原子性</td>\n<td>一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</td>\n</tr>\n<tr>\n<td>一致性</td>\n<td>在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</td>\n</tr>\n<tr>\n<td>隔离性</td>\n<td>数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。</td>\n</tr>\n<tr>\n<td>持久性</td>\n<td>事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"autoid-1-4-2\">事务相关方法</h3>\n<p>Go语言中使用以下三个方法实现MySQL中的事务操作。\n开始事务</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token punctuation\">(</span>db <span class=\"token operator\">*</span>DB<span class=\"token punctuation\">)</span> <span class=\"token function\">Begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Tx<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>提交事务</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token punctuation\">(</span>tx <span class=\"token operator\">*</span>Tx<span class=\"token punctuation\">)</span> <span class=\"token function\">Commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>回滚事务</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token punctuation\">(</span>tx <span class=\"token operator\">*</span>Tx<span class=\"token punctuation\">)</span> <span class=\"token function\">Rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"autoid-1-4-3\">事务示例</h3>\n<p>下面的代码演示了一个简单的事务操作，该事物操作能够确保两次更新操作要么同时成功要么同时失败，不会存在中间状态。</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token comment\">// 事务操作示例</span>\n<span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">transactionDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	tx<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 开启事务</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		<span class=\"token keyword keyword-if\">if</span> tx <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n			tx<span class=\"token punctuation\">.</span><span class=\"token function\">Rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 回滚</span>\n		<span class=\"token punctuation\">}</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"begin trans failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	sqlStr1 <span class=\"token operator\">:=</span> <span class=\"token string\">\"Update user set age=30 where id=?\"</span>\n	ret1<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> tx<span class=\"token punctuation\">.</span><span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span>sqlStr1<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		tx<span class=\"token punctuation\">.</span><span class=\"token function\">Rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 回滚</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exec sql1 failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	affRow1<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> ret1<span class=\"token punctuation\">.</span><span class=\"token function\">RowsAffected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		tx<span class=\"token punctuation\">.</span><span class=\"token function\">Rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 回滚</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exec ret1.RowsAffected() failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n\n	sqlStr2 <span class=\"token operator\">:=</span> <span class=\"token string\">\"Update user set age=40 where id=?\"</span>\n	ret2<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> tx<span class=\"token punctuation\">.</span><span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span>sqlStr2<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		tx<span class=\"token punctuation\">.</span><span class=\"token function\">Rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 回滚</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exec sql2 failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	affRow2<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> ret2<span class=\"token punctuation\">.</span><span class=\"token function\">RowsAffected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		tx<span class=\"token punctuation\">.</span><span class=\"token function\">Rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 回滚</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exec ret1.RowsAffected() failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n\n	fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>affRow1<span class=\"token punctuation\">,</span> affRow2<span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> affRow1 <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> affRow2 <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"事务提交啦...\"</span><span class=\"token punctuation\">)</span>\n		tx<span class=\"token punctuation\">.</span><span class=\"token function\">Commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 提交事务</span>\n	<span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-else\">else</span> <span class=\"token punctuation\">{</span>\n		tx<span class=\"token punctuation\">.</span><span class=\"token function\">Rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"事务回滚啦...\"</span><span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span>\n\n	fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exec trans success!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><a href=\"https://www.liwenzhou.com/posts/Go/sqlx/\" target=\"_blank\">更强大、更好用的sqlx库</a></p>\n<h1 id=\"autoid-1-4-4\">练习题</h1>\n<ol>\n<li>结合<code>net/http</code>和<code>database/sql</code>实现一个使用MySQL存储用户信息的注册及登陆的简易web程序。</li>\n</ol>\n</div>', 18);
INSERT INTO `blog_articledetail` VALUES (19, '<div class=\"post-content\">\n<p>本文主要介绍了Go语言中文件读写的相关操作。</p>\n<p>文件是什么？</p>\n<p>计算机中的文件是存储在外部介质（通常是磁盘）上的数据集合，文件分为文本文件和二进制文件。</p>\n<h1 id=\"autoid-0-0-0\">打开和关闭文件</h1>\n<p><code>os.Open()</code>函数能够打开一个文件，返回一个<code>*File</code>和一个<code>err</code>。对得到的文件实例调用<code>close()</code>方法能够关闭文件。</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-package\">package</span> main\n\n<span class=\"token keyword keyword-import\">import</span> <span class=\"token punctuation\">(</span>\n	<span class=\"token string\">\"fmt\"</span>\n	<span class=\"token string\">\"os\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	<span class=\"token comment\">// 只读方式打开当前目录下的main.go文件</span>\n	file<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./main.go\"</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"open file failed!, err:\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token comment\">// 关闭文件</span>\n	file<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>为了防止文件忘记关闭，我们通常使用defer注册文件关闭语句。</p>\n<h1 id=\"autoid-1-0-0\">读取文件</h1>\n<h2 id=\"autoid-2-0-0\">file.Read()</h2>\n<h3 id=\"autoid-2-1-0\">基本使用</h3>\n<p>Read方法定义如下：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token punctuation\">(</span>f <span class=\"token operator\">*</span>File<span class=\"token punctuation\">)</span> <span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>b <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>它接收一个字节切片，返回读取的字节数和可能的具体错误，读到文件末尾时会返回<code>0</code>和<code>io.EOF</code>。\n举个例子：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	<span class=\"token comment\">// 只读方式打开当前目录下的main.go文件</span>\n	file<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./main.go\"</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"open file failed!, err:\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token keyword keyword-defer\">defer</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	<span class=\"token comment\">// 使用Read方法读取数据</span>\n	<span class=\"token keyword keyword-var\">var</span> tmp <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span>\n	n<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">==</span> io<span class=\"token punctuation\">.</span>EOF <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件读完了\"</span><span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read file failed, err:\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取了%d字节数据\\n\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n	fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"autoid-2-1-1\">循环读取</h3>\n<p>使用for循环读取文件中的所有数据。</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	<span class=\"token comment\">// 只读方式打开当前目录下的main.go文件</span>\n	file<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./main.go\"</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"open file failed!, err:\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token keyword keyword-defer\">defer</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	<span class=\"token comment\">// 循环读取文件</span>\n	<span class=\"token keyword keyword-var\">var</span> content <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span>\n	<span class=\"token keyword keyword-var\">var</span> tmp <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-for\">for</span> <span class=\"token punctuation\">{</span>\n		n<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">==</span> io<span class=\"token punctuation\">.</span>EOF <span class=\"token punctuation\">{</span>\n			fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件读完了\"</span><span class=\"token punctuation\">)</span>\n			<span class=\"token keyword keyword-break\">break</span>\n		<span class=\"token punctuation\">}</span>\n		<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n			fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read file failed, err:\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n			<span class=\"token keyword keyword-return\">return</span>\n		<span class=\"token punctuation\">}</span>\n		content <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>n<span class=\"token punctuation\">]</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span>\n	fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"autoid-2-1-2\">bufio读取文件</h2>\n<p>bufio是在file的基础上封装了一层API，支持更多的功能。</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-package\">package</span> main\n\n<span class=\"token keyword keyword-import\">import</span> <span class=\"token punctuation\">(</span>\n	<span class=\"token string\">\"bufio\"</span>\n	<span class=\"token string\">\"fmt\"</span>\n	<span class=\"token string\">\"io\"</span>\n	<span class=\"token string\">\"os\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// bufio按行读取示例</span>\n<span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	file<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./xx.txt\"</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"open file failed, err:\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token keyword keyword-defer\">defer</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	reader <span class=\"token operator\">:=</span> bufio<span class=\"token punctuation\">.</span><span class=\"token function\">NewReader</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-for\">for</span> <span class=\"token punctuation\">{</span>\n		line<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">ReadString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\'\\n\'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//注意是字符</span>\n		<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">==</span> io<span class=\"token punctuation\">.</span>EOF <span class=\"token punctuation\">{</span>\n			<span class=\"token keyword keyword-if\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n				fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span>\n			<span class=\"token punctuation\">}</span>\n			fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件读完了\"</span><span class=\"token punctuation\">)</span>\n			<span class=\"token keyword keyword-break\">break</span>\n		<span class=\"token punctuation\">}</span>\n		<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n			fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read file failed, err:\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n			<span class=\"token keyword keyword-return\">return</span>\n		<span class=\"token punctuation\">}</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"autoid-2-2-0\">ioutil读取整个文件</h2>\n<p><code>io/ioutil</code>包的<code>ReadFile</code>方法能够读取完整的文件，只需要将文件名作为参数传入。</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-package\">package</span> main\n\n<span class=\"token keyword keyword-import\">import</span> <span class=\"token punctuation\">(</span>\n	<span class=\"token string\">\"fmt\"</span>\n	<span class=\"token string\">\"io/ioutil\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ioutil.ReadFile读取整个文件</span>\n<span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	content<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> ioutil<span class=\"token punctuation\">.</span><span class=\"token function\">ReadFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./main.go\"</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read file failed, err:\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"autoid-2-3-0\">文件写入操作</h1>\n<p><code>os.OpenFile()</code>函数能够以指定模式打开文件，从而实现文件写入相关功能。</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">OpenFile</span><span class=\"token punctuation\">(</span>name <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> flag <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> perm FileMode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>File<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>其中：</p>\n<p><code>name</code>：要打开的文件名\n<code>flag</code>：打开文件的模式。\n模式有以下几种：</p>\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>os.O_WRONLY</code></td>\n<td>只写</td>\n</tr>\n<tr>\n<td><code>os.O_CREATE</code></td>\n<td>创建文件</td>\n</tr>\n<tr>\n<td><code>os.O_RDONLY</code></td>\n<td>只读</td>\n</tr>\n<tr>\n<td><code>os.O_RDWR</code></td>\n<td>读写</td>\n</tr>\n<tr>\n<td><code>os.O_TRUNC</code></td>\n<td>清空</td>\n</tr>\n<tr>\n<td><code>os.O_APPEND</code></td>\n<td>追加</td>\n</tr>\n</tbody>\n</table>\n<p><code>perm</code>：文件权限，一个八进制数。r（读）04，w（写）02，x（执行）01。</p>\n<h2 id=\"autoid-3-0-0\">Write和WriteString</h2>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	file<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">OpenFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xx.txt\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>O_CREATE<span class=\"token operator\">|</span>os<span class=\"token punctuation\">.</span>O_TRUNC<span class=\"token operator\">|</span>os<span class=\"token punctuation\">.</span>O_WRONLY<span class=\"token punctuation\">,</span> <span class=\"token number\">0666</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"open file failed, err:\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token keyword keyword-defer\">defer</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	str <span class=\"token operator\">:=</span> <span class=\"token string\">\"hello 沙河\"</span>\n	file<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\">//写入字节切片数据</span>\n	file<span class=\"token punctuation\">.</span><span class=\"token function\">WriteString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello 小王子\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//直接写入字符串数据</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"autoid-3-1-0\">bufio.NewWriter</h2>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	file<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">OpenFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xx.txt\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>O_CREATE<span class=\"token operator\">|</span>os<span class=\"token punctuation\">.</span>O_TRUNC<span class=\"token operator\">|</span>os<span class=\"token punctuation\">.</span>O_WRONLY<span class=\"token punctuation\">,</span> <span class=\"token number\">0666</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"open file failed, err:\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token keyword keyword-defer\">defer</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	writer <span class=\"token operator\">:=</span> bufio<span class=\"token punctuation\">.</span><span class=\"token function\">NewWriter</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-for\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n		writer<span class=\"token punctuation\">.</span><span class=\"token function\">WriteString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello沙河\\n\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//将数据先写入缓存</span>\n	<span class=\"token punctuation\">}</span>\n	writer<span class=\"token punctuation\">.</span><span class=\"token function\">Flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//将缓存中的内容写入文件</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"autoid-3-2-0\">ioutil.WriteFile</h2>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	str <span class=\"token operator\">:=</span> <span class=\"token string\">\"hello 沙河\"</span>\n	err <span class=\"token operator\">:=</span> ioutil<span class=\"token punctuation\">.</span><span class=\"token function\">WriteFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./xx.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0666</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"write file failed, err:\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"autoid-3-3-0\">练习</h1>\n<h2 id=\"autoid-4-0-0\">copyFile</h2>\n<p>借助<code>io.Copy()</code>实现一个拷贝文件函数。</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token comment\">// CopyFile 拷贝文件函数</span>\n<span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">CopyFile</span><span class=\"token punctuation\">(</span>dstName<span class=\"token punctuation\">,</span> srcName <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>written <span class=\"token builtin\">int64</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	<span class=\"token comment\">// 以读方式打开源文件</span>\n	src<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span>srcName<span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"open %s failed, err:%v.\\n\"</span><span class=\"token punctuation\">,</span> srcName<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token keyword keyword-defer\">defer</span> src<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	<span class=\"token comment\">// 以写|创建的方式打开目标文件</span>\n	dst<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">OpenFile</span><span class=\"token punctuation\">(</span>dstName<span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>O_WRONLY<span class=\"token operator\">|</span>os<span class=\"token punctuation\">.</span>O_CREATE<span class=\"token punctuation\">,</span> <span class=\"token number\">0644</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"open %s failed, err:%v.\\n\"</span><span class=\"token punctuation\">,</span> dstName<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token keyword keyword-defer\">defer</span> dst<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-return\">return</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">Copy</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">)</span> <span class=\"token comment\">//调用io.Copy()拷贝内容</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">CopyFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dst.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"src.txt\"</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"copy file failed, err:\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"copy done!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"autoid-4-1-0\">实现一个cat命令</h2>\n<p>使用文件操作相关知识，模拟实现linux平台<code>cat</code>命令的功能。</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-package\">package</span> main\n\n<span class=\"token keyword keyword-import\">import</span> <span class=\"token punctuation\">(</span>\n	<span class=\"token string\">\"bufio\"</span>\n	<span class=\"token string\">\"flag\"</span>\n	<span class=\"token string\">\"fmt\"</span>\n	<span class=\"token string\">\"io\"</span>\n	<span class=\"token string\">\"os\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// cat命令实现</span>\n<span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">cat</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>bufio<span class=\"token punctuation\">.</span>Reader<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	<span class=\"token keyword keyword-for\">for</span> <span class=\"token punctuation\">{</span>\n		buf<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">ReadBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\'\\n\'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//注意是字符</span>\n		<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">==</span> io<span class=\"token punctuation\">.</span>EOF <span class=\"token punctuation\">{</span>\n			<span class=\"token keyword keyword-break\">break</span>\n		<span class=\"token punctuation\">}</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stdout<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	flag<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 解析命令行参数</span>\n	<span class=\"token keyword keyword-if\">if</span> flag<span class=\"token punctuation\">.</span><span class=\"token function\">NArg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n		<span class=\"token comment\">// 如果没有参数默认从标准输入读取内容</span>\n		<span class=\"token function\">cat</span><span class=\"token punctuation\">(</span>bufio<span class=\"token punctuation\">.</span><span class=\"token function\">NewReader</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stdin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token comment\">// 依次读取每个指定文件的内容并打印到终端</span>\n	<span class=\"token keyword keyword-for\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> flag<span class=\"token punctuation\">.</span><span class=\"token function\">NArg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n		f<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">.</span><span class=\"token function\">Arg</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n			fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stdout<span class=\"token punctuation\">,</span> <span class=\"token string\">\"reading from %s failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> flag<span class=\"token punctuation\">.</span><span class=\"token function\">Arg</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n			<span class=\"token keyword keyword-continue\">continue</span>\n		<span class=\"token punctuation\">}</span>\n		<span class=\"token function\">cat</span><span class=\"token punctuation\">(</span>bufio<span class=\"token punctuation\">.</span><span class=\"token function\">NewReader</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</div>', 19);
INSERT INTO `blog_articledetail` VALUES (20, '<div class=\"post-content\">\n<p>有时候一份清晰明了的接口文档能够极大地提高前后端双方的沟通效率和开发效率。本文将介绍如何使用swagger生成接口文档。</p>\n<h1 id=\"autoid-0-0-0\">swagger生成接口文档</h1>\n<h2 id=\"autoid-1-0-0\">swagger介绍</h2>\n<p>Swagger本质上是一种用于描述使用JSON表示的RESTful API的接口描述语言。Swagger与一组开源软件工具一起使用，以设计、构建、记录和使用RESTful Web服务。Swagger包括自动文档，代码生成和测试用例生成。</p>\n<p>在前后端分离的项目开发过程中，如果后端同学能够提供一份清晰明了的接口文档，那么就能极大地提高大家的沟通效率和开发效率。可是编写接口文档历来都是令人头痛的，而且后续接口文档的维护也十分耗费精力。</p>\n<p>最好是有一种方案能够既满足我们输出文档的需要又能随代码的变更自动更新，而Swagger正是那种能帮我们解决接口文档问题的工具。</p>\n<p>这里以gin框架为例，使用<a href=\"https://github.com/swaggo/gin-swagger\" target=\"_blank\">gin-swagger</a>库以使用Swagger 2.0自动生成RESTful API文档。</p>\n<h2 id=\"autoid-1-1-0\">gin-swagger实战</h2>\n<p>想要使用<code>gin-swagger</code>为你的代码自动生成接口文档，一般需要下面三个步骤：</p>\n<ol>\n<li>按照swagger要求给接口代码添加声明式注释，具体参照<a href=\"https://swaggo.github.io/swaggo.io/declarative_comments_format/\" target=\"_blank\">声明式注释格式</a>。</li>\n<li>使用swag工具扫描代码自动生成API接口文档数据</li>\n<li>使用gin-swagger渲染在线接口文档页面</li>\n</ol>\n<h3 id=\"autoid-1-2-0\">第一步：添加注释</h3>\n<p>在程序入口main函数上以注释的方式写下项目相关介绍信息。</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-package\">package</span> main\n\n<span class=\"token comment\">// @title 这里写标题</span>\n<span class=\"token comment\">// @version 1.0</span>\n<span class=\"token comment\">// @description 这里写描述信息</span>\n<span class=\"token comment\">// @termsOfService http://swagger.io/terms/</span>\n\n<span class=\"token comment\">// @contact.name 这里写联系人信息</span>\n<span class=\"token comment\">// @contact.url http://www.swagger.io/support</span>\n<span class=\"token comment\">// @contact.email support@swagger.io</span>\n\n<span class=\"token comment\">// @license.name Apache 2.0</span>\n<span class=\"token comment\">// @license.url http://www.apache.org/licenses/LICENSE-2.0.html</span>\n\n<span class=\"token comment\">// @host 这里写接口服务的host</span>\n<span class=\"token comment\">// @BasePath 这里写base path</span>\n<span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	r <span class=\"token operator\">:=</span> gin<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n	<span class=\"token comment\">// liwenzhou.com ...</span>\n\n	r<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在你代码中处理请求的接口函数（通常位于controller层）按如下方式写上注释：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token comment\">// GetPostListHandler2 升级版帖子列表接口</span>\n<span class=\"token comment\">// @Summary 升级版帖子列表接口</span>\n<span class=\"token comment\">// @Description 可按社区按时间或分数排序查询帖子列表接口</span>\n<span class=\"token comment\">// @Tags 帖子相关接口</span>\n<span class=\"token comment\">// @Accept application/json</span>\n<span class=\"token comment\">// @Produce application/json</span>\n<span class=\"token comment\">// @Param Authorization header string false \"Bearer 用户令牌\"</span>\n<span class=\"token comment\">// @Param object query models.ParamPostList false \"查询参数\"</span>\n<span class=\"token comment\">// @Security ApiKeyAuth</span>\n<span class=\"token comment\">// @Success 200 {object} _ResponsePostList</span>\n<span class=\"token comment\">// @Router /posts2 [get]</span>\n<span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">GetPostListHandler2</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	<span class=\"token comment\">// GET请求参数(query string)：/api/v1/posts2?page=1&amp;size=10&amp;order=time</span>\n	<span class=\"token comment\">// 初始化结构体时指定初始参数</span>\n	p <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>models<span class=\"token punctuation\">.</span>ParamPostList<span class=\"token punctuation\">{</span>\n		Page<span class=\"token punctuation\">:</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n		Size<span class=\"token punctuation\">:</span>  <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n		Order<span class=\"token punctuation\">:</span> models<span class=\"token punctuation\">.</span>OrderTime<span class=\"token punctuation\">,</span>\n	<span class=\"token punctuation\">}</span>\n\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">ShouldBindQuery</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		zap<span class=\"token punctuation\">.</span><span class=\"token function\">L</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GetPostListHandler2 with invalid params\"</span><span class=\"token punctuation\">,</span> zap<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n		<span class=\"token function\">ResponseError</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> CodeInvalidParam<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	data<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> logic<span class=\"token punctuation\">.</span><span class=\"token function\">GetPostListNew</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n	<span class=\"token comment\">// 获取数据</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		zap<span class=\"token punctuation\">.</span><span class=\"token function\">L</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"logic.GetPostList() failed\"</span><span class=\"token punctuation\">,</span> zap<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n		<span class=\"token function\">ResponseError</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> CodeServerBusy<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token function\">ResponseSuccess</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n	<span class=\"token comment\">// 返回响应</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面注释中参数类型使用了<code>object</code>，<code>models.ParamPostList</code>具体定义如下：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token comment\">// bluebell/models/params.go</span>\n\n<span class=\"token comment\">// ParamPostList 获取帖子列表query string参数</span>\n<span class=\"token keyword keyword-type\">type</span> ParamPostList <span class=\"token keyword keyword-struct\">struct</span> <span class=\"token punctuation\">{</span>\n	CommunityID <span class=\"token builtin\">int64</span>  <span class=\"token string\">`json:\"community_id\" form:\"community_id\"`</span>   <span class=\"token comment\">// 可以为空</span>\n	Page        <span class=\"token builtin\">int64</span>  <span class=\"token string\">`json:\"page\" form:\"page\" example:\"1\"`</span>       <span class=\"token comment\">// 页码</span>\n	Size        <span class=\"token builtin\">int64</span>  <span class=\"token string\">`json:\"size\" form:\"size\" example:\"10\"`</span>      <span class=\"token comment\">// 每页数据量</span>\n	Order       <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"order\" form:\"order\" example:\"score\"`</span> <span class=\"token comment\">// 排序依据</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>响应数据类型也使用的<code>object</code>，我个人习惯在controller层专门定义一个<code>docs_models.go</code>文件来存储文档中使用的响应数据model。</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token comment\">// bluebell/controller/docs_models.go</span>\n\n<span class=\"token comment\">// _ResponsePostList 帖子列表接口响应数据</span>\n<span class=\"token keyword keyword-type\">type</span> _ResponsePostList <span class=\"token keyword keyword-struct\">struct</span> <span class=\"token punctuation\">{</span>\n	Code    ResCode                 <span class=\"token string\">`json:\"code\"`</span>    <span class=\"token comment\">// 业务响应状态码</span>\n	Message <span class=\"token builtin\">string</span>                  <span class=\"token string\">`json:\"message\"`</span> <span class=\"token comment\">// 提示信息</span>\n	Data    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>models<span class=\"token punctuation\">.</span>ApiPostDetail <span class=\"token string\">`json:\"data\"`</span>    <span class=\"token comment\">// 数据</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"autoid-1-2-1\">第二步：生成接口文档数据</h3>\n<p>编写完注释后，使用以下命令安装swag工具：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">go get -u github.com/swaggo/swag/cmd/swag\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在项目根目录执行以下命令，使用swag工具生成接口文档数据。</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">swag init\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>执行完上述命令后，如果你写的注释格式没问题，此时你的项目根目录下会多出一个<code>docs</code>文件夹。</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">./docs\n├── docs.go\n├── swagger.json\n└── swagger.yaml\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"autoid-1-2-2\">第三步：引入gin-swagger渲染文档数据</h3>\n<p>然后在项目代码中注册路由的地方按如下方式引入<code>gin-swagger</code>相关内容：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\">\n<span class=\"token keyword keyword-import\">import</span> <span class=\"token punctuation\">(</span>\n	<span class=\"token comment\">// liwenzhou.com ...</span>\n\n	<span class=\"token boolean\">_</span> <span class=\"token string\">\"bluebell/docs\"</span>  <span class=\"token comment\">// 千万不要忘了导入把你上一步生成的docs</span>\n\n	gs <span class=\"token string\">\"github.com/swaggo/gin-swagger\"</span>\n	<span class=\"token string\">\"github.com/swaggo/gin-swagger/swaggerFiles\"</span>\n\n	<span class=\"token string\">\"github.com/gin-gonic/gin\"</span>\n<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>注册swagger api相关路由</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\">r<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/swagger/*any\"</span><span class=\"token punctuation\">,</span> gs<span class=\"token punctuation\">.</span><span class=\"token function\">WrapHandler</span><span class=\"token punctuation\">(</span>swaggerFiles<span class=\"token punctuation\">.</span>Handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>把你的项目程序运行起来，打开浏览器访问<a href=\"http://localhost:8080/swagger/index.html\" target=\"_blank\">http://localhost:8080/swagger/index.html</a>就能看到Swagger 2.0 Api文档了。</p>\n<p><img alt=\"gin_swagger文档\" src=\"/images/Go/gin_swagger/gin_swagger.png\"/></p>\n<p><code>gin-swagger</code>同时还提供了<code>DisablingWrapHandler</code>函数，方便我们通过设置某些环境变量来禁用Swagger。例如：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\">r<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/swagger/*any\"</span><span class=\"token punctuation\">,</span> gs<span class=\"token punctuation\">.</span><span class=\"token function\">DisablingWrapHandler</span><span class=\"token punctuation\">(</span>swaggerFiles<span class=\"token punctuation\">.</span>Handler<span class=\"token punctuation\">,</span> <span class=\"token string\">\"NAME_OF_ENV_VARIABLE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>此时如果将环境变量<code>NAME_OF_ENV_VARIABLE</code>设置为任意值，则<code>/swagger/*any</code>将返回404响应，就像未指定路由时一样。</p>\n<hr/>\n<p><strong>更多更详细的实战内容，欢迎点击博客右上角图片了解。</strong></p>\n</div>', 20);
INSERT INTO `blog_articledetail` VALUES (21, '<div class=\"post-content\">\n<p>在项目中我们通常可能会使用<code>database/sql</code>连接MySQL数据库。本文借助使用<code>sqlx</code>实现批量插入数据的例子，介绍了<code>sqlx</code>中可能被你忽视了的<code>sqlx.In</code>和<code>DB.NamedExec</code>方法。</p>\n<h2 id=\"autoid-0-0-0\">sqlx介绍</h2>\n<p>在项目中我们通常可能会使用<code>database/sql</code>连接MySQL数据库。<code>sqlx</code>可以认为是Go语言内置<code>database/sql</code>的超集，它在优秀的内置<code>database/sql</code>基础上提供了一组扩展。这些扩展中除了大家常用来查询的<code>Get(dest interface{}, ...) error</code>和<code>Select(dest interface{}, ...) error</code>外还有很多其他强大的功能。</p>\n<h2 id=\"autoid-0-1-0\">安装sqlx</h2>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-go\">go</span> get github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>jmoiron<span class=\"token operator\">/</span>sqlx\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"autoid-0-2-0\">基本使用</h2>\n<h3 id=\"autoid-0-3-0\">连接数据库</h3>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-var\">var</span> db <span class=\"token operator\">*</span>sqlx<span class=\"token punctuation\">.</span>DB\n\n<span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">initDB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	dsn <span class=\"token operator\">:=</span> <span class=\"token string\">\"user:password@tcp(127.0.0.1:3306)/sql_test?charset=utf8mb4&amp;parseTime=True\"</span>\n	<span class=\"token comment\">// 也可以使用MustConnect连接不成功就panic</span>\n	db<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> sqlx<span class=\"token punctuation\">.</span><span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mysql\"</span><span class=\"token punctuation\">,</span> dsn<span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"connect DB failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	db<span class=\"token punctuation\">.</span><span class=\"token function\">SetMaxOpenConns</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n	db<span class=\"token punctuation\">.</span><span class=\"token function\">SetMaxIdleConns</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-return\">return</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"autoid-0-3-1\">查询</h3>\n<p>查询单行数据示例代码如下：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token comment\">// 查询单条数据示例</span>\n<span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">queryRowDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	sqlStr <span class=\"token operator\">:=</span> <span class=\"token string\">\"select id, name, age from user where id=?\"</span>\n	<span class=\"token keyword keyword-var\">var</span> u user\n	err <span class=\"token operator\">:=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>u<span class=\"token punctuation\">,</span> sqlStr<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id:%d name:%s age:%d\\n\"</span><span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">.</span>Age<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>查询多行数据示例代码如下：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token comment\">// 查询多条数据示例</span>\n<span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">queryMultiRowDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	sqlStr <span class=\"token operator\">:=</span> <span class=\"token string\">\"select id, name, age from user where id &gt; ?\"</span>\n	<span class=\"token keyword keyword-var\">var</span> users <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>user\n	err <span class=\"token operator\">:=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>users<span class=\"token punctuation\">,</span> sqlStr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"query failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"users:%#v\\n\"</span><span class=\"token punctuation\">,</span> users<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"autoid-0-3-2\">插入、更新和删除</h3>\n<p>sqlx中的exec方法与原生sql中的exec使用基本一致：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token comment\">// 插入数据</span>\n<span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">insertRowDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	sqlStr <span class=\"token operator\">:=</span> <span class=\"token string\">\"insert into user(name, age) values (?,?)\"</span>\n	ret<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span>sqlStr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"沙河小王子\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"insert failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	theID<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> ret<span class=\"token punctuation\">.</span><span class=\"token function\">LastInsertId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 新插入数据的id</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get lastinsert ID failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"insert success, the id is %d.\\n\"</span><span class=\"token punctuation\">,</span> theID<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 更新数据</span>\n<span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">updateRowDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	sqlStr <span class=\"token operator\">:=</span> <span class=\"token string\">\"update user set age=? where id = ?\"</span>\n	ret<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span>sqlStr<span class=\"token punctuation\">,</span> <span class=\"token number\">39</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"update failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	n<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> ret<span class=\"token punctuation\">.</span><span class=\"token function\">RowsAffected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 操作影响的行数</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get RowsAffected failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"update success, affected rows:%d\\n\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 删除数据</span>\n<span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">deleteRowDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	sqlStr <span class=\"token operator\">:=</span> <span class=\"token string\">\"delete from user where id = ?\"</span>\n	ret<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span>sqlStr<span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"delete failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	n<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> ret<span class=\"token punctuation\">.</span><span class=\"token function\">RowsAffected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 操作影响的行数</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get RowsAffected failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"delete success, affected rows:%d\\n\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"autoid-0-3-3\">NamedExec</h3>\n<p><code>DB.NamedExec</code>方法用来绑定SQL语句与结构体或map中的同名字段。</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">insertUserDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n	sqlStr <span class=\"token operator\">:=</span> <span class=\"token string\">\"INSERT INTO user (name,age) VALUES (:name,:age)\"</span>\n	<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">NamedExec</span><span class=\"token punctuation\">(</span>sqlStr<span class=\"token punctuation\">,</span>\n		<span class=\"token keyword keyword-map\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token keyword keyword-interface\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>\n			<span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"七米\"</span><span class=\"token punctuation\">,</span>\n			<span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span>\n		<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-return\">return</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"autoid-0-3-4\">NamedQuery</h3>\n<p>与<code>DB.NamedExec</code>同理，这里是支持查询。</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">namedQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n	sqlStr <span class=\"token operator\">:=</span> <span class=\"token string\">\"SELECT * FROM user WHERE name=:name\"</span>\n	<span class=\"token comment\">// 使用map做命名查询</span>\n	rows<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">NamedQuery</span><span class=\"token punctuation\">(</span>sqlStr<span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-map\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token keyword keyword-interface\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"七米\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"db.NamedQuery failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token keyword keyword-defer\">defer</span> rows<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-for\">for</span> rows<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n		<span class=\"token keyword keyword-var\">var</span> u user\n		err <span class=\"token operator\">:=</span> rows<span class=\"token punctuation\">.</span><span class=\"token function\">StructScan</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>u<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n			fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"scan failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n			<span class=\"token keyword keyword-continue\">continue</span>\n		<span class=\"token punctuation\">}</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user:%#v\\n\"</span><span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span>\n\n	u <span class=\"token operator\">:=</span> user<span class=\"token punctuation\">{</span>\n		Name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"七米\"</span><span class=\"token punctuation\">,</span>\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token comment\">// 使用结构体命名查询，根据结构体字段的 db tag进行映射</span>\n	rows<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">NamedQuery</span><span class=\"token punctuation\">(</span>sqlStr<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"db.NamedQuery failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token keyword keyword-defer\">defer</span> rows<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-for\">for</span> rows<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n		<span class=\"token keyword keyword-var\">var</span> u user\n		err <span class=\"token operator\">:=</span> rows<span class=\"token punctuation\">.</span><span class=\"token function\">StructScan</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>u<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n			fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"scan failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n			<span class=\"token keyword keyword-continue\">continue</span>\n		<span class=\"token punctuation\">}</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user:%#v\\n\"</span><span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"autoid-0-3-5\">事务操作</h3>\n<p>对于事务操作，我们可以使用<code>sqlx</code>中提供的<code>db.Beginx()</code>和<code>tx.Exec()</code>方法。示例代码如下：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">transactionDemo2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	tx<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Beginx</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 开启事务</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"begin trans failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n		<span class=\"token keyword keyword-return\">return</span> err\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token keyword keyword-defer\">defer</span> <span class=\"token keyword keyword-func\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n		<span class=\"token keyword keyword-if\">if</span> p <span class=\"token operator\">:=</span> <span class=\"token function\">recover</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> p <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n			tx<span class=\"token punctuation\">.</span><span class=\"token function\">Rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n			<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span> <span class=\"token comment\">// re-throw panic after Rollback</span>\n		<span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-else\">else</span> <span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n			fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rollback\"</span><span class=\"token punctuation\">)</span>\n			tx<span class=\"token punctuation\">.</span><span class=\"token function\">Rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// err is non-nil; don\'t change it</span>\n		<span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-else\">else</span> <span class=\"token punctuation\">{</span>\n			err <span class=\"token operator\">=</span> tx<span class=\"token punctuation\">.</span><span class=\"token function\">Commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// err is nil; if Commit returns error update err</span>\n			fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"commit\"</span><span class=\"token punctuation\">)</span>\n		<span class=\"token punctuation\">}</span>\n	<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n	sqlStr1 <span class=\"token operator\">:=</span> <span class=\"token string\">\"Update user set age=20 where id=?\"</span>\n\n	rs<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> tx<span class=\"token punctuation\">.</span><span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span>sqlStr1<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err<span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">{</span>\n		<span class=\"token keyword keyword-return\">return</span> err\n	<span class=\"token punctuation\">}</span>\n	n<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> rs<span class=\"token punctuation\">.</span><span class=\"token function\">RowsAffected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		<span class=\"token keyword keyword-return\">return</span> err\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token keyword keyword-if\">if</span> n <span class=\"token operator\">!=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n		<span class=\"token keyword keyword-return\">return</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exec sqlStr1 failed\"</span><span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span>\n	sqlStr2 <span class=\"token operator\">:=</span> <span class=\"token string\">\"Update user set age=50 where i=?\"</span>\n	rs<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> tx<span class=\"token punctuation\">.</span><span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span>sqlStr2<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err<span class=\"token operator\">!=</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">{</span>\n		<span class=\"token keyword keyword-return\">return</span> err\n	<span class=\"token punctuation\">}</span>\n	n<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> rs<span class=\"token punctuation\">.</span><span class=\"token function\">RowsAffected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		<span class=\"token keyword keyword-return\">return</span> err\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token keyword keyword-if\">if</span> n <span class=\"token operator\">!=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n		<span class=\"token keyword keyword-return\">return</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exec sqlStr1 failed\"</span><span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token keyword keyword-return\">return</span> err\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"autoid-0-3-6\">sqlx.In</h2>\n<p><code>sqlx.In</code>是<code>sqlx</code>提供的一个非常方便的函数。</p>\n<h3 id=\"autoid-0-4-0\">sqlx.In的批量插入示例</h3>\n<h4 id=\"表结构\">表结构</h4>\n<p>为了方便演示插入数据操作，这里创建一个<code>user</code>表，表结构如下：</p>\n<pre class=\"line-numbers language-sql\"><code class=\"language-sql\">CREATE TABLE `user` (\n    `id` BIGINT(20) NOT NULL AUTO_INCREMENT,\n    `name` VARCHAR(20) DEFAULT \'\',\n    `age` INT(11) DEFAULT \'0\',\n    PRIMARY KEY(`id`)\n)ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"结构体\">结构体</h4>\n<p>定义一个<code>user</code>结构体，字段通过tag与数据库中user表的列一致。</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-type\">type</span> User <span class=\"token keyword keyword-struct\">struct</span> <span class=\"token punctuation\">{</span>\n	Name <span class=\"token builtin\">string</span> <span class=\"token string\">`db:\"name\"`</span>\n	Age  <span class=\"token builtin\">int</span>    <span class=\"token string\">`db:\"age\"`</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"bindvars-绑定变量\">bindvars（绑定变量）</h4>\n<p>查询占位符<code>?</code>在内部称为<strong>bindvars（查询占位符）</strong>,它非常重要。你应该始终使用它们向数据库发送值，因为它们可以防止SQL注入攻击。<code>database/sql</code>不尝试对查询文本进行任何验证；它与编码的参数一起按原样发送到服务器。除非驱动程序实现一个特殊的接口，否则在执行之前，查询是在服务器上准备的。因此<code>bindvars</code>是特定于数据库的:</p>\n<ul>\n<li>MySQL中使用<code>?</code></li>\n<li>PostgreSQL使用枚举的<code>$1</code>、<code>$2</code>等bindvar语法</li>\n<li>SQLite中<code>?</code>和<code>$1</code>的语法都支持</li>\n<li>Oracle中使用<code>:name</code>的语法</li>\n</ul>\n<p><code>bindvars</code>的一个常见误解是，它们用来在sql语句中插入值。它们其实仅用于参数化，不允许更改SQL语句的结构。例如，使用<code>bindvars</code>尝试参数化列或表名将不起作用：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token comment\">// ？不能用来插入表名（做SQL语句中表名的占位符）</span>\ndb<span class=\"token punctuation\">.</span><span class=\"token function\">Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT * FROM ?\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mytable\"</span><span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">// ？也不能用来插入列名（做SQL语句中列名的占位符）</span>\ndb<span class=\"token punctuation\">.</span><span class=\"token function\">Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT ?, ? FROM people\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"location\"</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"自己拼接语句实现批量插入\">自己拼接语句实现批量插入</h4>\n<p>比较笨，但是很好理解。就是有多少个User就拼接多少个<code>(?, ?)</code>。</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token comment\">// BatchInsertUsers 自行构造批量插入的语句</span>\n<span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">BatchInsertUsers</span><span class=\"token punctuation\">(</span>users <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>User<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n	<span class=\"token comment\">// 存放 (?, ?) 的slice</span>\n	valueStrings <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n	<span class=\"token comment\">// 存放values的slice</span>\n	valueArgs <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword keyword-interface\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n	<span class=\"token comment\">// 遍历users准备相关数据</span>\n	<span class=\"token keyword keyword-for\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> u <span class=\"token operator\">:=</span> <span class=\"token keyword keyword-range\">range</span> users <span class=\"token punctuation\">{</span>\n		<span class=\"token comment\">// 此处占位符要与插入值的个数对应</span>\n		valueStrings <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>valueStrings<span class=\"token punctuation\">,</span> <span class=\"token string\">\"(?, ?)\"</span><span class=\"token punctuation\">)</span>\n		valueArgs <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>valueArgs<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span>\n		valueArgs <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>valueArgs<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">.</span>Age<span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token comment\">// 自行拼接要执行的具体语句</span>\n	stmt <span class=\"token operator\">:=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"INSERT INTO user (name, age) VALUES %s\"</span><span class=\"token punctuation\">,</span>\n		strings<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span>valueStrings<span class=\"token punctuation\">,</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n	<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> DB<span class=\"token punctuation\">.</span><span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span>stmt<span class=\"token punctuation\">,</span> valueArgs<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-return\">return</span> err\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"使用sqlx-in实现批量插入\">使用sqlx.In实现批量插入</h4>\n<p>前提是需要我们的结构体实现<code>driver.Valuer</code>接口：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token punctuation\">(</span>u User<span class=\"token punctuation\">)</span> <span class=\"token function\">Value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	<span class=\"token keyword keyword-return\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword keyword-interface\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>u<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">.</span>Age<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>使用<code>sqlx.In</code>实现批量插入代码如下：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token comment\">// BatchInsertUsers2 使用sqlx.In帮我们拼接语句和参数, 注意传入的参数是[]interface{}</span>\n<span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">BatchInsertUsers2</span><span class=\"token punctuation\">(</span>users <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword keyword-interface\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n	query<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> sqlx<span class=\"token punctuation\">.</span><span class=\"token function\">In</span><span class=\"token punctuation\">(</span>\n		<span class=\"token string\">\"INSERT INTO user (name, age) VALUES (?), (?), (?)\"</span><span class=\"token punctuation\">,</span>\n		users<span class=\"token operator\">...</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 如果arg实现了 driver.Valuer, sqlx.In 会通过调用 Value()来展开它</span>\n	<span class=\"token punctuation\">)</span>\n	fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 查看生成的querystring</span>\n	fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 查看生成的args</span>\n	<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> DB<span class=\"token punctuation\">.</span><span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span> args<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-return\">return</span> err\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"使用namedexec实现批量插入\">使用NamedExec实现批量插入</h4>\n<p><strong>注意</strong> ：该功能目前有人已经推了<a href=\"https://github.com/jmoiron/sqlx/pull/285\" target=\"_blank\">#285 PR</a>，但是作者还没有发<code>release</code>，所以想要使用下面的方法实现批量插入需要暂时使用<code>master</code>分支的代码：</p>\n<p>在项目目录下执行以下命令下载并使用<code>master</code>分支代码：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">go get github.com/jmoiron/sqlx@master\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>使用<code>NamedExec</code>实现批量插入的代码如下：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token comment\">// BatchInsertUsers3 使用NamedExec实现批量插入</span>\n<span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">BatchInsertUsers3</span><span class=\"token punctuation\">(</span>users <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>User<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n	<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> DB<span class=\"token punctuation\">.</span><span class=\"token function\">NamedExec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"INSERT INTO user (name, age) VALUES (:name, :age)\"</span><span class=\"token punctuation\">,</span> users<span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-return\">return</span> err\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>把上面三种方法综合起来试一下：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n	err <span class=\"token operator\">:=</span> <span class=\"token function\">initDB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token keyword keyword-defer\">defer</span> DB<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	u1 <span class=\"token operator\">:=</span> User<span class=\"token punctuation\">{</span>Name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"七米\"</span><span class=\"token punctuation\">,</span> Age<span class=\"token punctuation\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">}</span>\n	u2 <span class=\"token operator\">:=</span> User<span class=\"token punctuation\">{</span>Name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"q1mi\"</span><span class=\"token punctuation\">,</span> Age<span class=\"token punctuation\">:</span> <span class=\"token number\">28</span><span class=\"token punctuation\">}</span>\n	u3 <span class=\"token operator\">:=</span> User<span class=\"token punctuation\">{</span>Name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"小王子\"</span><span class=\"token punctuation\">,</span> Age<span class=\"token punctuation\">:</span> <span class=\"token number\">38</span><span class=\"token punctuation\">}</span>\n\n	<span class=\"token comment\">// 方法1</span>\n	users <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>User<span class=\"token punctuation\">{</span><span class=\"token operator\">&amp;</span>u1<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>u2<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>u3<span class=\"token punctuation\">}</span>\n	err <span class=\"token operator\">=</span> <span class=\"token function\">BatchInsertUsers</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BatchInsertUsers failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span>\n\n	<span class=\"token comment\">// 方法2</span>\n	users2 <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword keyword-interface\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>u1<span class=\"token punctuation\">,</span> u2<span class=\"token punctuation\">,</span> u3<span class=\"token punctuation\">}</span>\n	err <span class=\"token operator\">=</span> <span class=\"token function\">BatchInsertUsers2</span><span class=\"token punctuation\">(</span>users2<span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BatchInsertUsers2 failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span>\n\n	<span class=\"token comment\">// 方法3</span>\n	users3 <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>User<span class=\"token punctuation\">{</span><span class=\"token operator\">&amp;</span>u1<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>u2<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>u3<span class=\"token punctuation\">}</span>\n	err <span class=\"token operator\">=</span> <span class=\"token function\">BatchInsertUsers3</span><span class=\"token punctuation\">(</span>users3<span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BatchInsertUsers3 failed, err:%v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"autoid-0-4-1\">sqlx.In的查询示例</h3>\n<p>关于<code>sqlx.In</code>这里再补充一个用法，在<code>sqlx</code>查询语句中实现In查询和FIND_IN_SET函数。即实现<code>SELECT * FROM user WHERE id in (3, 2, 1);</code>和<code>SELECT * FROM user WHERE id in (3, 2, 1) ORDER BY FIND_IN_SET(id, \'3,2,1\');</code>。</p>\n<h4 id=\"in查询\">in查询</h4>\n<p>查询id在给定id集合中的数据。</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token comment\">// QueryByIDs 根据给定ID查询</span>\n<span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">QueryByIDs</span><span class=\"token punctuation\">(</span>ids <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>users <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>User<span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n	<span class=\"token comment\">// 动态填充id</span>\n	query<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> sqlx<span class=\"token punctuation\">.</span><span class=\"token function\">In</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT name, age FROM user WHERE id IN (?)\"</span><span class=\"token punctuation\">,</span> ids<span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token comment\">// sqlx.In 返回带 `?` bindvar的查询语句, 我们使用Rebind()重新绑定它</span>\n	query <span class=\"token operator\">=</span> DB<span class=\"token punctuation\">.</span><span class=\"token function\">Rebind</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span>\n\n	err <span class=\"token operator\">=</span> DB<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>users<span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">,</span> args<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-return\">return</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"in查询和find-in-set函数\">in查询和FIND_IN_SET函数</h4>\n<p>查询id在给定id集合的数据并维持给定id集合的顺序。</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token comment\">// QueryAndOrderByIDs 按照指定id查询并维护顺序</span>\n<span class=\"token keyword keyword-func\">func</span> <span class=\"token function\">QueryAndOrderByIDs</span><span class=\"token punctuation\">(</span>ids <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>users <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>User<span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n	<span class=\"token comment\">// 动态填充id</span>\n	strIDs <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>ids<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-for\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> id <span class=\"token operator\">:=</span> <span class=\"token keyword keyword-range\">range</span> ids <span class=\"token punctuation\">{</span>\n		strIDs <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>strIDs<span class=\"token punctuation\">,</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span>\n	query<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> sqlx<span class=\"token punctuation\">.</span><span class=\"token function\">In</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT name, age FROM user WHERE id IN (?) ORDER BY FIND_IN_SET(id, ?)\"</span><span class=\"token punctuation\">,</span> ids<span class=\"token punctuation\">,</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span>strIDs<span class=\"token punctuation\">,</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-if\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n		<span class=\"token keyword keyword-return\">return</span>\n	<span class=\"token punctuation\">}</span>\n\n	<span class=\"token comment\">// sqlx.In 返回带 `?` bindvar的查询语句, 我们使用Rebind()重新绑定它</span>\n	query <span class=\"token operator\">=</span> DB<span class=\"token punctuation\">.</span><span class=\"token function\">Rebind</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span>\n\n	err <span class=\"token operator\">=</span> DB<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>users<span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">,</span> args<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n	<span class=\"token keyword keyword-return\">return</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>当然，在这个例子里面你也可以先使用<code>IN</code>查询，然后通过代码按给定的ids对查询结果进行排序。</p>\n<p>参考链接：</p>\n<p><a href=\"http://jmoiron.github.io/sqlx/\" target=\"_blank\">Illustrated guide to SQLX</a></p>\n</div>', 21);
INSERT INTO `blog_articledetail` VALUES (22, '<div class=\"theme-default-content\">\n<div class=\"content__default\">\n<h2>\n			缓存\n		</h2>\n<div class=\"language-shell extra-class\">\n<pre class=\"language-shell\"><span class=\"token operator\">&gt;</span> <span class=\"token builtin class-name\">set</span> User:1:name shanyue EX <span class=\"token number\">100</span> NX\nOK <span class=\"token operator\">&gt;</span> get User:1:name <span class=\"token string\">\"shanyue\"</span> </pre>\n</div>\n<p>\n			缓存是redis出镜率最高的一种使用场景，仅仅使用set/get就可以实现，不过也有一些需要考虑的点\n		</p>\n<ul>\n<li>\n				如何更好地设置缓存\n			</li>\n<li>\n				如何保持缓存与上游数据的一致性\n			</li>\n<li>\n				如何解决缓存血崩，缓存击穿问题\n			</li>\n</ul>\n<h2 id=\"session-用户登录及验证码\">\n			session: 用户登录及验证码\n		</h2>\n<div class=\"language-shell extra-class\">\n<pre class=\"language-shell\"><span class=\"token operator\">&gt;</span> <span class=\"token builtin class-name\">set</span> 5d27e60e6fb9a07f03576687 <span class=\"token string\">\'{\"id\": 10086, role: \"ADMIN\"}\'</span> EX <span class=\"token number\">7200</span> OK <span class=\"token operator\">&gt;</span> get 5d27e60e6fb9a07f03576687 <span class=\"token string\">\"{<span class=\"token entity\">\\\"</span>id<span class=\"token entity\">\\\"</span>: 10086, role: <span class=\"token entity\">\\\"</span>ADMIN<span class=\"token entity\">\\\"</span>}\"</span> </pre>\n</div>\n<p>\n			这也是很常用的一种场景，不过相对于有状态的 session，也可以考虑使用 JWT，各有利弊\n		</p>\n<ul>\n<li>\n<a href=\"https://juejin.im/post/5cc459976fb9a032212cc73b\" target=\"_blank\">json web token 实践登录以及校验码验证</a>\n</li>\n</ul>\n<h2 id=\"消息队列\">\n			消息队列\n		</h2>\n<div class=\"language-shell extra-class\">\n<pre class=\"language-shell\"><span class=\"token operator\">&gt;</span> lpush UserEmailQueue <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span> lpop UserEmailQueue <span class=\"token operator\">&gt;</span> rpop UserEmailQueue <span class=\"token number\">1</span> <span class=\"token operator\">&gt;</span> rpop UserEmailQueue <span class=\"token number\">2</span> </pre>\n</div>\n<p>\n			可以把redis的队列视为分布式队列，作为消息队列时，生产者在一头塞数据，消费者在另一头出数据: (lpush/rpop, rpush/lpop)。不过也有一些不足，而这些不足有可能是致命的，不过对于一些丢几条消息也没关系的场景还是可以考虑的\n		</p>\n<ol>\n<li>\n				没有 ack，有可能丢消息\n			</li>\n<li>\n				需要做redis的持久化配置\n			</li>\n</ol>\n<h2 id=\"过滤器-dupefilter\">\n			过滤器 (dupefilter)\n		</h2>\n<div class=\"language-shell extra-class\">\n<pre class=\"language-shell\"><span class=\"token operator\">&gt;</span> sadd UrlSet http://1 <span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span> <span class=\"token operator\">&gt;</span> sadd UrlSet http://2 <span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span> <span class=\"token operator\">&gt;</span> sadd UrlSet http://2 <span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">0</span> <span class=\"token operator\">&gt;</span> smembers UrlSet <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"http://1\"</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"http://2\"</span> </pre>\n</div>\n<p>\n<a href=\"https://github.com/rmax/scrapy-redis\" target=\"_blank\">scrapy-redis</a> 作为分布式的爬虫框架，便是使用了redis的Set这个数据结构来对将要爬取的 url 进行去重处理。\n		</p>\n<div class=\"language-python extra-class\">\n<pre class=\"language-python\"><span class=\"token comment\"># https://github.com/rmax/scrapy-redis/blob/master/src/scrapy_redis/dupefilter.py</span> <span class=\"token keyword\">def</span> <span class=\"token function\">request_seen</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token triple-quoted-string string\">\"\"\"Returns True if request was already seen.\n    Parameters\n    ----------\n    request : scrapy.http.Request\n    Returns\n    -------\n    bool\n    \"\"\"</span> fp <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>request_fingerprint<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span> added <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">.</span>sadd<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> added <span class=\"token operator\">==</span> <span class=\"token number\">0</span> </pre>\n</div>\n<p>\n			不过当url过多时，会有内存占用过大的问题\n		</p>\n<h2 id=\"分布式锁\">\n			分布式锁\n		</h2>\n<div class=\"language-shell extra-class\">\n<pre class=\"language-shell\"><span class=\"token builtin class-name\">set</span> Lock:User:10086 06be97fc-f258-4202-b60b-8d5412dd5605 EX <span class=\"token number\">60</span> NX <span class=\"token comment\"># 释放锁，一段 LUA 脚本</span> <span class=\"token keyword\">if</span> redis.call<span class=\"token punctuation\">(</span><span class=\"token string\">\"get\"</span>,KEYS<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> ARGV<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">then</span> <span class=\"token builtin class-name\">return</span> redis.call<span class=\"token punctuation\">(</span><span class=\"token string\">\"del\"</span>,KEYS<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token builtin class-name\">return</span> <span class=\"token number\">0</span> end</pre>\n</div>\n<p>\n			这是一个最简单的单机版的分布式锁，有以下要点\n		</p>\n<ul>\n<li>\n				EX表示锁会过期释放\n			</li>\n<li>\n				NX保证原子性\n			</li>\n<li>\n				解锁时对比资源对应产生的 UUID，避免误解锁\n			</li>\n</ul>\n<p>\n			当你使用分布式锁是为了解决一些性能问题，如分布式定时任务防止执行多次 (做好幂等性)，而且鉴于单点redis挂掉的可能性很小，可以使用这种单机版的分布式锁。\n		</p>\n<h2 id=\"rate-limit\">\n			Rate Limit\n		</h2>\n<p>\n			限流即在单位时间内只允许通过特定数量的请求，有两个关键参数\n		</p>\n<ul>\n<li>\n				window，单位时间\n			</li>\n<li>\n				max，最大请求数量\n			</li>\n</ul>\n<p>\n			最常见的场景: 短信验证码一分钟只能发送两次\n		</p>\n<div class=\"language-shell extra-class\">\n<pre class=\"language-shell\">FUNCTION LIMIT_API_CALL<span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">)</span>:\ncurrent <span class=\"token operator\">=</span> GET<span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">)</span> IF current <span class=\"token operator\">!=</span> NULL AND current <span class=\"token operator\">&gt;</span> <span class=\"token number\">10</span> THEN\n    ERROR <span class=\"token string\">\"too many requests per second\"</span> ELSE\n    value <span class=\"token operator\">=</span> INCR<span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">)</span> IF value <span class=\"token operator\">==</span> <span class=\"token number\">1</span> THEN\n        EXPIRE<span class=\"token punctuation\">(</span>ip,1<span class=\"token punctuation\">)</span> END\n    PERFORM_API_CALL<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> END</pre>\n</div>\n<p>\n			可以使用计数器对 API 的请求进行限流处理，但是要注意几个问题\n		</p>\n<ol>\n<li>\n				在平滑的滑动窗口时间内在极限情况下会有两倍数量的请求数\n			</li>\n<li>\n				条件竞争 (Race Condition)\n			</li>\n</ol>\n<p>\n			这时候可以通过编程，根据TTL key进行进一步限制，或者使用一个LIST来维护每次请求打来的时间戳进行实时过滤。以下是node实现的一个Rate Limter。参考源码 <a href=\"https://github.com/animir/node-rate-limiter-flexible\" target=\"_blank\">node-rate-limiter-flexible</a>\n</p>\n<div class=\"language-javascript extra-class\">\n<pre class=\"language-javascript\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>client <span class=\"token punctuation\">.</span><span class=\"token function\">multi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>rlKey<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'EX\'</span><span class=\"token punctuation\">,</span> secDuration<span class=\"token punctuation\">,</span> <span class=\"token string\">\'NX\'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span><span class=\"token function\">incrby</span><span class=\"token punctuation\">(</span>rlKey<span class=\"token punctuation\">,</span> points<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span><span class=\"token function\">pttl</span><span class=\"token punctuation\">(</span>rlKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">return</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>consumedPoints <span class=\"token operator\">&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>points<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// ...</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>execEvenly <span class=\"token operator\">&amp;&amp;</span> res<span class=\"token punctuation\">.</span>msBeforeNext <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>res<span class=\"token punctuation\">.</span>isFirstInDuration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// ...</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> </pre>\n</div>\n<ul>\n<li>\n<a href=\"https://github.com/animir/node-rate-limiter-flexible\" target=\"_blank\">node-rate-limiter-flexible</a>\n</li>\n<li>\n<a href=\"https://juejin.im/post/5cceafe5f265da039d32966d\" target=\"_blank\">邮件发送，限流，漏桶与令牌桶</a>\n</li>\n</ul>\n<h2 id=\"分布式-websocket\">\n<br/>\n</h2>\n</div>\n</div>', 22);
INSERT INTO `blog_articledetail` VALUES (23, '<h2><span style=\"background-color: #00ccff;\">一、用户管理</span></h2>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'64e1a6f4-9d89-4c25-acfa-0a09338dfbf7\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_64e1a6f4-9d89-4c25-acfa-0a09338dfbf7\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_64e1a6f4-9d89-4c25-acfa-0a09338dfbf7\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_64e1a6f4-9d89-4c25-acfa-0a09338dfbf7\">\n<pre><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 创建用户</span>\n<span style=\"color: #0000ff;\">create</span> <span style=\"color: #ff00ff;\">user</span> \"用户名\"@\"IP地址\" identified <span style=\"color: #0000ff;\">by</span><span style=\"color: #000000;\"> \"密码\";\n</span><span style=\"color: #0000ff;\">create</span> <span style=\"color: #ff00ff;\">user</span> \"pd\"@\"<span style=\"color: #800000; font-weight: bold;\">192.168</span>.<span style=\"color: #800000; font-weight: bold;\">1.1</span>\" identified <span style=\"color: #0000ff;\">by</span> \"<span style=\"color: #800000; font-weight: bold;\">123456</span><span style=\"color: #000000;\">\";\n</span><span style=\"color: #0000ff;\">create</span> <span style=\"color: #ff00ff;\">user</span> \"pd\"@\"<span style=\"color: #800000; font-weight: bold;\">192.168</span>.<span style=\"color: #808080;\">%</span>\" identified <span style=\"color: #0000ff;\">by</span> \"<span style=\"color: #800000; font-weight: bold;\">123456</span><span style=\"color: #000000;\">\";\n</span><span style=\"color: #0000ff;\">create</span> <span style=\"color: #ff00ff;\">user</span> \"pd\"@\"<span style=\"color: #808080;\">%</span>\" identified <span style=\"color: #0000ff;\">by</span> \"<span style=\"color: #800000; font-weight: bold;\">123456</span><span style=\"color: #000000;\">\";\n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 删除用户</span>\n<span style=\"color: #0000ff;\">drop</span> <span style=\"color: #ff00ff;\">user</span><span style=\"color: #000000;\"> \"用户名\"@\"IP地址\";\n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 修改用户</span>\nrename <span style=\"color: #ff00ff;\">user</span> \"用户名\"@\"IP地址\" <span style=\"color: #0000ff;\">to</span><span style=\"color: #000000;\"> \"新用户名\"@\"IP地址\";\n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 修改密码（5.7版本）</span>\n<span style=\"color: #0000ff;\">update</span> mysql.<span style=\"color: #ff00ff;\">user</span> <span style=\"color: #0000ff;\">set</span> authentication_string<span style=\"color: #808080;\">=</span>password(\"新密码\") <span style=\"color: #0000ff;\">where</span> <span style=\"color: #ff00ff;\">user</span><span style=\"color: #808080;\">=</span><span style=\"color: #000000;\">\"用户名\";\nflush </span><span style=\"color: #0000ff;\">privileges</span><span style=\"color: #000000;\">;  # 刷新权限\n\nPS：用户权限相关数据保存在mysql数据库的user表中，所以也可以直接对其进行操作（不建议）。\n    查看所有用户和IP地址\n        </span><span style=\"color: #0000ff;\">select</span> <span style=\"color: #ff00ff;\">user</span>,host <span style=\"color: #0000ff;\">from</span> <span style=\"color: #ff00ff;\">user</span>;</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<h3><span style=\"background-color: #99cc00;\"><strong>忘记密码</strong></span></h3>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'781a7e61-ea74-4725-a7ea-473f0102ca87\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_781a7e61-ea74-4725-a7ea-473f0102ca87\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_781a7e61-ea74-4725-a7ea-473f0102ca87\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_781a7e61-ea74-4725-a7ea-473f0102ca87\">\n<pre><span style=\"color: #000000;\">在忘记root密码的时候，可以这样:\n \n# </span><span style=\"color: #800000; font-weight: bold;\">1</span><span style=\"color: #000000;\">.首先打开cmd窗口,关闭mysql服务\nnet stop mysql\n \n# </span><span style=\"color: #800000; font-weight: bold;\">2</span><span style=\"color: #000000;\">.然后跳过权限检查,启动mysql,输入命令\nmysqld </span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\">skip-grant-tables</span>\n<span style=\"color: #000000;\"> \n# </span><span style=\"color: #800000; font-weight: bold;\">3</span><span style=\"color: #000000;\">.重新打开一个新的cmd窗口,启动客户端(已跳过权限检查,可以直接登录)\nmysql\n \n# </span><span style=\"color: #800000; font-weight: bold;\">4</span><span style=\"color: #000000;\">.直接进来,修改密码\n</span><span style=\"color: #0000ff;\">update</span> mysql.<span style=\"color: #ff00ff;\">user</span> <span style=\"color: #0000ff;\">set</span> authentication_string<span style=\"color: #808080;\">=</span>password(\"新密码\") <span style=\"color: #0000ff;\">where</span> <span style=\"color: #ff00ff;\">user</span><span style=\"color: #808080;\">=</span><span style=\"color: #000000;\">\"root\";\n\n# </span><span style=\"color: #800000; font-weight: bold;\">5</span><span style=\"color: #000000;\">.刷新权限\nflush </span><span style=\"color: #0000ff;\">privileges</span>;</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<h2><span style=\"background-color: #00ccff;\"><strong>二、授权管理</strong></span></h2>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'30128341-a0ae-42fe-b3af-ccb42e8201b7\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_30128341-a0ae-42fe-b3af-ccb42e8201b7\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_30128341-a0ae-42fe-b3af-ccb42e8201b7\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_30128341-a0ae-42fe-b3af-ccb42e8201b7\">\n<pre><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 查看权限</span>\n    show grants <span style=\"color: #0000ff;\">for</span><span style=\"color: #000000;\"> \"用户名\"@\"IP地址\";\n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 授权</span>\n    <span style=\"color: #0000ff;\">grant</span> 权限 <span style=\"color: #0000ff;\">on</span> 数据库名.表名 <span style=\"color: #0000ff;\">to</span><span style=\"color: #000000;\"> \"用户名\"@\"IP地址\";\n    </span><span style=\"color: #0000ff;\">grant</span> <span style=\"color: #0000ff;\">select</span>,<span style=\"color: #0000ff;\">insert</span>,<span style=\"color: #0000ff;\">update</span> <span style=\"color: #0000ff;\">on</span> db.tb <span style=\"color: #0000ff;\">to</span> \"pd\"@\"<span style=\"color: #808080;\">%</span><span style=\"color: #000000;\">\";\n    </span><span style=\"color: #0000ff;\">grant</span> <span style=\"color: #808080;\">all</span> <span style=\"color: #0000ff;\">privileges</span> <span style=\"color: #0000ff;\">on</span> db.tb <span style=\"color: #0000ff;\">to</span> \"pd\"@\"<span style=\"color: #808080;\">%</span><span style=\"color: #000000;\">\";\n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 取消权限</span>\n    <span style=\"color: #0000ff;\">revoke</span> 权限 <span style=\"color: #0000ff;\">on</span> 数据库名.表名 <span style=\"color: #0000ff;\">from</span> \"用户\"@\"IP地址\";</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p><span style=\"font-size: 14px; background-color: #ffffff;\"><strong>关于权限</strong></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'44c4a31f-7aa4-4e1d-acfd-f5b82406aff0\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_44c4a31f-7aa4-4e1d-acfd-f5b82406aff0\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_44c4a31f-7aa4-4e1d-acfd-f5b82406aff0\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_44c4a31f-7aa4-4e1d-acfd-f5b82406aff0\">\n<pre><span style=\"color: #000000;\">关于权限\n    all privileges          除grant外的所有权限\n    select                  仅查权限\n    select,insert           查和插入权限\n    ...\n    usage                   无访问权限\n    alter                   使用alter table\n    alter routine           使用alter procedure和drop procedure\n    create                  使用create table\n    create routine          使用create procedure\n    create temporary tables 使用create temporary tables\n    create user             使用create user、drop user、rename user和revoke  all privileges\n    create view             使用create view\n    delete                  使用delete\n    drop                    使用drop table\n    execute                 使用call和存储过程\n    file                    使用select into outfile 和 load data infile\n    grant option            使用grant 和 revoke\n    index                   使用index\n    insert                  使用insert\n    lock tables             使用lock table\n    process                 使用show full processlist\n    select                  使用select\n    show databases          使用show databases\n    show view               使用show view\n    update                  使用update\n    reload                  使用flush\n    shutdown                使用mysqladmin shutdown(关闭MySQL)\n    super                   使用change master、kill、logs、purge、master和set </span><span style=\"color: #0000ff;\">global</span><span style=\"color: #000000;\">；还允许mysqladmin调试登陆\n    replication client      服务器位置的访问\n    replication slave       由复制从属使用</span></pre>\n</div>\n<span class=\"cnblogs_code_collapse\">关于权限</span></div>\n<p><span style=\"font-size: 14px; background-color: #ffffff;\"><strong>关于用户和IP</strong></span></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">用户名</span><span style=\"color: #800000;\">\"</span>@<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">IP地址</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">　　　　  用户只能在该IP下才能访问\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">用户名</span><span style=\"color: #800000;\">\"</span>@<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">192.168.%</span><span style=\"color: #800000;\">\"</span>     用户只能在该IP段下才能访问(通配符%<span style=\"color: #000000;\">表示任意)\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">用户名</span><span style=\"color: #800000;\">\"</span>@<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%</span><span style=\"color: #800000;\">\"</span>             用户可以在任意IP下访问(默认IP地址为%)</pre>\n</div>\n<h2><span style=\"background-color: #00ccff;\">三、数据库操作</span></h2>\n<div class=\"cnblogs_code\">\n<pre>数据库名.<span style=\"color: #808080;\">*</span>        <span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 数据库中的所有表</span>\n数据库名.表名　　　 <span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 指定数据库中的某张表</span>\n数据库名.存储过程   <span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 指定数据库中的存储过程</span>\n<span style=\"color: #808080;\">*</span>.<span style=\"color: #808080;\">*</span>               <span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 所有数据库</span></pre>\n</div>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 显示数据库</span>\n<span style=\"color: #000000;\">show databases;\n<br/></span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 创建数据库</span>\n<span style=\"color: #0000ff;\">create</span> <span style=\"color: #0000ff;\">database</span> 数据库名 <span style=\"color: #0000ff;\">default</span><span style=\"color: #000000;\"> charset utf8;\n</span><span style=\"color: #0000ff;\">create</span> <span style=\"color: #0000ff;\">database</span> 数据库名 <span style=\"color: #0000ff;\">default</span><span style=\"color: #000000;\"> charset gbk;\n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 删除数据库</span>\n<span style=\"color: #0000ff;\">drop</span> <span style=\"color: #0000ff;\">database</span><span style=\"color: #000000;\"> 数据库名;\n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 使用数据库</span>\n<span style=\"color: #0000ff;\">use</span><span style=\"color: #000000;\"> 数据库名;\n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 查询当前操作所在的数据库名称</span>\n<span style=\"color: #0000ff;\">select</span> <span style=\"color: #0000ff;\">database</span><span style=\"color: #000000;\">();\n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 显示当前使用的数据库中所有表</span>\nshow tables;</pre>\n</div>\n<h2><span style=\"background-color: #00ccff;\">四、MySQL数据类型</span></h2>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'44554ee7-e018-4f09-9439-aaf790524f6e\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_44554ee7-e018-4f09-9439-aaf790524f6e\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_44554ee7-e018-4f09-9439-aaf790524f6e\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_44554ee7-e018-4f09-9439-aaf790524f6e\">\n<pre><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> bit[(m)]</span>\n    二进制位（101001），m表示二进制位的长度（1-64），默认m＝1\n    \n<span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> tinyint[(m)][unsigned][zerofill]</span>\n<span style=\"color: #000000;\">    小整数，数据类型用于保存一些范围的整数数值范围\n        有符号：</span>-128 ～ 127<span style=\"color: #000000;\">\n        无符号：0 ～ </span>255<span style=\"color: #000000;\">\n        特别的：MySQL中无布尔值，使用tinyint(</span>1<span style=\"color: #000000;\">)构造\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> int[(m)][unsigned][zerofill]</span>\n<span style=\"color: #000000;\">    整数，数据类型用于保存一些范围的整数数值范围\n        有符号：</span>-2147483648 ～ 2147483647<span style=\"color: #000000;\">\n        无符号：0 ～ </span>4294967295<span style=\"color: #000000;\">\n        特别的：整数类型中的m仅用于显示，对存储范围无限制。例如：int(</span>5)，当插入数据2时，select时数据显示为：00002\n        \n<span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> big[(m)][unsigned][zerofill]</span>\n<span style=\"color: #000000;\">    大整数，数据类型用于保存一些范围的整数数值范围\n        有符号：</span>-9223372036854775808 ～ 9223372036854775807<span style=\"color: #000000;\">\n        无符号：0 ～ </span>18446744073709551615\n\n<span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> decimal[(m[,d])][unsigned][zerofill]</span>\n<span style=\"color: #000000;\">    准确的小数值，m是数字总个数（负号不算），d是小数点后个数。 m最大值为65，d最大值为30。\n        特别的：对于精确数值计算时需要用此类型\n            decaimal能够存储精确值的原因在于其内部按照字符串存储\n            \n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> float[(m,d)][unsigned][zerofill]</span>\n<span style=\"color: #000000;\">    单精度浮点数（非准确小数值），m是数字总个数，d是小数点后个数\n        无符号：\n            </span>-3.402823466E+38 to -1.175494351E-38<span style=\"color: #000000;\">,\n            0\n            </span>1.175494351E-38 to 3.402823466E+38<span style=\"color: #000000;\">\n        有符号：\n            0\n            </span>1.175494351E-38 to 3.402823466E+38<span style=\"color: #000000;\">\n        特别的：</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\">##数值越大，越不准确###</span>\n\n<span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> double[(m,d)][unsigned][zerofill]</span>\n<span style=\"color: #000000;\">    双精度浮点数（非准确小数值），m是数字总个数，d是小数点后个数\n        无符号：\n            </span>-1.7976931348623157E+308 to -2.2250738585072014E-308<span style=\"color: #000000;\">\n            0\n            </span>2.2250738585072014E-308 to 1.7976931348623157E+308<span style=\"color: #000000;\">\n        有符号：\n            0\n            </span>2.2250738585072014E-308 to 1.7976931348623157E+308<span style=\"color: #000000;\">\n        特别的：</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\">##数值越大，越不准确###</span>\n        \n<span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> char(m)</span>\n<span style=\"color: #000000;\">    char数据类型用于表示固定长度的字符串，可以包含最多达255个字符。其中m代表字符串的长度\n        PS: 即使数据小于m长度，也会占用m长度\n    \n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> varchar(m)</span>\n<span style=\"color: #000000;\">    varchars数据类型用于变长的字符串，可以包含最多达255个字符。其中m代表该数据类型所允\n    许保存的字符串的最大长度，只要长度小于该最大值的字符串都可以被保存在该数据类型中\n        PS:虽然varchar使用起来较为灵活，但是从整个系统的性能角度来说，char数据类型的处理速度更快，有时甚至可\n           以超出varchar处理速度的50</span>%<span style=\"color: #000000;\">。因此，用户在设计数据库时应当综合考虑各方面的因素，以求达到最佳的平衡\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> text</span>\n    text数据类型用于保存变长的大字符串，可以组多到65535(2**16 − 1<span style=\"color: #000000;\">)个字符\n    \n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> mediumtext</span>\n    一个text列，最大长度为16777215（2**24 - 1<span style=\"color: #000000;\">）个字符\n    \n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> longtext</span>\n    一个text列，最大长度为4294967295（2**32 - 1<span style=\"color: #000000;\">）个字符\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> enum</span>\n<span style=\"color: #000000;\">    枚举类型：enum列最多可包含65535个不同的元素\n    示例：\n        create table shirts(\n            name char(</span>32<span style=\"color: #000000;\">),\n            size enum(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">x-small</span><span style=\"color: #800000;\">\"</span>,<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">small</span><span style=\"color: #800000;\">\"</span>,<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">medium</span><span style=\"color: #800000;\">\"</span>,<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">large</span><span style=\"color: #800000;\">\"</span>,<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">x-large</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\n        )engine</span>=innodb default charset=<span style=\"color: #000000;\">utf8;\n        \n        insert shirts(name, size) values(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">dress shirt</span><span style=\"color: #800000;\">\"</span>,<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">large</span><span style=\"color: #800000;\">\"</span>),(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">t-shirt</span><span style=\"color: #800000;\">\"</span>,<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">medium</span><span style=\"color: #800000;\">\"</span>),(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">polo shirt</span><span style=\"color: #800000;\">\"</span>,<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">small</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n        \n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> set</span>\n<span style=\"color: #000000;\">    集合类型：set列最多可包含64个不同的成员\n    示例：\n        create table myset(col set(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">a</span><span style=\"color: #800000;\">\"</span>,<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">b</span><span style=\"color: #800000;\">\"</span>,<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">c</span><span style=\"color: #800000;\">\"</span>,<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">d</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\n        \n        insert into myset(col) values(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">a,d</span><span style=\"color: #800000;\">\"</span>),(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">d,a</span><span style=\"color: #800000;\">\"</span>),(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">a,d,a</span><span style=\"color: #800000;\">\"</span>),(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">a,d,d</span><span style=\"color: #800000;\">\"</span>),(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">d,a,d</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n        \n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> data</span>\n    YYYY-MM-DD，例如：2018-08-10\n    \n<span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> time</span>\n    HH:MM:SS，例如：11:11:11\n\n<span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> datetime</span>\n    YYYY-MM-DD HH:MM:SS，例如：2018-08-10 11:11:11\n    \n<span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> year</span>\n    YYYY，例如：2018\n    \n<span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> timestamp</span>\n    YYYY-MM-DD HH:MM:SS，例如：2018-08-10 11:11:11</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p><a href=\"https://dev.mysql.com/doc/refman/5.7/en/data-types.html\" target=\"_blank\">参考</a></p>\n<h2><span style=\"background-color: #00ccff;\">五、数据表操作</span></h2>\n<h3><span style=\"background-color: #99cc00;\"><strong>创建表</strong></span></h3>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 示例</span>\n<span style=\"color: #0000ff;\">create</span> <span style=\"color: #0000ff;\">table</span><span style=\"color: #000000;\"> t1(\n　　id </span><span style=\"color: #0000ff;\">int</span> <span style=\"color: #808080;\">not</span> <span style=\"color: #0000ff;\">null</span> auto_increment <span style=\"color: #0000ff;\">primary</span> <span style=\"color: #0000ff;\">key</span><span style=\"color: #000000;\">,\n　　name </span><span style=\"color: #0000ff;\">char</span>(<span style=\"color: #800000; font-weight: bold;\">10</span>) <span style=\"color: #808080;\">not</span> <span style=\"color: #0000ff;\">null</span> <span style=\"color: #0000ff;\">unique</span><span style=\"color: #000000;\">,\n　　age </span><span style=\"color: #0000ff;\">int</span> <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">\n)engine</span><span style=\"color: #808080;\">=</span>innodb <span style=\"color: #0000ff;\">default</span> charset<span style=\"color: #808080;\">=</span><span style=\"color: #000000;\">utf8;\n\nPS：\n</span><span style=\"color: #808080;\">not</span> <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">：表示此列不能为空\n\nauto_increment：表示自增长，默认每次增长</span><span style=\"color: #808080;\">+</span><span style=\"color: #800000; font-weight: bold;\">1</span><span style=\"color: #000000;\">\n注意：自增长只能添加在主键或者唯一索引字段上\n\n</span><span style=\"color: #0000ff;\">primary</span> <span style=\"color: #0000ff;\">key</span><span style=\"color: #000000;\">：表示主键(唯一且不为空)\nengine</span><span style=\"color: #808080;\">=</span><span style=\"color: #000000;\">innodb：表示指定当前表的存储引擎\n</span><span style=\"color: #0000ff;\">default</span> charset<span style=\"color: #808080;\">=</span>utf8：设置表的默认编码集</pre>\n</div>\n<p><strong>创建表的示例：</strong></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'0f3546c6-0bed-4c32-8db1-d8ca50f2f8e9\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_0f3546c6-0bed-4c32-8db1-d8ca50f2f8e9\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_0f3546c6-0bed-4c32-8db1-d8ca50f2f8e9\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_0f3546c6-0bed-4c32-8db1-d8ca50f2f8e9\">\n<pre><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 是否为空</span>\n    <span style=\"color: #0000ff;\">null</span>        <span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 可空，非字符串</span>\n    <span style=\"color: #808080;\">not</span> <span style=\"color: #0000ff;\">null</span>    <span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 不可空</span>\n\n<span style=\"color: #008080;\">--</span><span style=\"color: #008080;\">--------------------------------------------------------------------------</span><span style=\"color: #008080;\">\n--</span><span style=\"color: #008080;\"> 默认值</span>\n<span style=\"color: #000000;\">    创建字段时可以指定默认值，当插入数据时如果未主动设置，则自动添加默认值\n    </span><span style=\"color: #0000ff;\">create</span> <span style=\"color: #0000ff;\">table</span><span style=\"color: #000000;\"> tb(\n    　　name </span><span style=\"color: #0000ff;\">char</span>(<span style=\"color: #800000; font-weight: bold;\">10</span>) <span style=\"color: #808080;\">not</span> <span style=\"color: #0000ff;\">null</span> <span style=\"color: #0000ff;\">default</span> <span style=\"color: #800000; font-weight: bold;\">0</span><span style=\"color: #000000;\">\n    );\n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\">--------------------------------------------------------------------------</span><span style=\"color: #008080;\">\n--</span><span style=\"color: #008080;\"> 自增</span>\n<span style=\"color: #000000;\">    如果为某列设置自增列，插入数据时无需设置此列，默认将自增（表中只能有一个自增列）\n    </span><span style=\"color: #0000ff;\">create</span> <span style=\"color: #0000ff;\">table</span><span style=\"color: #000000;\"> tb(\n        id </span><span style=\"color: #0000ff;\">int</span> <span style=\"color: #808080;\">not</span> <span style=\"color: #0000ff;\">null</span> auto_increment <span style=\"color: #0000ff;\">primary</span> <span style=\"color: #0000ff;\">key</span><span style=\"color: #000000;\">\n    );\n    或者\n    </span><span style=\"color: #0000ff;\">create</span> <span style=\"color: #0000ff;\">table</span><span style=\"color: #000000;\"> tb(\n        id </span><span style=\"color: #0000ff;\">int</span> <span style=\"color: #808080;\">not</span> <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\"> auto_increment,\n        </span><span style=\"color: #0000ff;\">index</span><span style=\"color: #000000;\">(id)\n    );\n    </span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\">--------------------------------------</span>\n    <span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 注意：对于自增列，必须是索引（含主键）；对于自增可以设置步长和起始值，如下：</span>\n<span style=\"color: #000000;\">        基于会话级别：修改仅对此次登录有效（一次登录就表示一次会话）\n            show session variables </span><span style=\"color: #808080;\">like</span> \"auto_inc<span style=\"color: #808080;\">%</span><span style=\"color: #000000;\">\";    查看全局变量\n            </span><span style=\"color: #0000ff;\">set</span> session auto_increment_increment<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">2</span><span style=\"color: #000000;\">;     设置步长\n            </span><span style=\"color: #0000ff;\">set</span> session auto_increment_offset<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">10</span><span style=\"color: #000000;\">;       设置起始值（一般不用）\n        基于全局级别：永久有效\n            show global variables </span><span style=\"color: #808080;\">like</span> \"auto_inc<span style=\"color: #808080;\">%</span><span style=\"color: #000000;\">\";     查看全局变量\n            </span><span style=\"color: #0000ff;\">set</span> global auto_increment_increment<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">2</span><span style=\"color: #000000;\">;      设置步长\n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\">--------------------------------------------------------------------------</span><span style=\"color: #008080;\">\n--</span><span style=\"color: #008080;\"> 普通索引</span>\n    <span style=\"color: #0000ff;\">create</span> <span style=\"color: #0000ff;\">table</span><span style=\"color: #000000;\"> tb(\n       id </span><span style=\"color: #0000ff;\">int</span> <span style=\"color: #808080;\">not</span> <span style=\"color: #0000ff;\">null</span> auto_increment <span style=\"color: #0000ff;\">primary</span> <span style=\"color: #0000ff;\">key</span><span style=\"color: #000000;\">,\n       name </span><span style=\"color: #0000ff;\">varchar</span>(<span style=\"color: #800000; font-weight: bold;\">10</span>) <span style=\"color: #808080;\">not</span> <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">,\n       </span><span style=\"color: #0000ff;\">index</span><span style=\"color: #000000;\"> idx_name (name)  \n    );\n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\">--------------------------------------------------------------------------</span><span style=\"color: #008080;\">\n--</span><span style=\"color: #008080;\"> 唯一索引</span>\n    <span style=\"color: #0000ff;\">create</span> <span style=\"color: #0000ff;\">table</span><span style=\"color: #000000;\"> tb(\n        xx </span><span style=\"color: #0000ff;\">int</span> <span style=\"color: #0000ff;\">unique</span><span style=\"color: #000000;\">,\n        oo </span><span style=\"color: #0000ff;\">int</span> <span style=\"color: #0000ff;\">unique</span><span style=\"color: #000000;\">\n    );\n    </span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\">--------------------------------------</span>\n    <span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 唯一索引作用：</span>\n<span style=\"color: #000000;\">        索引列的值必须唯一，允许有空值\n        与主键索引区别：一种特殊的唯一索引，不允许有空值\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\">--------------------------------------------------------------------------</span><span style=\"color: #008080;\">\n--</span><span style=\"color: #008080;\"> 联合唯一索引</span>\n    <span style=\"color: #0000ff;\">create</span> <span style=\"color: #0000ff;\">table</span><span style=\"color: #000000;\"> tb(\n        xx </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\">,\n        oo </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\">,\n        </span><span style=\"color: #0000ff;\">unique</span> <span style=\"color: #0000ff;\">index</span><span style=\"color: #000000;\"> 索引名 (xx, oo)  # 索引名可不写\n    )\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\">--------------------------------------------------------------------------</span><span style=\"color: #008080;\">\n--</span><span style=\"color: #008080;\"> 主键</span>\n<span style=\"color: #000000;\">    一种特殊的唯一索引，不允许有空值，一个表只能有一个主键。如果主键使用单个列，则它的值必须唯一；如果是多列，则其组合必须唯一。\n    </span><span style=\"color: #0000ff;\">create</span> <span style=\"color: #0000ff;\">table</span><span style=\"color: #000000;\"> tb(\n        id </span><span style=\"color: #0000ff;\">int</span> <span style=\"color: #808080;\">not</span> <span style=\"color: #0000ff;\">null</span> auto_increment <span style=\"color: #0000ff;\">primary</span> <span style=\"color: #0000ff;\">key</span><span style=\"color: #000000;\">\n    );\n    或者\n    </span><span style=\"color: #0000ff;\">create</span> <span style=\"color: #0000ff;\">table</span><span style=\"color: #000000;\"> tb(\n        id </span><span style=\"color: #0000ff;\">int</span> <span style=\"color: #808080;\">not</span> <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">,\n        num </span><span style=\"color: #0000ff;\">int</span> <span style=\"color: #808080;\">not</span> <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">,\n        </span><span style=\"color: #0000ff;\">primary</span> <span style=\"color: #0000ff;\">key</span><span style=\"color: #000000;\"> (id, num)\n    );\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\">--------------------------------------------------------------------------    </span><span style=\"color: #008080;\">\n--</span><span style=\"color: #008080;\"> 外键</span>\n    <span style=\"color: #0000ff;\">create</span> <span style=\"color: #0000ff;\">table</span><span style=\"color: #000000;\"> department(\n        id </span><span style=\"color: #0000ff;\">int</span> <span style=\"color: #808080;\">not</span> <span style=\"color: #0000ff;\">null</span> auto_increment <span style=\"color: #0000ff;\">primary</span> <span style=\"color: #0000ff;\">key</span><span style=\"color: #000000;\">,\n        name </span><span style=\"color: #0000ff;\">char</span>(<span style=\"color: #800000; font-weight: bold;\">10</span><span style=\"color: #000000;\">)\n    );\n\n    </span><span style=\"color: #0000ff;\">create</span> <span style=\"color: #0000ff;\">table</span><span style=\"color: #000000;\"> userinfo(\n        id </span><span style=\"color: #0000ff;\">int</span> <span style=\"color: #808080;\">not</span> <span style=\"color: #0000ff;\">null</span> auto_increment <span style=\"color: #0000ff;\">primary</span> <span style=\"color: #0000ff;\">key</span><span style=\"color: #000000;\">,\n        name </span><span style=\"color: #0000ff;\">char</span>(<span style=\"color: #800000; font-weight: bold;\">10</span><span style=\"color: #000000;\">),\n        dept_id </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\">,\n        </span><span style=\"color: #0000ff;\">constraint</span> fk_usr_dept <span style=\"color: #0000ff;\">foreign</span> <span style=\"color: #0000ff;\">key</span> (dept_id) <span style=\"color: #0000ff;\">references</span><span style=\"color: #000000;\"> department(id)\n    );\n    </span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\">--------------------------------------</span>\n    <span style=\"color: #0000ff;\">create</span> <span style=\"color: #0000ff;\">table</span><span style=\"color: #000000;\"> tb1(\n        id1 </span><span style=\"color: #0000ff;\">int</span> <span style=\"color: #808080;\">not</span> <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\"> auto_increment,\n        id2 </span><span style=\"color: #0000ff;\">int</span> <span style=\"color: #808080;\">not</span> <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">,\n        name </span><span style=\"color: #0000ff;\">varchar</span>(<span style=\"color: #800000; font-weight: bold;\">32</span><span style=\"color: #000000;\">),\n        </span><span style=\"color: #0000ff;\">primary</span> <span style=\"color: #0000ff;\">key</span><span style=\"color: #000000;\">(id1,id2)\n    );\n\n    </span><span style=\"color: #0000ff;\">create</span> <span style=\"color: #0000ff;\">table</span><span style=\"color: #000000;\"> tb2(\n        id1 </span><span style=\"color: #0000ff;\">int</span> <span style=\"color: #808080;\">not</span> <span style=\"color: #0000ff;\">null</span> auto_increment <span style=\"color: #0000ff;\">primary</span> <span style=\"color: #0000ff;\">key</span><span style=\"color: #000000;\">,\n        id2 </span><span style=\"color: #0000ff;\">int</span> <span style=\"color: #808080;\">not</span> <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">,\n        name </span><span style=\"color: #0000ff;\">varchar</span>(<span style=\"color: #800000; font-weight: bold;\">32</span><span style=\"color: #000000;\">),\n        </span><span style=\"color: #0000ff;\">constraint</span> fk_tb2_tb1 <span style=\"color: #0000ff;\">foreign</span> <span style=\"color: #0000ff;\">key</span> (id1,id2) <span style=\"color: #0000ff;\">references</span><span style=\"color: #000000;\"> tb1(id1,id2)\n    );</span></pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<h3><span style=\"background-color: #99cc00;\"><strong>删除表</strong></span></h3>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">drop</span> <span style=\"color: #0000ff;\">table</span> 表名;</pre>\n</div>\n<h3><span style=\"background-color: #99cc00;\"><strong>清空表</strong></span></h3>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 保留自增记录，下次添加数据接着上次id次数</span>\n<span style=\"color: #0000ff;\">delete</span> <span style=\"color: #0000ff;\">from</span><span style=\"color: #000000;\"> 表名;<br/>\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 还原到原始状态</span>\n<span style=\"color: #0000ff;\">truncate</span> <span style=\"color: #0000ff;\">table</span> 表名;</pre>\n</div>\n<h3><span style=\"background-color: #99cc00;\"><strong>修改表</strong></span></h3>\n<p><span style=\"background-color: #ff9900;\"><strong>表名、表字段</strong></span></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 修改表名称</span>\nrename <span style=\"color: #0000ff;\">table</span> 旧表名 <span style=\"color: #0000ff;\">to</span><span style=\"color: #000000;\"> 新表名;\n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 添加表字段</span>\n<span style=\"color: #0000ff;\">alter</span> <span style=\"color: #0000ff;\">table</span> 表名 <span style=\"color: #0000ff;\">add</span><span style=\"color: #000000;\"> 字段名 类型 约束...;\n例如：</span><span style=\"color: #0000ff;\">alter</span> <span style=\"color: #0000ff;\">table</span> student <span style=\"color: #0000ff;\">add</span> age <span style=\"color: #0000ff;\">int</span> <span style=\"color: #808080;\">not</span> <span style=\"color: #0000ff;\">null</span> <span style=\"color: #0000ff;\">default</span> <span style=\"color: #800000; font-weight: bold;\">18</span><span style=\"color: #000000;\"> after name;\n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 删除表字段</span>\n<span style=\"color: #0000ff;\">alter</span> <span style=\"color: #0000ff;\">table</span> 表名 <span style=\"color: #0000ff;\">drop</span> <span style=\"color: #0000ff;\">column</span><span style=\"color: #000000;\"> 字段名;\n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 修改表字段</span>\n方式1：<span style=\"color: #0000ff;\">alter</span> <span style=\"color: #0000ff;\">table</span> 表名 modify <span style=\"color: #0000ff;\">column</span><span style=\"color: #000000;\"> 字段名 类型 是否为空 默认值...;\n方式2：</span><span style=\"color: #0000ff;\">alter</span> <span style=\"color: #0000ff;\">table</span> 表名 change 旧字段名 新字段名 <span style=\"color: #0000ff;\">int</span> <span style=\"color: #808080;\">not</span> <span style=\"color: #0000ff;\">null</span> <span style=\"color: #0000ff;\">default</span> <span style=\"color: #800000; font-weight: bold;\">0</span><span style=\"color: #000000;\">;\n二者区别：\n　　modeify 只能改变字段的属性\n　　change 可以改变字段名和属性</span></pre>\n</div>\n<p><strong><span style=\"background-color: #ff9900;\">自增</span></strong></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">alter</span> <span style=\"color: #0000ff;\">table</span> 表名 auto_increment<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">20</span>;</pre>\n</div>\n<p><strong><span style=\"background-color: #ff9900;\">主键</span></strong></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 添加主键</span>\n<span style=\"color: #0000ff;\">alter</span> <span style=\"color: #0000ff;\">table</span> 表名 <span style=\"color: #0000ff;\">add</span> <span style=\"color: #0000ff;\">primary</span> <span style=\"color: #0000ff;\">key</span><span style=\"color: #000000;\"> (字段名,\"多个\",\"隔开\");\n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 移除主键</span>\n<span style=\"color: #0000ff;\">alter</span> <span style=\"color: #0000ff;\">table</span> 表名 <span style=\"color: #0000ff;\">drop</span> <span style=\"color: #0000ff;\">primary</span> <span style=\"color: #0000ff;\">key</span><span style=\"color: #000000;\">;\n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> ps：如果主键为自增长，以上方式则不被允许执行，请先去掉主键自增长属性，然后再移除主键</span>\n<span style=\"color: #0000ff;\">alter</span> <span style=\"color: #0000ff;\">table</span> 表名 modify id <span style=\"color: #0000ff;\">int</span> <span style=\"color: #808080;\">not</span> <span style=\"color: #0000ff;\">null</span>,<span style=\"color: #0000ff;\">drop</span> <span style=\"color: #0000ff;\">primary</span> <span style=\"color: #0000ff;\">key</span>;</pre>\n</div>\n<p><span style=\"background-color: #ff9900;\"><strong>外键</strong></span></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 添加外键</span>\n<span style=\"color: #0000ff;\">alter</span> <span style=\"color: #0000ff;\">table</span> 从表名 <span style=\"color: #0000ff;\">add</span> <span style=\"color: #0000ff;\">constraint</span> 外键名 <span style=\"color: #0000ff;\">foreign</span> <span style=\"color: #0000ff;\">key</span> (从表字段名，可多个) <span style=\"color: #0000ff;\">references</span><span style=\"color: #000000;\"> 主表(主表字段名，可多个);\n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 删除外键</span>\n<span style=\"color: #0000ff;\">alter</span> <span style=\"color: #0000ff;\">table</span> 表名 <span style=\"color: #0000ff;\">drop</span> <span style=\"color: #0000ff;\">foreign</span> <span style=\"color: #0000ff;\">key</span><span style=\"color: #000000;\"> 外键名;\n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> PS：如果外键设置后想修改，那么只能是先删除，再添加</span></pre>\n</div>\n<p><strong>定义外键的条件：</strong></p>\n<p>1）外键对应的字段数据类型保持一致，且被关联的字段（即references指定的另外一个表的字段）必须保证唯一</p>\n<p>2）所有tables的存储引擎必须是InnoDB类型</p>\n<p>3）外键约束的4种类型：restrict、no action、cascade、set null</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> restrict</span>\n<span style=\"color: #000000;\">同no action, 都是立即检查外键约束\n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> no action</span>\n如果子表中有匹配的记录，则不允许对父表对应候选键进行update<span style=\"color: #808080;\">/</span><span style=\"color: #000000;\">delete操作  \n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> cascade</span>\n在父表上update<span style=\"color: #808080;\">/</span>delete记录时，同步update<span style=\"color: #808080;\">/</span><span style=\"color: #000000;\">delete掉子表的匹配记录 \n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> set null</span>\n在父表上update<span style=\"color: #808080;\">/</span>delete记录时，将子表上匹配记录的列设为null（要注意子表的外键列不能为not <span style=\"color: #0000ff;\">null</span>）</pre>\n</div>\n<p>4）建议：</p>\n<ul>\n<li>如果需要外键约束，最好创建表同时创建外键约束</li>\n<li>如果需要设置级联关系，删除时最好设置为 set null</li>\n</ul>\n<p><strong>PS：</strong></p>\n<ul>\n<li>插入数据时，先插入主表中的数据，再插入从表中的数据。</li>\n<li>删除数据时，先删除从表中的数据，再删除主表中的数据。</li>\n</ul>\n<p><span style=\"background-color: #ff9900;\"><strong>默认值</strong></span></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 修改字段默认值</span>\n<span style=\"color: #0000ff;\">alter</span> <span style=\"color: #0000ff;\">table</span> 表名 <span style=\"color: #0000ff;\">alter</span> 字段名 <span style=\"color: #0000ff;\">set</span> <span style=\"color: #0000ff;\">default</span> <span style=\"color: #800000; font-weight: bold;\">10</span><span style=\"color: #000000;\">;\n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 删除字段默认值</span>\n<span style=\"color: #0000ff;\">alter</span> <span style=\"color: #0000ff;\">table</span> 表名 <span style=\"color: #0000ff;\">alter</span> 字段名 <span style=\"color: #0000ff;\">drop</span> <span style=\"color: #0000ff;\">default</span>;</pre>\n</div>\n<h3><span style=\"background-color: #99cc00;\">复制表</span></h3>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 只复制表结构和表中数据</span>\n<span style=\"color: #0000ff;\">create</span> <span style=\"color: #0000ff;\">table</span> tb2 <span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span><span style=\"color: #000000;\"> tb1;\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> PS：主键自增、索引、触发器、外键 不会被复制</span>\n   \n<span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 只复制表结构</span>\n<span style=\"color: #0000ff;\">create</span> <span style=\"color: #0000ff;\">table</span> tb2 <span style=\"color: #808080;\">like</span><span style=\"color: #000000;\"> tb1;\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> ps：数据、触发器、外键 不会被复制　</span></pre>\n</div>\n<h3><span style=\"background-color: #99cc00;\">其他</span></h3>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 查看表结构</span>\n<span style=\"color: #0000ff;\">desc</span><span style=\"color: #000000;\"> 表名;\n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 查看创建表信息</span>\nshow <span style=\"color: #0000ff;\">create</span> <span style=\"color: #0000ff;\">table</span> 表名;</pre>\n</div>\n<h2><span style=\"background-color: #00ccff;\">六、建立表与表之间的关系</span></h2>\n<h3><span style=\"background-color: #99cc00;\">一对一</span></h3>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008000;\"># </span><span style=\"color: #008000;\">一对一</span>\n<span style=\"color: #000000;\">两张表：微信号与电话号，一个微信号只能对应一个电话号\n关联方式：foreign key </span>+ unique</pre>\n</div>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'eb5e6b5a-6b84-4975-85e4-fa5ebc42ee2b\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_eb5e6b5a-6b84-4975-85e4-fa5ebc42ee2b\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_eb5e6b5a-6b84-4975-85e4-fa5ebc42ee2b\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_eb5e6b5a-6b84-4975-85e4-fa5ebc42ee2b\">\n<pre><span style=\"color: #000000;\">create table phone_tb(\n    id int auto_increment primary key,\n    phone_num bigint(</span>50) <span style=\"color: #0000ff;\">not</span><span style=\"color: #000000;\"> null unique\n)engine</span>=innodb default charset=<span style=\"color: #000000;\">utf8;\n\ncreate table wechat_tb(\n    id int auto_increment primary key,\n    wechat_name varchar(</span>32) <span style=\"color: #0000ff;\">not</span><span style=\"color: #000000;\"> null,\n    phone_id int unique,  </span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 该字段一定要是唯一的</span>\n<span style=\"color: #000000;\">    constraint fk_wechat_phone foreign key(phone_id) references phone_tb(id)\n)engine</span>=innodb default charset=<span style=\"color: #000000;\">utf8;\n\ninsert into phone_tb(phone_num) values\n    (</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">18820051111</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">),\n    (</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">18820052222</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">),\n    (</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">18820053333</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n\ninsert into wechat_tb(wechat_name,phone_id) values\n    (</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">A</span><span style=\"color: #800000;\">\"</span>,1<span style=\"color: #000000;\">),\n    (</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">B</span><span style=\"color: #800000;\">\"</span>,2<span style=\"color: #000000;\">),\n    (</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">C</span><span style=\"color: #800000;\">\"</span>,3);</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<h3><span style=\"background-color: #99cc00;\">一对多</span></h3>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008000;\"># </span><span style=\"color: #008000;\">一对多或称为多对一</span>\n<span style=\"color: #000000;\">两张表：班级与学生，一个班级可以对应多个学生，但一个学生只能对应一个班级\n关联方式：foreign key</span></pre>\n</div>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'84ee4c54-81b6-4a7b-9a22-fbf7253636ca\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_84ee4c54-81b6-4a7b-9a22-fbf7253636ca\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_84ee4c54-81b6-4a7b-9a22-fbf7253636ca\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_84ee4c54-81b6-4a7b-9a22-fbf7253636ca\">\n<pre>create table <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\">(\n    id int auto_increment primary key,\n    name char(</span>10) <span style=\"color: #0000ff;\">not</span><span style=\"color: #000000;\"> null unique\n)engine</span>=innodb default charset=<span style=\"color: #000000;\">utf8;\n\ncreate table student(\n    id int auto_increment primary key,\n    name char(</span>10) <span style=\"color: #0000ff;\">not</span><span style=\"color: #000000;\"> null unique,\n    class_id int </span><span style=\"color: #0000ff;\">not</span><span style=\"color: #000000;\"> null,\n    constraint fk_stu_cla foreign key(class_id) references </span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\">(id)\n)engine</span>=innodb default charset=<span style=\"color: #000000;\">utf8;\n\ninsert into </span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\">(name) values\n    (</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">高三1班</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">),\n    (</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">高三2班</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">),\n    (</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">高三3班</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n    \ninsert into student(name,class_id) values\n    (</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">A</span><span style=\"color: #800000;\">\"</span>,1<span style=\"color: #000000;\">),\n    (</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">B</span><span style=\"color: #800000;\">\"</span>,1<span style=\"color: #000000;\">),\n    (</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">C</span><span style=\"color: #800000;\">\"</span>,2<span style=\"color: #000000;\">),\n    (</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">D</span><span style=\"color: #800000;\">\"</span>,2<span style=\"color: #000000;\">),\n    (</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">E</span><span style=\"color: #800000;\">\"</span>,3<span style=\"color: #000000;\">),\n    (</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">F</span><span style=\"color: #800000;\">\"</span>,3);</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<h3><span style=\"background-color: #99cc00;\">多对多</span></h3>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008000;\"># </span><span style=\"color: #008000;\">多对多</span>\n<span style=\"color: #000000;\">三张表：一个作者可以写多本书，一本书也可以是由多个作者写的\n关联方式：foreign key + 第三张表</span></pre>\n</div>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'8d163d3d-96be-4fbc-bd80-66fe09b07ad9\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_8d163d3d-96be-4fbc-bd80-66fe09b07ad9\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_8d163d3d-96be-4fbc-bd80-66fe09b07ad9\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_8d163d3d-96be-4fbc-bd80-66fe09b07ad9\">\n<pre><span style=\"color: #000000;\">create table author(\n    id int </span><span style=\"color: #0000ff;\">not</span><span style=\"color: #000000;\"> null primary key auto_increment,\n    name char(</span>10<span style=\"color: #000000;\">)\n)engine</span>=innodb default charset=<span style=\"color: #000000;\">utf8;\n\ncreate table book(\n    id int </span><span style=\"color: #0000ff;\">not</span><span style=\"color: #000000;\"> null primary key auto_increment,\n    title char(</span>16<span style=\"color: #000000;\">)\n)engine</span>=innodb default charset=<span style=\"color: #000000;\">utf8;\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 这张表就存放作者表与书表的关系，即查询二者的关系查这表就可以了</span>\n<span style=\"color: #000000;\">create table author2book(\n    id int </span><span style=\"color: #0000ff;\">not</span><span style=\"color: #000000;\"> null unique auto_increment,\n    author_id int </span><span style=\"color: #0000ff;\">not</span><span style=\"color: #000000;\"> null,\n    book_id int </span><span style=\"color: #0000ff;\">not</span><span style=\"color: #000000;\"> null,\n    constraint fk_author foreign key(author_id) references author(id) on delete cascade on update cascade,\n    constraint fk_book foreign key(book_id) references book(id) on delete cascade on update cascade,\n    primary key(author_id, book_id)\n)engine</span>=innodb default charset=utf8;</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<h2><span style=\"background-color: #00ccff;\">七、表内容操作</span></h2>\n<h3><span style=\"background-color: #99cc00;\">插入数据（insert）</span></h3>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">insert</span> <span style=\"color: #0000ff;\">into</span> 表名(字段名,字段名...) <span style=\"color: #0000ff;\">values</span><span style=\"color: #000000;\">(值,值...)；\n</span><span style=\"color: #0000ff;\">insert</span> <span style=\"color: #0000ff;\">into</span> 表名(字段名,字段名...) <span style=\"color: #0000ff;\">values</span><span style=\"color: #000000;\">(值,值...),(值,值...)；\n</span><span style=\"color: #0000ff;\">insert</span> <span style=\"color: #0000ff;\">into</span> 表名(字段名,字段名...) <span style=\"color: #0000ff;\">select</span> 字段名,字段名... <span style=\"color: #0000ff;\">from</span> 表名；</pre>\n</div>\n<h3><span style=\"background-color: #99cc00;\">删除数据（delete）</span></h3>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 清空表</span>\n<span style=\"color: #0000ff;\">delete</span> <span style=\"color: #0000ff;\">from</span><span style=\"color: #000000;\"> 表名;         清空表，如果有自增主键，主键记录的值不会被删除\n</span><span style=\"color: #0000ff;\">truncate</span> <span style=\"color: #0000ff;\">table</span><span style=\"color: #000000;\"> 表名;      清空表\n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 删除符合where后条件的数据</span>\n<span style=\"color: #0000ff;\">delete</span> <span style=\"color: #0000ff;\">from</span> 表名 <span style=\"color: #0000ff;\">where</span><span style=\"color: #000000;\"> 条件;\n</span><span style=\"color: #0000ff;\">delete</span> <span style=\"color: #0000ff;\">from</span> 表名 <span style=\"color: #0000ff;\">where</span> id<span style=\"color: #808080;\">!=</span><span style=\"color: #800000; font-weight: bold;\">2</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #0000ff;\">delete</span> <span style=\"color: #0000ff;\">from</span> 表名 <span style=\"color: #0000ff;\">where</span> id<span style=\"color: #808080;\">!=</span><span style=\"color: #800000; font-weight: bold;\">2</span> <span style=\"color: #808080;\">and</span> name<span style=\"color: #808080;\">=</span><span style=\"color: #000000;\">\"pd\";\n</span><span style=\"color: #0000ff;\">delete</span> <span style=\"color: #0000ff;\">from</span> 表名 <span style=\"color: #0000ff;\">where</span> id<span style=\"color: #808080;\">&gt;=</span><span style=\"color: #800000; font-weight: bold;\">2</span> <span style=\"color: #808080;\">or</span> name<span style=\"color: #808080;\">=</span>\"pd\";</pre>\n</div>\n<p><strong>truncate 和 delete 的区别？</strong></p>\n<ul>\n<li>truncate 在各种表上无论是大的还是小的都非常快。而 delete 操作会被表中数据量的大小影响其执行效率。</li>\n<li>truncate 是一个DDL语言而 delete 是DML语句，向其他所有的DDL语言一样，他将被隐式提交，不能对 truncate 使用 rollback 命令。</li>\n<li>truncate 不能触发触发器，delete 会触发触发器。</li>\n<li>truncate 当表被清空后，表和表的索引和自增主键将重新设置成初始大小，而 delete 则不能。</li>\n</ul>\n<h3><span style=\"background-color: #99cc00;\">更新操作（update）</span></h3>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">update</span> 表名 <span style=\"color: #0000ff;\">set</span> 字段1<span style=\"color: #808080;\">=</span>\"值\" <span style=\"color: #0000ff;\">where</span><span style=\"color: #000000;\"> 条件;\n</span><span style=\"color: #0000ff;\">update</span> 表名 <span style=\"color: #0000ff;\">set</span> 字段1<span style=\"color: #808080;\">=</span>\"值\",字段2<span style=\"color: #808080;\">=</span>\"值\" <span style=\"color: #0000ff;\">where</span><span style=\"color: #000000;\"> 条件;\n</span><span style=\"color: #0000ff;\">update</span> tb1 <span style=\"color: #0000ff;\">set</span> name<span style=\"color: #808080;\">=</span>\"pd\" <span style=\"color: #0000ff;\">where</span> id<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">1</span>;</pre>\n</div>\n<h3><span style=\"background-color: #99cc00;\">查询操作（select）</span></h3>\n<p><span style=\"background-color: #ff9900;\"><strong>简单查询</strong></span></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span><span style=\"color: #000000;\"> 表名;\n</span><span style=\"color: #0000ff;\">select</span> 字段名,字段名... <span style=\"color: #0000ff;\">from</span><span style=\"color: #000000;\"> 表名;\n</span><span style=\"color: #0000ff;\">select</span> 字段名 <span style=\"color: #0000ff;\">as</span> 自定义名 <span style=\"color: #0000ff;\">from</span> 表名;  <span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 显示出来的相应字段为自定义名</span></pre>\n</div>\n<p><span style=\"background-color: #ff9900;\"><strong>条件查询</strong></span></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> 表名 <span style=\"color: #0000ff;\">where</span> age <span style=\"color: #808080;\">&gt;</span> <span style=\"color: #800000; font-weight: bold;\">23</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> 表名 <span style=\"color: #0000ff;\">where</span> age <span style=\"color: #808080;\">=</span> <span style=\"color: #800000; font-weight: bold;\">23</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> 表名 <span style=\"color: #0000ff;\">where</span> age <span style=\"color: #808080;\">!=</span> <span style=\"color: #800000; font-weight: bold;\">23</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> 表名 <span style=\"color: #0000ff;\">where</span> age <span style=\"color: #0000ff;\">is</span> <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> 表名 <span style=\"color: #0000ff;\">where</span> age <span style=\"color: #0000ff;\">is</span> <span style=\"color: #808080;\">not</span> <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">;\n\n</span><span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> 表名 <span style=\"color: #0000ff;\">where</span> age <span style=\"color: #808080;\">=</span> <span style=\"color: #800000; font-weight: bold;\">23</span> <span style=\"color: #808080;\">or</span> gender<span style=\"color: #808080;\">=</span><span style=\"color: #000000;\">\"男\";\n</span><span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> 表名 <span style=\"color: #0000ff;\">where</span> age <span style=\"color: #808080;\">=</span> <span style=\"color: #800000; font-weight: bold;\">23</span> <span style=\"color: #808080;\">and</span> gender<span style=\"color: #808080;\">=</span>\"男\";</pre>\n</div>\n<p><span style=\"background-color: #ff9900;\"><strong>区间查询</strong></span></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> 表名 <span style=\"color: #0000ff;\">where</span> id <span style=\"color: #808080;\">between</span> <span style=\"color: #800000; font-weight: bold;\">5</span> <span style=\"color: #808080;\">and</span> <span style=\"color: #800000; font-weight: bold;\">10</span>;  <span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 取id是5-10的值</span>\n<span style=\"color: #000000;\">等价于：\n</span><span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> 表名 <span style=\"color: #0000ff;\">where</span> id<span style=\"color: #808080;\">&gt;=</span><span style=\"color: #800000; font-weight: bold;\">5</span> <span style=\"color: #808080;\">and</span> id<span style=\"color: #808080;\">&lt;=</span><span style=\"color: #800000; font-weight: bold;\">10</span>;</pre>\n</div>\n<p><span style=\"background-color: #ff9900;\"><strong>集合查询</strong></span></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> 表名 <span style=\"color: #0000ff;\">where</span> id <span style=\"color: #808080;\">in</span> (<span style=\"color: #800000; font-weight: bold;\">1</span>,<span style=\"color: #800000; font-weight: bold;\">2</span>,<span style=\"color: #800000; font-weight: bold;\">3</span>);        <span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 取id在括号内的值</span>\n<span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> 表名 <span style=\"color: #0000ff;\">where</span> id <span style=\"color: #808080;\">not</span> <span style=\"color: #808080;\">in</span> (<span style=\"color: #800000; font-weight: bold;\">1</span>,<span style=\"color: #800000; font-weight: bold;\">2</span>,<span style=\"color: #800000; font-weight: bold;\">3</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> 表名 <span style=\"color: #0000ff;\">where</span> id <span style=\"color: #808080;\">in</span> (<span style=\"color: #0000ff;\">select</span> id <span style=\"color: #0000ff;\">from</span> 表名);</pre>\n</div>\n<p><span style=\"background-color: #ff9900;\"><strong>模糊查询</strong></span></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 查询姓名以\"张\"字开头的</span>\n<span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> 表名 <span style=\"color: #0000ff;\">where</span> name <span style=\"color: #808080;\">like</span> \"张<span style=\"color: #808080;\">%</span><span style=\"color: #000000;\">\";\n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 查询姓名以\"张\"字结尾的</span>\n<span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> 表名 <span style=\"color: #0000ff;\">where</span> name <span style=\"color: #808080;\">like</span> \"<span style=\"color: #808080;\">%</span><span style=\"color: #000000;\">张\";\n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 查询name名称是三个字符的人</span>\n<span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> 表名 <span style=\"color: #0000ff;\">where</span> name <span style=\"color: #808080;\">like</span><span style=\"color: #000000;\"> \"___\";\n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 查询name名称的第二个字符是\"d\"的人</span>\n<span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> 表名 <span style=\"color: #0000ff;\">where</span> name <span style=\"color: #808080;\">like</span> \"_d<span style=\"color: #808080;\">%</span><span style=\"color: #000000;\">\";\n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 排除名字带a的学生</span>\n<span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> 表名 <span style=\"color: #0000ff;\">where</span> name <span style=\"color: #808080;\">not</span> <span style=\"color: #808080;\">like</span> \"a<span style=\"color: #808080;\">%</span>\";  </pre>\n</div>\n<p><span style=\"background-color: #ff9900;\"><strong>排序查询</strong></span></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">asc</span><span style=\"color: #000000;\">   升序，默认为升序\n</span><span style=\"color: #0000ff;\">desc</span><span style=\"color: #000000;\">  降序\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> PS：order by要写在select语句末尾</span>\n\n<span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> 表名 <span style=\"color: #0000ff;\">order</span> <span style=\"color: #0000ff;\">by</span> 字段名 <span style=\"color: #0000ff;\">asc</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> 表名 <span style=\"color: #0000ff;\">order</span> <span style=\"color: #0000ff;\">by</span> 字段名 <span style=\"color: #0000ff;\">desc</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> 表名 <span style=\"color: #0000ff;\">order</span> <span style=\"color: #0000ff;\">by</span> 字段名 <span style=\"color: #0000ff;\">asc</span>,字段名 <span style=\"color: #0000ff;\">desc</span><span style=\"color: #000000;\">;\n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 强制中文排序</span>\n<span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> 表名 <span style=\"color: #0000ff;\">order</span> <span style=\"color: #0000ff;\">by</span> <span style=\"color: #ff00ff;\">convert</span><span style=\"color: #000000;\">(name using gbk);\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> PS：UTF8默认校对集是utf8_general_ci，它不是按照中文来的，你需要强制让MySQL按中文来排序。</span></pre>\n</div>\n<p><span style=\"background-color: #ff9900;\"><strong>聚合函数</strong></span></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #000000;\">聚合:  将分散的聚集到一起。\n聚合函数: 对列进行操作，返回的结果是一个单一的值，除了 </span><span style=\"color: #ff00ff;\">count</span><span style=\"color: #000000;\"> 以外，都会忽略空值。\n\n</span><span style=\"color: #ff00ff;\">count</span><span style=\"color: #000000;\">：统计指定列不为NULL的记录行数；\n  </span><span style=\"color: #ff00ff;\">sum</span><span style=\"color: #000000;\">：计算指定列的数值和，如果指定列类型不是数值类型，那么计算结果为0；\n  </span><span style=\"color: #ff00ff;\">max</span><span style=\"color: #000000;\">：计算指定列的最大值，如果指定列是字符串类型，那么使用字符串排序运算；\n  </span><span style=\"color: #ff00ff;\">min</span><span style=\"color: #000000;\">：计算指定列的最小值，如果指定列是字符串类型，那么使用字符串排序运算；\n  </span><span style=\"color: #ff00ff;\">avg</span><span style=\"color: #000000;\">：计算指定列的平均值，如果指定列类型不是数值类型，那么计算结果为0；\n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 格式</span>\n<span style=\"color: #0000ff;\">select</span> 聚合函数(字段) <span style=\"color: #0000ff;\">from</span><span style=\"color: #000000;\"> 表名;\n \n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 统计人员中最大年龄、最小年龄，平均年龄分别是多少</span>\n<span style=\"color: #0000ff;\">select</span> <span style=\"color: #ff00ff;\">max</span>(age),<span style=\"color: #ff00ff;\">min</span>(age),<span style=\"color: #ff00ff;\">avg</span>(age) <span style=\"color: #0000ff;\">from</span> 表名;</pre>\n</div>\n<p><span style=\"background-color: #ff9900;\"><strong>分组查询</strong></span></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 分组查询格式</span>\n<span style=\"color: #0000ff;\">select</span> 被分组的字段 <span style=\"color: #0000ff;\">from</span> 表名 <span style=\"color: #0000ff;\">group</span> <span style=\"color: #0000ff;\">by</span> 分组字段 <span style=\"color: #ff0000;\">[</span><span style=\"color: #ff0000;\">having 条件字段</span><span style=\"color: #ff0000;\">]</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> PS：分组查询可以与 聚合函数 组合使用。</span>\n\n<span style=\"color: #0000ff;\">select</span> <span style=\"color: #ff00ff;\">count</span>(name),<span style=\"color: #ff00ff;\">max</span>(id) <span style=\"color: #0000ff;\">from</span> 表名 <span style=\"color: #0000ff;\">group</span> <span style=\"color: #0000ff;\">by</span><span style=\"color: #000000;\"> name;\n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> PS：如果要对聚合函数结果进行二次筛选，则必须使用having</span>\n<span style=\"color: #0000ff;\">select</span> <span style=\"color: #ff00ff;\">count</span>(name),<span style=\"color: #ff00ff;\">max</span>(id) <span style=\"color: #0000ff;\">from</span> 表名 <span style=\"color: #0000ff;\">group</span> <span style=\"color: #0000ff;\">by</span> name <span style=\"color: #0000ff;\">having</span> <span style=\"color: #ff00ff;\">max</span>(id)<span style=\"color: #808080;\">&gt;</span><span style=\"color: #800000; font-weight: bold;\">5</span>;</pre>\n</div>\n<p><strong>where 与 having区别：</strong></p>\n<ul>\n<li>执行优先级从高到低：where &gt; group by &gt; having</li>\n<li>where 发生在分组 group by 之前，因而 where 中可以有任意字段，但是绝对不能使用聚合函数</li>\n<li>having 发生在分组 group by 之后，因而 having 中可以使用分组的字段，无法直接取到其他字段，可以使用聚合函数</li>\n</ul>\n<p><span style=\"background-color: #ff9900;\"><strong>分页查询</strong></span></p>\n<p><strong>好处：限制查询数据条数，提高查询效率。</strong></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> 表名 limit <span style=\"color: #800000; font-weight: bold;\">5</span>;           <span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 取前5行</span>\n<span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> 表名 limit <span style=\"color: #800000; font-weight: bold;\">2</span>,<span style=\"color: #800000; font-weight: bold;\">5</span>;         <span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 从3开始取，往后取5行；即3-7行的数据</span>\n<span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> 表名 limit <span style=\"color: #800000; font-weight: bold;\">5</span> offset <span style=\"color: #800000; font-weight: bold;\">2</span>;  <span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 前2行不取，往后取5行；即3-7行的数据</span></pre>\n</div>\n<p><span style=\"background-color: #ff9900;\"><strong>连表查询</strong></span></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 无对应关系则不显示</span>\n<span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> student,class <span style=\"color: #0000ff;\">where</span> student.class_id<span style=\"color: #808080;\">=</span><span style=\"color: #000000;\">class.id; \n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 无对应关系则不显示</span>\n<span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> student <span style=\"color: #0000ff;\">inner</span> <span style=\"color: #808080;\">join</span> class <span style=\"color: #0000ff;\">on</span> student.class_id<span style=\"color: #808080;\">=</span><span style=\"color: #000000;\">class.id;\n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> student表所有显示，如果class表中无对应关系，则为null</span>\n<span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> student <span style=\"color: #808080;\">left</span> <span style=\"color: #808080;\">join</span> class <span style=\"color: #0000ff;\">on</span> student.class_id<span style=\"color: #808080;\">=</span><span style=\"color: #000000;\">class.id;\n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> class表所有显示，如果student表中无对应关系，则为null</span>\n<span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> student <span style=\"color: #808080;\">right</span> <span style=\"color: #808080;\">join</span> class <span style=\"color: #0000ff;\">on</span> student.class_id<span style=\"color: #808080;\">=</span><span style=\"color: #000000;\">class.id;\n\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 小结：inner join将出现null的一行不显示，left join左边全部显示，right join右边全部显示</span>\n\n<span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 连多张表</span>\n    <span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span><span style=\"color: #000000;\"> score \n        </span><span style=\"color: #808080;\">left</span> <span style=\"color: #808080;\">join</span> student <span style=\"color: #0000ff;\">on</span> score.student_id<span style=\"color: #808080;\">=</span><span style=\"color: #000000;\">student.id \n        </span><span style=\"color: #808080;\">left</span> <span style=\"color: #808080;\">join</span> course <span style=\"color: #0000ff;\">on</span> score.course_id<span style=\"color: #808080;\">=</span><span style=\"color: #000000;\">course.id \n        </span><span style=\"color: #808080;\">left</span> <span style=\"color: #808080;\">join</span> class <span style=\"color: #0000ff;\">on</span> student.class_id<span style=\"color: #808080;\">=</span><span style=\"color: #000000;\">class.id \n        </span><span style=\"color: #808080;\">left</span> <span style=\"color: #808080;\">join</span> teacher <span style=\"color: #0000ff;\">on</span> course.teacher_id<span style=\"color: #808080;\">=</span>teacher.id;</pre>\n</div>\n<p><span style=\"background-color: #ff9900;\"><strong>组合查询</strong></span></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 自动去重</span>\n    <span style=\"color: #0000ff;\">select</span> 字段名 <span style=\"color: #0000ff;\">from</span> 表A <span style=\"color: #0000ff;\">union</span> <span style=\"color: #0000ff;\">select</span> 字段名 <span style=\"color: #0000ff;\">from</span><span style=\"color: #000000;\"> 表B;\n</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 不去重</span>\n    <span style=\"color: #0000ff;\">select</span> 字段名 <span style=\"color: #0000ff;\">from</span> 表A <span style=\"color: #0000ff;\">union</span> <span style=\"color: #808080;\">all</span> <span style=\"color: #0000ff;\">select</span> 字段名 <span style=\"color: #0000ff;\">from</span> 表B;</pre>\n</div>\n<p> </p>', 23);
INSERT INTO `blog_articledetail` VALUES (25, '<body><h2>一、Shell概述</h2>\n<ul>\n<li>Shell是一个<mark>命令行解释器</mark>，它为用户提供了一个向Linux内核发送请求以便运行程序的界面系统级程序，用户可以用Shell来启动、挂起、停止甚至是编写一些程序。</li>\n<li>Shell还是一个功能相当强大的编程语言，易编写，易调试，灵活性较强。Shell是解释执行的脚本语言，在Shell中可以直接调用Linux系统命令。</li>\n</ul>\n<h2>二、Shell脚本的执行方式</h2>\n<h5>1、echo输出命令</h5>\n<pre><code class=\"language-shell\" lang=\"shell\">echo [选项] [输出内容]\n选项： \n    -e：支持反斜线控制的字符转换\n</code></pre>\n<figure><table>\n<thead>\n<tr><th>控制字符</th><th>作用</th></tr></thead>\n<tbody><tr><td>\\ \\</td><td>输出\\本身</td></tr><tr><td>\\a</td><td>输出警告音</td></tr><tr><td>\\b</td><td>退格键，也就是向左删除键</td></tr><tr><td>\\c</td><td>取消输出行末的换行符。和“-n”选项一致</td></tr><tr><td>\\e</td><td>ESCAPE键</td></tr><tr><td>\\f</td><td>换页符</td></tr><tr><td>\\n</td><td>换行符</td></tr><tr><td>\\r</td><td>回车键</td></tr><tr><td>\\t</td><td>制表符，也就是Tab键</td></tr><tr><td>\\v</td><td>垂直制表符</td></tr><tr><td>\\0nnn</td><td>按照八进制ASCII码表输出字符。其中0为数字零，nnn是三位八进 制数</td></tr><tr><td>\\xhh</td><td>按照十六进制ASCII码表输出字符。其中hh是两位十六进制数</td></tr></tbody>\n</table></figure>\n<pre><code class=\"language-shell\" lang=\"shell\">[root@peiqi ~]# echo -e \"ab\\bc\"\nac\n[root@peiqi ~]# echo -e \"a\\tb\\tc\\nd\\te\\tf\"\na	b	c\nd	e	f\n[root@peiqi ~]# echo -e \"\\e[1;31m你好吗\\e[0m\" \n# 输出带颜色的结果\n#30m=黑色，31m=红色，32m=绿色，33m=黄色 \n#34m=蓝色，35m=洋红，36m=青色，37m=白色\n</code></pre>\n<h5>2、第一个脚本</h5>\n<pre><code class=\"language-shell\" lang=\"shell\">[root@peiqi ~]# vim helloworld.sh\n#!/bin/Bash\necho \"hello world\"\n</code></pre>\n<h5>3、脚本执行</h5>\n<p>两种方式：</p>\n<ul>\n<li><p>赋予执行权限，直接运行</p>\n<pre><code class=\"language-shell\" lang=\"shell\">chmod 755 helloworld.sh\n./helloworld.sh\n</code></pre>\n</li>\n<li><p>通过Bash调用执行脚本</p>\n<pre><code class=\"language-shell\" lang=\"shell\">bash helloworld.sh\n</code></pre>\n</li>\n</ul>\n<h2>三、Bash的基本功能</h2>\n<h4>1、历史命令</h4>\n<pre><code class=\"language-shell\" lang=\"shell\">history [选项] [历史命令保存文件] \n选项：\n	-c：清空历史命令 \n	-w：把缓存中的历史命令写入历史命令保存文件 ~/.bash_history \n</code></pre>\n<p>历史命令默认会保存1000条，可以在环境变量配置文件 /etc/profile 中进行修改。</p>\n<h5>历史命令的调用：</h5>\n<ul>\n<li>使用上、下箭头调用以前的历史命令</li>\n<li>使用 !n 重复执行第n条历史命令</li>\n<li>使用 !! 重复执行上一条命令</li>\n<li>使用 !字串 重复执行最后一条以该字串开头的命令</li>\n</ul>\n<h4>2、命令别名 </h4>\n<pre><code class=\"language-shell\" lang=\"shell\"># 设定命令别名\nalias 别名=原命令\n# 查询命令别名\nalias\n# 删除别名\nunalias 别名\n# 让别名永久生效\nvim /root/.bashrc\n</code></pre>\n<h4>3、常用快捷键</h4>\n<figure><table>\n<thead>\n<tr><th style=\"text-align:left;\">快捷键</th><th style=\"text-align:left;\">作用</th></tr></thead>\n<tbody><tr><td style=\"text-align:left;\">Ctrl+A</td><td style=\"text-align:left;\">把光标移动到命令行开头。如果我们输入的命令过长，想要把光标移动到命令行开头时使用。</td></tr><tr><td style=\"text-align:left;\">Ctrl+E</td><td style=\"text-align:left;\">把光标移动到命令行结尾。</td></tr><tr><td style=\"text-align:left;\">Ctrl+C</td><td style=\"text-align:left;\">强制终止当前的命令。</td></tr><tr><td style=\"text-align:left;\">Ctrl+L</td><td style=\"text-align:left;\">清屏，相当于clear命令。</td></tr><tr><td style=\"text-align:left;\">Ctrl+U</td><td style=\"text-align:left;\">删除或剪切光标之前的命令。我输入了一行很长的命令，不用使用退格键一个一个字符的删除，使用这个快捷键会更加方便。</td></tr><tr><td style=\"text-align:left;\">Ctrl+K</td><td style=\"text-align:left;\">删除或剪切光标之后的内容。</td></tr><tr><td style=\"text-align:left;\">Ctrl+Y</td><td style=\"text-align:left;\">粘贴ctrl+U或ctrl+K剪切的内容。</td></tr><tr><td style=\"text-align:left;\">Ctrl+R</td><td style=\"text-align:left;\">在历史命令中搜索，按下ctrl+R之后，就会出现搜索界面，只要输入搜索内容，就会从历史命令中搜索。</td></tr><tr><td style=\"text-align:left;\">Ctrl+D</td><td style=\"text-align:left;\">退出当前终端。</td></tr><tr><td style=\"text-align:left;\">Ctrl+Z</td><td style=\"text-align:left;\">暂停，并放入后台。这个快捷键牵扯工作管理的内容，我们在系统管理章节详细介绍。</td></tr><tr><td style=\"text-align:left;\">Ctrl+S</td><td style=\"text-align:left;\">暂停屏幕输出。</td></tr><tr><td style=\"text-align:left;\">Ctrl+Q</td><td style=\"text-align:left;\">恢复屏幕输出。</td></tr></tbody>\n</table></figure>\n<h4>4、输出重定向</h4>\n<h5>标准输入输出：</h5>\n<figure><table>\n<thead>\n<tr><th>设备</th><th>设备文件名</th><th>文件描述符</th><th>类型</th></tr></thead>\n<tbody><tr><td>键盘</td><td>/dev/stdin</td><td>0</td><td>标准输入</td></tr><tr><td>显示器</td><td>/dev/stdout</td><td>1</td><td>标准输出</td></tr><tr><td>显示器</td><td>/dev/stderr</td><td>2</td><td>标准错误输出</td></tr></tbody>\n</table></figure>\n<h5>输出重定向</h5>\n<figure><table>\n<thead>\n<tr><th>类 型</th><th>符 号</th><th>作用</th></tr></thead>\n<tbody><tr><td>标准输出重定向</td><td>命令 &gt; 文件</td><td>以覆盖的方式，把命令的正确输出输出到指定的文件或设备当中。</td></tr><tr><td>标准输出重定向</td><td>命令 &gt;&gt; 文件</td><td>以追加的方式，把命令的正确输出输出到指定的文件或设备当中。</td></tr><tr><td>标准错误输出重定向</td><td>错误命令 2&gt; 文件</td><td>以覆盖的方式，把命令的错误输出输出到指定的文件或设备当中。</td></tr><tr><td>标准错误输出重定向</td><td>错误命令 2&gt;&gt; 文件</td><td>以追加的方式，把命令的错误输出输出到指定的文件或设备当中。</td></tr><tr><td> </td><td> </td><td> </td></tr><tr><td> </td><td>命令 &gt; 文件 2&gt;&amp;1</td><td>以覆盖的方式，把正确输出和错误输出都保存到同一个文件当中。</td></tr><tr><td> </td><td>命令 &gt;&gt; 文件 2&gt;&amp;1</td><td>以追加的方式，把正确输出和错误输出都保存到同一个文件当中。</td></tr><tr><td>正确输出和错误输出同时保存</td><td>命令 &amp;&gt; 文件</td><td>以覆盖的方式，把正确输出和错误输出都保存到同一个文件当中。</td></tr><tr><td> </td><td>命令 &amp;&gt;&gt; 文件</td><td>以追加的方式，把正确输出和错误输出都保存到同一个文件当中。</td></tr><tr><td> </td><td>命令 &gt;&gt; 文件1  2&gt;&gt;文件2</td><td>把正确的输出追加到文件1中，把错误的输出追加到文件2中。</td></tr></tbody>\n</table></figure>\n<h4>5、多命令顺序执行</h4>\n<figure><table>\n<thead>\n<tr><th>多命令执行符</th><th>格式</th><th>作用</th></tr></thead>\n<tbody><tr><td>;</td><td>命令1 ; 命令2</td><td>多个命令顺序执行，命令之间没有任何逻辑联系</td></tr><tr><td>&amp;&amp;</td><td>命令1 &amp;&amp; 命令2</td><td>逻辑与。当命令1正确执行，则命令2才会执行；当命令1执行不正确，则命令2不会执行</td></tr><tr><td>||</td><td>命令1 || 命令2</td><td>逻辑或。当命令1执行不正确，则命令2才会执行；当命令1正确执行，则命令2不会执行</td></tr></tbody>\n</table></figure>\n<pre><code class=\"language-shell\" lang=\"shell\">[root@peiqi ~]# ls ; date\nhelloworld.sh\nSat Aug 15 11:51:42 CST 2020\n[root@peiqi ~]# ls &amp;&amp; echo yes\nhelloworld.sh\nyes\n[root@peiqi ~]# ls 1 || echo no\nls: cannot access 1: No such file or directory\nno\n</code></pre>\n<h4>6、管道符</h4>\n<pre><code class=\"language-shell\" lang=\"shell\">命令1 | 命令2\n# 命令1的正确输出作为命令2的操作对象 \n</code></pre>\n<pre><code class=\"language-shell\" lang=\"shell\">[root@peiqi ~]# ps -ef | grep bash | grep -v \"grep\"\nroot     12026 12023  0 11:03 pts/1    00:00:00 -bash\n1000     23691 22856  0 Jul26 ?        00:00:00 bash\n</code></pre>\n<pre><code class=\"language-shell\" lang=\"shell\">grep [选项] 搜索内容\n选项： \n	-i：忽略大小写 \n	-n：输出行号 \n	-v：反向查找 \n	--color=auto：搜索出的关键字用颜色显示\n</code></pre>\n<h4>7、特殊符号</h4>\n<figure><table>\n<thead>\n<tr><th>符号</th><th>作用</th></tr></thead>\n<tbody><tr><td>\'\'</td><td>单引号。在单引号中所有的特殊符号，如 $ 和` 都没有特殊含义</td></tr><tr><td>\"\"</td><td>双引号。在双引号中特殊符号都没有特殊含义，但是 $ 和` 和 \\ 是例外，拥有 “调用变量的值”、“引用命令” 和 “转义符” 的特殊含义</td></tr><tr><td>``</td><td>反引号。反引号括起来的内容是系统命令，在Bash中会先执行它。$()作用一样，不过推荐使用 $()，因为反引号非常容易看错</td></tr><tr><td>$()</td><td>和反引号作用一样，用来引用系统命令</td></tr><tr><td>#</td><td>在Shell脚本中，# 开头的行代表注释</td></tr><tr><td>$</td><td>用于调用变量的值，如需要调用变量<strong>name</strong>的值时，需要用<strong>$name</strong>的方式得到变量的值</td></tr><tr><td>\\</td><td>转义符，跟在 \\ 之后的特殊符号将失去特殊含义，变为普通字符。如 \\$ 将输出 $ 符号，而不当做是变量引用</td></tr></tbody>\n</table></figure>\n<pre><code class=\"language-shell\" lang=\"shell\"># 反引号与$()\n[root@peiqi ~]# echo `ls`\na b c\n[root@peiqi ~]# echo $(date)\nSat Aug 15 12:12:25 CST 2020\n# 单引号与双引号\n[root@peiqi ~]# name=pd\n[root@peiqi ~]# echo \'$name\'\n$name\n[root@peiqi ~]# echo \"$name\"\npd\n[root@peiqi ~]# echo \'$(date)\'\n$(date)\n[root@peiqi ~]# echo \"$(date)\"\nSat Aug 15 12:13:43 CST 2020\n</code></pre>\n<h2>四、Bash的变量</h2>\n<h4>1、用户自定义变量</h4>\n<p>变量是计算机内存的单元，其中存放的值可以改变。当Shell脚本需要保存一些信息时，如一个文件名或是一个数字，就把它存放在一个变量中。每个变量有一个名字，所以很容易引用它。使用变量可以保存有用信息，使系统获知用户相关设置，变量也可以用于保存暂时信息。</p>\n<h6>变量设置规则：</h6>\n<ul>\n<li>变量名称可以由字母、数字和下划线组成，但是不能以数字开头，如果变量名是 2name 则是错误的</li>\n<li>在Bash中，变量的默认类型都是字符串型，如果要进行数值运算，则必修指定变量类型为数值型</li>\n<li>变量用等号连接值，等号左右两侧不能有空格</li>\n<li>变量的值如果有空格，需要使用单引号或双引号括起来</li>\n<li>在变量的值中，可以使用 \\ 转义符</li>\n<li>如果需要增加变量的值，那么可以进行变量值的叠加。不过变量需要用双引号包含 \"$变量名\" 或用 ${变量名} 包含</li>\n<li>如果是把命令的结果作为变量值赋予变量，则需要使用 反引号 或 $() 包含命令</li>\n<li>环境变量名建议大写，便于区分</li>\n</ul>\n<h6>变量分类：</h6>\n<ul>\n<li>用户自定义变量</li>\n<li>环境变量：这种变量中主要保存的是和系统操作环境相关的数据</li>\n<li>位置参数变量：这种变量主要是用来向脚本当中传递参数或数据的，变量名不能自定义，变量作用是固定的</li>\n<li>预定义变量：是Bash中已经定义好的变量，变量名不能自定义，变量作用也是固定的</li>\n</ul>\n<h6>本地变量：</h6>\n<ul>\n<li><p>变量定义</p>\n<pre><code class=\"language-shell\" lang=\"shell\">[root@peiqi ~]# name=alex\n</code></pre>\n</li>\n<li><p>变量叠加</p>\n<pre><code class=\"language-shell\" lang=\"shell\">[root@peiqi ~]# a=123\n[root@peiqi ~]# a=\"$a\"456\n[root@peiqi ~]# a=${a}789\n</code></pre>\n</li>\n<li><p>变量调用</p>\n<pre><code class=\"language-shell\" lang=\"shell\">[root@peiqi ~]# echo $a\n123456789\n</code></pre>\n</li>\n<li><p>变量查看</p>\n<pre><code class=\"language-shell\" lang=\"shell\">[root@peiqi ~]# set\n</code></pre>\n</li>\n<li><p>变量删除</p>\n<pre><code class=\"language-shell\" lang=\"shell\">[root@peiqi ~]# unset a\n</code></pre>\n</li>\n</ul>\n<h4>2、环境变量</h4>\n<p>用户自定义变量只在当前的Shell中生效，而环境变量会在当前Shell和这个Shell的所有子Shell当中生效。如果把环境变量写入相应的配置文件，那么这个环境变量就会在所有的Shell中生效 。</p>\n<h6>设置环境变量：</h6>\n<pre><code class=\"language-shell\" lang=\"shell\"># 声明变量\nexport 变量名=变量值 \n# 查询变量\nenv \n# 删除变量\nunset 变量名\n</code></pre>\n<h6>系统常见环境变量：</h6>\n<pre><code class=\"language-shell\" lang=\"shell\"># PATH：系统查找命令的路径 \n[root@peiqi ~]# echo $PATH\n/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/opt/mysql/bin:/opt/go/bin:/gopath/bin:/root/bin\n</code></pre>\n<pre><code class=\"language-shell\" lang=\"shell\"># PATH变量叠加 \n[root@peiqi ~]# PATH=\"$PATH\":/root/sh\n[root@peiqi ~]# echo $PATH\n/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/opt/mysql/bin:/opt/go/bin:/gopath/bin:/root/bin:/root/sh\n</code></pre>\n<pre><code class=\"language-shell\" lang=\"shell\"># PS1：定义系统提示符的变量\n\\d：显示日期，格式为“星期 月 日” \n\\h：显示简写主机名。如默认主机名“localhost” \n\\t：显示24小时制时间，格式为“HH:MM:SS” \n\\T：显示12小时制时间，格式为“HH:MM:SS” \n\\A：显示24小时制时间，格式为“HH:MM” \n\\u：显示当前用户名 \n\\w：显示当前所在目录的完整名称 \n\\W：显示当前所在目录的最后一个目录 \n\\#：执行的第几个命令 \n\\$：提示符。如果是root用户会显示提示符为“#”，如果是普通用户会显示提示符为“$”\n\n# 示例\n[root@peiqi ~]# PS1=\'[\\u@\\t \\w]\\$\' \n[root@14:27:42 ~]#PS1=\'[\\u@\\@ \\h \\# \\W]\\$\'\n[root@02:28 PM peiqi 12 ~]#PS1=\'[\\u@\\h \\W]\\$\'\n[root@peiqi ~]#\n</code></pre>\n<h4>3、位置参数变量</h4>\n<figure><table>\n<thead>\n<tr><th>位置参数变量</th><th>作用</th></tr></thead>\n<tbody><tr><td>$n</td><td>n 为数字，$0 代表shell脚本本身，$​1 -​ $9 代表第1到第9个参数，十以上的参数需要用大括号包含 ${10}</td></tr><tr><td>$*</td><td>这个变量代表命令行中所有的参数，$* 把所有的参数看成一个整体</td></tr><tr><td>$@</td><td>这个变量也代表命令行中所有的参数，不过 $@ 把每个参数区分对待</td></tr><tr><td>$#</td><td>这个变量代表命令行中所有参数的个数</td></tr></tbody>\n</table></figure>\n<h6>示例1：</h6>\n<pre><code class=\"language-shell\" lang=\"shell\">[root@peiqi ~]#vim test1.sh\n    #!/bin/bash\n    n1=$1\n    n2=$2\n    # 变量sum的和是n1加n2\n    sum=$(( $n1 + $n2))\n    #打印变量sum的值\n    echo $sum\n[root@peiqi ~]#bash test1.sh 10 20\n30\n</code></pre>\n<h6>示例2：</h6>\n<pre><code class=\"language-shell\" lang=\"shell\">[root@peiqi ~]#vim test2.sh\n    #!/bin/bash \n    # 使用$#代表所有参数的个数\n    echo \"$#\"\n    # 使用$*代表所有的参数  \n    echo \"$*\" \n    # 使用$@也代表所有参数 \n    echo \"$@\" \n[root@peiqi ~]#bash test2.sh 4 5 6\n3\n4 5 6\n4 5 6\n</code></pre>\n<p>示例3：$* 与 $@ 的区别</p>\n<pre><code class=\"language-shell\" lang=\"shell\">[root@peiqi ~]#vim test3.sh\n    #!/bin/bash\n    echo \'----------------- \"$ *\" -----------------\'\n    # \"$*\" 中的所有参数看成是一个整体，所以这个for循环只会循环一次 \n    for i in \"$*\" \n        do \n            echo \"$i\" \n        done\n    echo \'----------------- \"$ @\" -----------------\'\n    # \"$@\" 中的每个参数都看成是独立的，所以有几个参数，就会循环几次\n    for j in \"$@\" \n        do \n            echo \"$j\" \n        done\n    echo \'----------------- $ * -----------------\'\n    # 注意 \"$*\" 与 $* 的区别，而 \"$@\" 与 $@ 则无区别\n    for k in $* \n        do \n            echo \"$k\"\n        done\n[root@peiqi ~]#bash test3.sh 1 2 3\n----------------- \"$ *\" -----------------\n1 2 3\n----------------- \"$ @\" -----------------\n1\n2\n3\n----------------- $ * -----------------\n1\n2\n3\n</code></pre>\n<h4>4、预定义变量</h4>\n<figure><table>\n<thead>\n<tr><th>预定义变量</th><th>作用</th></tr></thead>\n<tbody><tr><td>$?</td><td>最后一次执行的命令的返回状态。如果这个变量的值为0，证明上一个命令正确执行；如果这个变量的值为非0（具体是哪个数，由命令自己来决定），则证明上一个命令执行不正确</td></tr><tr><td>$$</td><td>当前进程的进程号（PID）</td></tr><tr><td>$!</td><td>后台运行的最后一个进程的进程号（PID）</td></tr></tbody>\n</table></figure>\n<pre><code class=\"language-shell\" lang=\"shell\">[root@peiqi ~]#vim test.sh\n    #!/bin/bash\n    # 输出当前进程的PID\n    # 这个PID就是test.sh这个脚本执行时，生成的进程的PID \n    echo \"The current process is $$\" \n    # 使用find命令在root目录下查找helloworld.sh文件\n    # 符号&amp;的意思是把命令放入后台执行\n    find /root -name helloworld.sh &amp; \n    echo \"The last one Daemon process is $!\"\n[root@peiqi ~]#bash test.sh \nThe current process is 23943\nThe last one Daemon process is 23944\n[root@peiqi ~]#/root/helloworld.sh\n</code></pre>\n<h6>接收键盘输入：</h6>\n<pre><code class=\"language-shell\" lang=\"shell\">read [选项] [变量名] \n选项： \n	-p \"提示信息\"：在等待read输入时，输出提示信息 \n	-t 秒数：read命令会一直等待用户输入，使用此选项可以指定等待时间 \n	-n 字符数：read命令只接受指定的字符数，就会执行 \n	-s：隐藏输入的数据，适用于机密信息的输入\n</code></pre>\n<pre><code class=\"language-shell\" lang=\"shell\">[root@peiqi ~]# vim read.sh\n    #!/bin/bash \n    # 提示\"请输入姓名\"并等待30秒，把用户的输入保存入变量name中 \n    read -t 30 -p \"Please input your name: \" name\n    # 年龄是隐私，所以我们用\"-s\"选项隐藏输入\n    read -s -p \"Please enter your age: \" age\n    echo -e \"\\n\"\n    # 使用\"-n 1\"选项只接收一个输入字符就会执行（都不用输入回车）\n    read -n 1 -p \"Please select your gender[m/f]: \" gender\n    echo -e \"\\n\"\n    echo \"Name：$name\"\n    echo \"Age：$age\"  \n    echo \"Gender：$gender\"\n[root@peiqi ~]# bash read.sh \nPlease input your name: pd\nPlease enter your age: \nPlease select your gender[m/f]: m\nName：pd\nAge：18\nGender：m\n</code></pre>\n<h2>五、Bash的运算符</h2>\n<h4>1、数值运算与运算符</h4>\n<h6>declare命令用于声明 shell 变量：</h6>\n<pre><code class=\"language-shell\" lang=\"shell\">declare [+/-][选项] 变量名 \n选项： \n	-：给变量设定类型属性 \n	+：取消变量的类型属性 \n	-i：将变量声明为整数型（integer） \n	-x：将变量声明为环境变量 \n	-p：显示指定变量的被声明的类型\n	\n[root@peiqi ~]# declare -i a // 声明整数型变量\n[root@peiqi ~]# a=10		 // 改变变量内容\n[root@peiqi ~]# echo $a\n10\n</code></pre>\n<p><a href=\"https://www.runoob.com/linux/linux-comm-declare.html\">Linux declare命令</a></p>\n<h6>数值运算：</h6>\n<p> 方法1：</p>\n<pre><code class=\"language-shell\" lang=\"shell\">[root@peiqi ~]# a=11\n[root@peiqi ~]# b=22\n[root@peiqi ~]# declare -i c=$a+$b\n</code></pre>\n<p>方法2：expr 或 let 数值运算工具</p>\n<pre><code class=\"language-shell\" lang=\"shell\">[root@peiqi ~]# a=11\n[root@peiqi ~]# b=22\n# d的值是a和b的和。注意+号两侧必须有空格\n[root@peiqi ~]# d=$(expr $a + $b)\n</code></pre>\n<p>方法3：\"$((运算式))\" 或 \"$[运算式]\"</p>\n<pre><code class=\"language-shell\" lang=\"shell\">[root@peiqi ~]# a=11\n[root@peiqi ~]# b=22\n[root@peiqi ~]# e=$(($a+$b))\n[root@peiqi ~]# f=$[$a+$b]\n</code></pre>\n<h6>运算符：</h6>\n<figure><table>\n<thead>\n<tr><th>优先级</th><th>运算符</th><th>说明</th></tr></thead>\n<tbody><tr><td>13</td><td>-、+</td><td>单目负、单目正</td></tr><tr><td>12</td><td>!、~</td><td>逻辑非、按位取反或补码</td></tr><tr><td>11</td><td>*、/、%</td><td>乘、除、取模</td></tr><tr><td>10</td><td>+、-</td><td>加、减</td></tr><tr><td>9</td><td>&lt;&lt;、&gt;&gt;</td><td>按位左移、按位右移</td></tr><tr><td>8</td><td>&lt;=、&gt;=、&lt;、&gt;</td><td>小于或等于、大于或等于、小于、大于</td></tr><tr><td>7</td><td>==、!=</td><td>等于、不等于</td></tr><tr><td>6</td><td>&amp;</td><td>按位与</td></tr><tr><td>5</td><td>^</td><td>按位异或</td></tr><tr><td>4</td><td>|</td><td>按位或</td></tr><tr><td>3</td><td>&amp;&amp;</td><td>逻辑与</td></tr><tr><td>2</td><td>||</td><td>逻辑</td></tr><tr><td>1</td><td>=、+=、-=、*=、/=、%=、&amp;=、 ^==、&lt;&lt;=、&gt;&gt;=</td><td>赋值、运算且赋值</td></tr></tbody>\n</table></figure>\n<pre><code class=\"language-shell\" lang=\"shell\"># 虽然乘和除的优先级高于加，但是通过小括号可以调整运算优先级 \n[root@peiqi ~]# a=$(( (11+3)*3/2 )) \n# 14不能被3整除，余数是2 \n[root@peiqi ~]# b=$(( 14%3 ))  \n# 逻辑与运算只有相与的两边都是1，与的结果才是1，否则与的结果是0 \n[root@peiqi ~]# c=$(( 1 &amp;&amp; 0 )) \n</code></pre>\n<h4>2、变量测试与内容替换</h4>\n<figure><table>\n<thead>\n<tr><th>变量置换方式</th><th>变量y没有设置</th><th>变量y为空值</th><th>变量y已设置值</th></tr></thead>\n<tbody><tr><td>x=${y-新值}</td><td>x=新值</td><td>x为空</td><td>x=$y</td></tr><tr><td>x=${y:-新值}</td><td>x=新值</td><td>x=新值</td><td>x=$y</td></tr><tr><td>x=${y+新值}</td><td>x为空</td><td>x=新值</td><td>x=新值</td></tr><tr><td>x=${y:+新值}</td><td>x为空</td><td>x为空</td><td>x=新值</td></tr><tr><td>x=${y=新值}</td><td>x=新值、y=新值</td><td>x为空、y值不变</td><td>x=$y、y值不变</td></tr><tr><td>x=${y:=新值}</td><td>x=新值、y=新值</td><td>x=新值、y=新值</td><td>x=$y、y值不变</td></tr><tr><td>x=${y?新值}</td><td>新值输出到标准、错误输出（就是屏幕）</td><td>x为空</td><td>x=$y</td></tr><tr><td>x=${y:?新值}</td><td>新值输出到标准、错误输出</td><td>新值输出到标准、错误输出</td><td>x=$y</td></tr></tbody>\n</table></figure>\n<pre><code class=\"language-shell\" lang=\"shell\">[root@peiqi ~]# unset y 	# 删除变量y\n[root@peiqi ~]# x=${y-new}  # 进行测试\n[root@peiqi ~]# echo $x 	# 因为变量y不存在，所以x=new\nnew\n[root@peiqi ~]# y=\"\"		# 给变量y赋值为空\n[root@peiqi ~]# x=${y-new}	# 进行测试\n[root@peiqi ~]# echo $x		# 因为变量y为空，所以x为空\n\n[root@peiqi ~]# y=old		# 给变量y赋值\n[root@peiqi ~]# x=${y-new}	# 进行测试\n[root@peiqi ~]# echo $x		# 因为变量y有值，所以x=$y\nold\n</code></pre>\n<h2>六、环境变量配置文件</h2>\n<h4>1、环境变量配置文件简介</h4>\n<h6>source命令：</h6>\n<pre><code class=\"language-shell\" lang=\"shell\">[root@peiqi ~]# source 配置文件\n或 \n[root@peiqi ~]# . 配置文件\n</code></pre>\n<h6>环境变量配置文件简介：</h6>\n<p>环境变量配置文件中主要是定义对系统的操作环境生效的系统默认环境变量，比如PATH、HISTSIZE、PS1、HOSTNAME等默认环境变量。</p>\n<ul>\n<li>/etc/profile </li>\n<li>/etc/profile.d/*.sh </li>\n<li>~/.bash_profile </li>\n<li>~/.bashrc </li>\n<li>/etc/bashrc </li>\n</ul>\n<h4>2、环境变量配置文件作用</h4>\n<h6>/etc/profile的作用：</h6>\n<ul>\n<li>USER变量</li>\n<li>LOGNAME变量</li>\n<li>MAIL变量</li>\n<li>PATH变量</li>\n<li>HOSTNAME变量</li>\n<li>HISTSIZE变量</li>\n<li>umask</li>\n<li>调用/etc/profile.d/*.sh文件</li>\n</ul>\n<h6>~/.bash_profile的作用：</h6>\n<ul>\n<li>调用了~/.bashrc文件</li>\n<li>在PATH变量后面加入了 :$HOME/bin 这个目录</li>\n</ul>\n<h6>~/.bashrc的作用：</h6>\n<ul>\n<li>定义默认别名</li>\n<li>调用/etc/bashrc</li>\n</ul>\n<h6>/etc/bashrc的作用：</h6>\n<ul>\n<li>PS1变量</li>\n<li>umask </li>\n<li>PATH变量</li>\n<li>调用/etc/profile.d/*.sh文件</li>\n</ul>\n<h4>3、其他配置文件和登录信息</h4>\n<h6>注销时生效的环境变量配置文件：</h6>\n<ul>\n<li>~/.bash_logout</li>\n</ul>\n<h6>其他配置文件：</h6>\n<ul>\n<li>~/bash_history </li>\n</ul>\n<h6>Shell登录信息：</h6>\n<ul>\n<li><p>本地终端欢迎信息： /etc/issue</p>\n<figure><table>\n<thead>\n<tr><th>转义符</th><th>作用</th></tr></thead>\n<tbody><tr><td>\\d</td><td>显示当前系统日期</td></tr><tr><td>\\s</td><td>显示操作系统名称</td></tr><tr><td>\\l</td><td>显示登录的终端号，这个比较常用</td></tr><tr><td>\\m</td><td>显示硬件体系结构，如i386、i686等</td></tr><tr><td>\\n</td><td>显示主机名</td></tr><tr><td>\\o</td><td>显示域名</td></tr><tr><td>\\r</td><td>显示内核版本</td></tr><tr><td>\\t</td><td>显示当前系统时间</td></tr><tr><td>\\u</td><td>显示当前登录用户的序列号</td></tr></tbody>\n</table></figure>\n</li>\n<li><p>远程终端欢迎信息： /etc/issue.net</p>\n<ul>\n<li>转义符在/etc/issue.net文件中不能使用</li>\n<li>是否显示此欢迎信息，由ssh的配置文件/etc/ssh/sshd_config决定，加入\"Banner /etc/issue.net\"行才能显示（记得重启SSH服务）</li>\n</ul>\n</li>\n<li><p>登陆后欢迎信息：/etc/motd</p>\n<ul>\n<li>不管是本地登录，还是远程登录，都可以显示此欢迎信息</li>\n</ul>\n</li>\n</ul>\n<h2>七、基础正则表达式</h2>\n<h4>1、正则表达式与通配符</h4>\n<ul>\n<li>正则表达式用来在文件中匹配符合条件的字符串。grep、awk、sed等命令可以支持正则表达式。</li>\n<li>通配符用来匹配符合条件的文件名，通配符是完全匹配。ls、find、cp这些命令不支持正则表达式，所以只能使用shell自己的通配符来进行匹配了。</li>\n</ul>\n<h4>2、基础正则表达式</h4>\n<figure><table>\n<thead>\n<tr><th style=\"text-align:center;\">字符</th><th style=\"text-align:left;\">说明</th></tr></thead>\n<tbody><tr><td style=\"text-align:center;\">\\</td><td style=\"text-align:left;\">将下一字符标记为特殊字符、文本、反向引用或八进制转义符。例如，\"n\" 匹配字符 \"n\"，\"\\n\" 匹配换行符，\"\\\\\" 匹配\"\\\"，\"\\(\" 匹配 \"(\"</td></tr><tr><td style=\"text-align:center;\">^</td><td style=\"text-align:left;\">匹配输入字符串开始的位置。如果设置了 <strong>RegExp</strong> 对象的 <strong>Multiline</strong> 属性，^ 还会与 \"\\n\" 或 \"\\r\" 之后的位置匹配</td></tr><tr><td style=\"text-align:center;\">$</td><td style=\"text-align:left;\">匹配输入字符串结尾的位置。如果设置了 <strong>RegExp</strong> 对象的 <strong>Multiline</strong> 属性，$ 还会与 \"\\n\" 或 \"\\r\" 之前的位置匹配</td></tr><tr><td style=\"text-align:center;\">*</td><td style=\"text-align:left;\"><strong>零次</strong> 或 <strong>多次</strong> 匹配前面的字符或子表达式。例如，\"zo*\" 匹配 \"z\" 和 \"zoo\"。* 等效于 {0,}</td></tr><tr><td style=\"text-align:center;\">{<strong>n</strong>}</td><td style=\"text-align:left;\"><strong>n</strong> 是非负整数，<strong>正好</strong>匹配 <strong>n</strong> 次。例如，\"o{2}\" 与 \"Bob\" 中的 \"o\" 不匹配，但与 \"food\" 中的两个 \"o\" 匹配</td></tr><tr><td style=\"text-align:center;\">{<strong>n</strong>,}</td><td style=\"text-align:left;\"><strong>n</strong> 是非负整数，<strong>至少</strong>匹配 <strong>n</strong> 次。例如，\"o{2,}\" 不匹配 \"Bob\" 中的 \"o\"，而匹配 \"foooood\" 中的所有 \"o\"。\"o{1,}\" 等效于 \"o+\"。\"o{0,}\" 等效于 \"o*\"</td></tr><tr><td style=\"text-align:center;\">{<strong>n</strong>,<strong>m</strong>}</td><td style=\"text-align:left;\"><strong>M</strong> 和 <strong>n</strong> 是非负整数，其中 <strong>n</strong> &lt;= <strong>m</strong>。匹配至少 <strong>n</strong> 次，至多 <strong>m</strong> 次。例如，\"o{1,3}\" 匹配 \"fooooood\" 中的头三个 \"o\"。\"o{0,1}\"  等效于 \"o?\"。注意：不能将空格插入逗号和数字之间</td></tr><tr><td style=\"text-align:center;\">.</td><td style=\"text-align:left;\">匹配除 \"\\r\\n\" (即换行符)之外的任何单个字符。若要匹配包括 \"\\r\\n\" 在内的任意字符，请使用诸如 \"[\\s\\S]\" 之类的模式</td></tr><tr><td style=\"text-align:center;\">[<strong>xyz</strong>]</td><td style=\"text-align:left;\">字符集，匹配包含的任一字符。例如，\"[abc]\" 匹配 \"plain\" 中的 \"a\"</td></tr><tr><td style=\"text-align:center;\">[^<strong>a-z</strong>]</td><td style=\"text-align:left;\">反向范围字符，匹配不在指定的范围内的任何字符。例如，\"[^a-z]\" 匹配任何不在 \"a\" 到 \"z\" 范围内的任何字符</td></tr></tbody>\n</table></figure>\n<pre><code class=\"language-shell\" lang=\"shell\"># 匹配至少包含有一个a的行 \ngrep \"a*\" test_rule.txt\n# 匹配最少包含两个连续a的字符串 \ngrep \"aa*\" test_rule.txt  \n# \"s..d\"会匹配在s和d这两个字母之间一定有两个字符的单词 \ngrep  \"s..d\" test_rule.txt  \n# 匹配在s和d字母之间有任意字符 \ngrep \"s.*d\" test_rule.txt  \n# 匹配所有内容\ngrep \".*\" test_rule.txt  \n# 匹配以大写\"M\"开头的行 \ngrep \"^M\" test_rule.txt \n# 匹配以小写\"n\"结尾的行\ngrep \"n$\" test_rule.txt \n# 会匹配空白行 \ngrep -n \"^$\" test_rule.txt \n# 匹配s和i字母中，要么是a、要么是o\ngrep \"s[ao]id\" test_rule.txt\n# 匹配任意一个数字 \ngrep \"[0-9]\" test_rule.txt\n# 匹配用小写字母开头的行\ngrep \"^[a-z]\" test_rule.txt\n# 匹配不是小写字母开头的行\ngrep \"^[^a-z]\" test_rule\n# 匹配不是字母开头的行 \ngrep \"^[^a-zA-Z]\" test\n# 匹配使用 . 结尾的行 \ngrep \"\\.$\" test_rule.txt\n# 匹配a字母连续出现三次的字符串\ngrep \"a\\{3\\}\" test_rule.txt \n# 匹配包含连续的三个数字的字符串 \ngrep \"[0-9]\\{3\\}\" test_rule.txt\n# 匹配最少用连续三个数字开头的行 \ngrep \"^[0-9]\\{3,\\}[a-z]\" test_rule.txt\n# 匹配在字母s和字母i之间有最少一个a，最多三个a \ngrep \"sa\\{1,3\\}i\" test_rule.txt \n</code></pre>\n<h2>八、字符截取命令</h2>\n<h4>1、cut字段提取命令</h4>\n<pre><code class=\"language-shell\" lang=\"shell\">cut [选项] 文件名 \n选项： \n	-f 列号：提取第几列 \n	-d 分隔符：按照指定分隔符分割列\n</code></pre>\n<pre><code class=\"language-shell\" lang=\"shell\">vim strudent.txt\n    ID Name Gender Mark\n    1 peiqi F 86\n    2 qiaozhi M 90\n    3 pd M 83\n[root@peiqi ~]# cut -d \" \" -f 2 student.txt \nName\npeiqi\nqiaozhi\npd\n[root@peiqi ~]# cut -d \" \" -f 3,4 student.txt \nGender Mark\nF 86\nM 90\nM 83\n[root@peiqi ~]# cut -d \":\" -f 1,3 /etc/passwd\n</code></pre>\n<h4>2、awk命令</h4>\n<pre><code class=\"language-shell\" lang=\"shell\"># 行匹配语句 awk \'\' 只能用单引号\nawk [选项参数] \'pattern1{action1}  pattern2{action2} ...\' filename\n选项参数：\n	-F fs：指定输入文件折分隔符，fs是一个字符串或者是一个正则表达式，如-F:\n	-v var=value：赋值一个用户定义变量\npattern：表示awk在数据中查找的内容，就是匹配模式\naction：在找到匹配内容时所执行的一系列命令\n</code></pre>\n<h5>案例实操：</h5>\n<ul>\n<li><p>数据准备</p>\n<pre><code class=\"language-shell\" lang=\"shell\">[root@peiqi ~]# cp /etc/passwd ./\n</code></pre>\n</li>\n<li><p>搜索passwd文件以root关键字开头的所有行，并输出该行的第7列</p>\n<pre><code class=\"language-shell\" lang=\"shell\">[root@peiqi ~]# awk -F: \'/^root/ {print $7}\' passwd\n</code></pre>\n</li>\n<li><p>搜索passwd文件以/bin/bash结尾的所有行，并输出该行的第1列和第7列，中间以 \" - \" 号分割</p>\n<pre><code class=\"language-shell\" lang=\"shell\">[root@peiqi ~]# awk -F: \'/\\/bin\\/bash$/ {print $1\" - \"$7}\' passwd \n</code></pre>\n</li>\n<li><p>只显示/etc/passwd的第一列和第七列，以制表符分割，且在所有行前面添加列名\"user，shell\"在最后一行添加\"pd，/bin/pd\"</p>\n<pre><code class=\"language-shell\" lang=\"shell\"># 注意：BEGIN 在所有数据读取行之前执行；END 在所有数据执行之后执行\nawk -F: \'BEGIN{print \"user\\tshell\"} {print $1\"\\t\"$7} END{print \"pd\\t/bin/pd\"}\' passwd\n</code></pre>\n</li>\n<li><p>将passwd文件中的用户id增加数值1并输出</p>\n<pre><code class=\"language-shell\" lang=\"shell\">[root@peiqi ~]# awk -v i=1 -F: \'{print $3+1}\' passwd\n</code></pre>\n</li>\n</ul>\n<h5>awk的内置变量：</h5>\n<figure><table>\n<thead>\n<tr><th>变量</th><th>说明</th></tr></thead>\n<tbody><tr><td>FILENAME</td><td>当前文件名</td></tr><tr><td>NR</td><td>已经读出的记录数，就是行号，从1开始</td></tr><tr><td>NF</td><td>一条记录的字段的数目</td></tr></tbody>\n</table></figure>\n<h6>案例实操：</h6>\n<ul>\n<li><p>统计passwd文件名，每行的行号，每行的列数</p>\n<pre><code class=\"language-shell\" lang=\"shell\">awk -F: \'{print \"文件名:\" FILENAME \"\\t\" \"行:\" NR  \"\\t\" \"列:\" NF}\' passwd\n文件名:passwd	行:1		列:7\n...\n...\n文件名:passwd	行:23	列:7\n</code></pre>\n</li>\n<li><p>切割IP</p>\n<pre><code class=\"language-shell\" lang=\"shell\">[root@peiqi ~]# ifconfig eth0 | grep \"inet\" | awk -F \" \" \'{print $2}\'\n172.17.229.160\n</code></pre>\n</li>\n<li><p>查询 test.txt 中空行所在的行号</p>\n<pre><code class=\"language-shell\" lang=\"shell\">[root@peiqi ~]# awk \'/^$/ {print NR}\' test.txt \n4\n6\n</code></pre>\n</li>\n<li><p>有文件 grade.txt 内容如下：</p>\n<pre><code>张三 40\n李四 50\n王五 60\n</code></pre>\n<p>求第二列的和并输出</p>\n<pre><code class=\"language-shell\" lang=\"shell\">awk -F \" \" \'{sum+=$2} END{print sum}\' grade.txt\n</code></pre>\n</li>\n<li><p>关系运算符</p>\n<pre><code class=\"language-shell\" lang=\"shell\"># a.txt\nID	Name    PHP	Linux	MySQL	Avg\n1   peiqi	82  95      86      87.66 \n2   pd      74  96      87      85.66 \n3   jaz     99  83      93      91.66\n</code></pre>\n<pre><code class=\"language-shell\" lang=\"shell\">[root@peiqi ~]# cat s.txt | awk \'$6&gt;=87.66 {printf $2 \"\\n\"}\' | grep -v Name\npeiqi\njaz\n</code></pre>\n</li>\n</ul>\n<h4>3、sed命令</h4>\n<p>sed是一种流编辑器，它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”，接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有改变，除非你使用重定向存储输出。</p>\n<pre><code class=\"language-shell\" lang=\"shell\">sed [选项参数] \'[action]\' filename\n# 选项参数：\n	-e：直接在指令列模式上进行sed的动作编辑\n	-n：一般sed命令会把所有数据都输出到屏幕，如果加入此选择，则只会把经过sed命令处理的行输出到屏幕\n	-i：用sed的修改结果直接修改读取数据的文件，而不是由屏幕输出\n# action：\n	a：追加，在当前行后添加一行或多行。添加多行时，除最后一行外，每行末尾需要用 \\ 代表数据未完结\n	c：行替换，用c后面的字符串替换原数据行，替换多行时，除最后一行外，每行末尾需用 \\ 代表数据未完结\n	i：插入，在当期行前插入一行或多行。插入多行时，除最后一行外，每行末尾需要用 \\ 代表数据未完结\n	d：删除，删除指定的行\n	p：打印，输出指定的行\n	s：字串替换，用一个字符串替换另外一个字符串。格式为\"行范围s/旧字串/新字串/g\" \n</code></pre>\n<h6>准备数据：</h6>\n<pre><code class=\"language-shell\" lang=\"shell\"># grade.txt\nID	Name    PHP	Linux	MySQL	Avg\n1   peiqi	82  95      86      87.66 \n2   pd      74  96      87      85.66 \n3   jaz     99  83      93      91.66\n</code></pre>\n<ul>\n<li><p>查看文件的第二行</p>\n<pre><code class=\"language-shell\" lang=\"shell\">[root@peiqi ~]# sed -n \'2p\' grade.txt \n1   peiqi	82  95      86      87.66 \n</code></pre>\n</li>\n<li><p>将 4a 4 alex 88 93 79 86.66 插入到 grade.txt 第4行的下面</p>\n<pre><code class=\"language-shell\" lang=\"shell\">sed \'4a 4 alex 88 93 79 86.66\' grade.txt\n</code></pre>\n</li>\n<li><p>删除文件中所有包含 peiqi 的行</p>\n<pre><code class=\"language-shell\" lang=\"shell\">sed \'/peiqi/d\' grade.txt\n</code></pre>\n</li>\n<li><p>删除第2行到第4行的数据，并对内容作出的是真正的删除（-i 参数）</p>\n<pre><code class=\"language-shell\" lang=\"shell\">sed -i \'2,4d\' grade.txt\n</code></pre>\n</li>\n<li><p>在第二行前插入两行数据</p>\n<pre><code class=\"language-shell\" lang=\"shell\">sed \'2i hello \\\nworld\' grade.txt\n</code></pre>\n</li>\n<li><p>将 grade.txt 文件中的 peiqi 替换为 qiaozhi</p>\n<pre><code class=\"language-shell\" lang=\"shell\"># g表示global，全部替换\nsed \'s/peiqi/qiaozhi/g\' grade.txt\n</code></pre>\n</li>\n<li><p>同时将 grade.txt 文件中的 peiqi 和 jaz 替换为空</p>\n<pre><code class=\"language-shell\" lang=\"shell\">sed \'s/peiqi//g;s/jaz//g\' grade.txt\n</code></pre>\n</li>\n</ul>\n<h2>九、字符处理命令</h2>\n<h4>1、排序命令sort</h4>\n<pre><code class=\"language-shell\" lang=\"shell\">sort [选项] 文件名\n# 选项： \n	-f：忽略大小写 \n	-n：以数值型进行排序，默认使用字符串型排序 \n	-r：反向排序 \n	-t：指定分隔符，默认是分隔符是制表符 \n	-k n[,m]：按照指定的字段范围排序。从第n字段开始，m字段结束（默认到行尾）\n</code></pre>\n<h6>准备数据：</h6>\n<pre><code class=\"language-shell\" lang=\"shell\">[root@peiqi ~]# vim sort.txt\n    bb:40:5.4\n    bd:20:4.2\n    xz:50:2.3\n    cl:10:3.5\n    ss:30:1.6\n</code></pre>\n<ul>\n<li><p>按照 : 分割后的第三列倒序排序</p>\n<pre><code class=\"language-shell\" lang=\"shell\">[root@peiqi ~]# sort -t : -nr -k 3 sort.txt\nbb:40:5.4\nbd:20:4.2\ncl:10:3.5\nxz:50:2.3\nss:30:1.6\n</code></pre>\n</li>\n</ul>\n<h4>2、统计命令wc</h4>\n<p>利用wc指令可以计算文件的Byte数、字数、或是列数，若不指定文件名称、或是所给予的文件名为\"-\"，则wc指令会从标准输入设备读取数据。</p>\n<pre><code class=\"language-shell\" lang=\"shell\">wc [选项] 文件名\n# 选项： \n	-l：只统计行数 \n	-w：只统计单词数 \n	-m：只统计字符数\n[root@peiqi ~]# wc -l -w -m sort.txt \n 5  5 50 sort.txt\n</code></pre>\n<h2>十、条件判断</h2>\n<h4>1、两个判断格式</h4>\n<pre><code class=\"language-shell\" lang=\"shell\">[root@peiqi ~]# test -e /etc/passwd\n[root@peiqi ~]# echo $?\n0\n[root@peiqi ~]# [ -e /etc/passwd ]\n[root@peiqi ~]# echo $?\n0\n# 第一个命令如果正确执行，则打印 yes，否则打印 no\n[root@peiqi ~]# [ -e /etc/pwd ] &amp;&amp; echo \"yes\" || echo \"no\"\nno\n</code></pre>\n<h4>2、按照文件类型进行判断</h4>\n<figure><table>\n<thead>\n<tr><th>测试选项</th><th>作用</th></tr></thead>\n<tbody><tr><td>-b 文件</td><td>判断该文件是否存在，并且是否为<mark>块设备</mark>文件</td></tr><tr><td>-c 文件</td><td>判断该文件是否存在，并且是否为<mark>字符设备</mark>文件</td></tr><tr><td>-d 文件</td><td>判断该文件是否存在，并且是否为<mark>目录</mark>文件</td></tr><tr><td>-e 文件</td><td>判断该文件是否存在</td></tr><tr><td>-f 文件</td><td>判断该文件是否存在，并且是否为<mark>普通</mark>文件</td></tr><tr><td>-L 文件</td><td>判断该文件是否存在，并且是否为<mark>符号链接</mark>文件</td></tr><tr><td>-p 文件</td><td>判断该文件是否存在，并且是否为<mark>管道</mark>文件</td></tr><tr><td>-s 文件</td><td>判断该文件是否存在，并且是否为<mark>管道</mark>文件</td></tr><tr><td>-S 文件</td><td>判断该文件是否存在，并且是否为<mark>套接字</mark>文件</td></tr></tbody>\n</table></figure>\n<h4>3、按照文件权限进行判断</h4>\n<figure><table>\n<thead>\n<tr><th>测试选项</th><th>作用</th></tr></thead>\n<tbody><tr><td>-r 文件</td><td>判断该文件是否存在，并且该文件是否拥有<mark>读权限</mark></td></tr><tr><td>-w 文件</td><td>判断该文件是否存在，并且该文件是否拥有<mark>写权限</mark></td></tr><tr><td>-x 文件</td><td>判断该文件是否存在，并且该文件是否拥有<mark>执行权限</mark></td></tr><tr><td>-u 文件</td><td>判断该文件是否存在，并且该文件是否拥有SUID权限</td></tr><tr><td>-g 文件</td><td>判断该文件是否存在，并且该文件是否拥有SGID权限</td></tr><tr><td>-k 文件</td><td>判断该文件是否存在，并且该文件是否拥有SBit权限</td></tr></tbody>\n</table></figure>\n<h4>4、两个文件之间进行比较</h4>\n<figure><table>\n<thead>\n<tr><th>测试选项</th><th>作用</th></tr></thead>\n<tbody><tr><td>文件1 -nt 文件2</td><td>判断文件1的修改时间是否比文件2的新</td></tr><tr><td>文件1 -ot 文件2</td><td>判断文件1的修改时间是否比文件2的旧</td></tr><tr><td>文件1 -ef 文件2</td><td>判断文件1是否和文件2的Inode号一致，可以理解为两个文件是否为同一个文件。这个判断用于判断硬链接是很好的方法</td></tr></tbody>\n</table></figure>\n<h4>5、两个整数之间比较</h4>\n<figure><table>\n<thead>\n<tr><th>测试选项</th><th>作用</th></tr></thead>\n<tbody><tr><td>整数1 -eq 整数2</td><td>判断整数1是否和整数2相等</td></tr><tr><td>整数1 -nq 整数2</td><td>判断整数1是否和整数2不相等</td></tr><tr><td>整数1 -gt 整数2</td><td>判断整数1是否大于整数2</td></tr><tr><td>整数1 -lt 整数2</td><td>判断整数1是否小于整数2</td></tr><tr><td>整数1 -ge 整数2</td><td>判断整数1是否大于等于整数2</td></tr><tr><td>整数1 -le 整数2</td><td>判断整数1是否小于等于整数2</td></tr></tbody>\n</table></figure>\n<h4>6、字符串的判断</h4>\n<figure><table>\n<thead>\n<tr><th>测试选项</th><th>作用</th></tr></thead>\n<tbody><tr><td>-z 字符串</td><td>判断字符串是否为空</td></tr><tr><td>-n 字符串</td><td>判断字符串是否为非空</td></tr><tr><td>字符串1 == 字符串2</td><td>判断字符串1是否和字符串2相等</td></tr><tr><td>字符串1 != 字符串2</td><td>判断字符串1是否和字符串2不相等</td></tr></tbody>\n</table></figure>\n<h4>7、多重条件判断</h4>\n<figure><table>\n<thead>\n<tr><th>测试选项</th><th>作用</th></tr></thead>\n<tbody><tr><td>判断1 -a 判断2</td><td>逻辑与，判断1和判断2都成立，最终的结果才为真</td></tr><tr><td>判断1 -o 判断2</td><td>逻辑或，判断1和判断2有一个成立，最终的结果就为真</td></tr><tr><td>!判断</td><td>逻辑非，使原始的判断式取反</td></tr></tbody>\n</table></figure>\n<h2>十一、流程控制</h2>\n<h4>1、if语句</h4>\n<h6>单分支if条件语句：</h6>\n<pre><code class=\"language-shell\" lang=\"shell\">if [ 条件判断式 ];then \n	程序 \nfi \n# 或者 \nif [ 条件判断式 ] \nthen \n	程序 \nfi\n</code></pre>\n<p>单分支条件语句需要注意几个点：</p>\n<ul>\n<li>if语句使用fi结尾，和一般语言使用大括号结尾不同</li>\n<li>[ 条件判断式 ]就是使用test命令判断，所以中括号和条件判断式之间必须有空格</li>\n<li>then后面跟符合条件之后执行的程序，可以放在[]之后，用 ; 分割。也可以换行写入，就不需要 ; 了</li>\n</ul>\n<pre><code class=\"language-shell\" lang=\"shell\">#!/bin/bash \n# 统计根分区使用率 \n# 把根分区使用率作为变量值赋予变量rate \nrate=$(df -h | grep \"/dev/vda1\" | awk \'{print $5}\' | cut -d \"%\" -f 1) \nif [ $rate -ge 80 ];then \n	echo \"Warning! /dev/vda1 is full of!\" \nfi\n</code></pre>\n<h6>双分支if条件语句：</h6>\n<pre><code class=\"language-shell\" lang=\"shell\">if [ 条件判断式 ];then \n	条件成立时，执行的程序 \nelse \n	条件不成立时，执行的另一个程序 \nfi\n</code></pre>\n<p>示例1：备份mysql数据库</p>\n<pre><code class=\"language-shell\" lang=\"shell\">#!/bin/bash \n# 备份mysql数据库\n\n# 同步系统时间 \nntpdate asia.pool.ntp.org &amp;&gt;/dev/null\n# 把当前系统时间按照\"年月日\"格式赋予变量date \ndate=$(date +%Y%m%d) \n# 统计mysql数据库的大小，并把大小赋予size变量 \nsize=$(du -sh /var/lib/mysql) \n\nif [ -d /tmp/dbbak ];then \n	echo \"Date: $date!\" &gt; /tmp/dbbak/dbinfo.txt \n	echo \"Data size: $size\" &gt;&gt; /tmp/dbbak/dbinfo.txt \n	cd /tmp/dbbak \n	tar -zcf mysql-lib-$date.tar.gz /var/lib/mysql dbinfo.txt &amp;&gt;/dev/null \n    rm -rf /tmp/dbbak/dbinfo.txt \nelse \n	mkdir /tmp/dbbak \n	echo \"Date: $date!\" &gt; /tmp/dbbak/dbinfo.txt \n	echo \"Data size: $size\" &gt;&gt; /tmp/dbbak/dbinfo.txt \n	cd /tmp/dbbak \n	tar -zcf mysql-lib-$date.tar.gz /var/lib/mysql dbinfo.txt &amp;&gt;/dev/null \n 	rm -rf /tmp/dbbak/dbinfo.txt\nfi\n</code></pre>\n<p>示例2：判断mysql是否启动</p>\n<pre><code class=\"language-shell\" lang=\"shell\">#!/bin/bash\nport=$(netstat -anp | grep mysql | grep tcp6 | awk \'{print $4}\' | cut -d \":\" -f 4) \nif [ \"$port\" == 3306 ];then \n	echo \"mysql is running...\"\nelse \n	service mysqld start\n	echo \"mysql is starting...\" \nfi\n</code></pre>\n<h6>多分支if条件语句：</h6>\n<pre><code class=\"language-shell\" lang=\"shell\">if [ 条件判断式1 ];then \n	当条件判断式1成立时，执行程序1 \nelif [ 条件判断式2 ];then \n	当条件判断式2成立时，执行程序2\nelse \n	当所有条件都不成立时，最后执行此程序 \nfi\n</code></pre>\n<h4>2、case语句</h4>\n<p>case语句和if…elif…else语句一样都是多分支条件语句，不过和if多分支条件语句不同的是，case语句只能判断一种条件关系，而if语句可以判断多种条件关系。</p>\n<pre><code class=\"language-shell\" lang=\"shell\">case $变量名 in \n\"值1\"） \n	如果变量的值等于值1，则执行程序1 \n;; \n\"值2\"） \n	如果变量的值等于值2，则执行程序2 \n;;  \n*） \n	如果变量的值都不是以上的值，则执行此程序 \n;; \nesac\n</code></pre>\n<h4>3、for循环</h4>\n<h6>语法一：</h6>\n<pre><code class=\"language-shell\" lang=\"shell\">for 变量 in 值1 值2 值3… \n	do \n		程序 \n	done\n</code></pre>\n<p>示例1：打印时间</p>\n<pre><code>#!/bin/bash\nfor time in morning noon afternoon evening \n	do \n		echo \"This time is $time!\" \n	done \n</code></pre>\n<p>示例2：批量解压缩脚本</p>\n<pre><code class=\"language-shell\" lang=\"shell\">#!/bin/bash\ncd /opt \nls *.tar.gz &gt; tar.log \nfor i in $(cat tar.log) \n	do \n		tar -zxf $i -C /test &amp;&gt;/dev/null \n	done \nrm -rf /opt/tar.log\n</code></pre>\n<h6>语法二：</h6>\n<pre><code class=\"language-shell\" lang=\"shell\">for (( 初始值;循环控制条件;变量变化 )) \n	do \n		程序 \n	done \n</code></pre>\n<p>示例：从1加到100</p>\n<pre><code class=\"language-shell\" lang=\"shell\">#!/bin/bash\ntotal=0 \nfor (( i=1;i&lt;=100;i=i+1 )) \n	do \n		total=$(( $total+$i )) \n	done \necho \"The sum of 1+2+...+100 is: $total\"\n</code></pre>\n<h4>4、while循环与until循环</h4>\n<h6>while循环：</h6>\n<p>while循环是不定循环，也称作条件循环。只要条件判断式成立，循环就会一直继续，直到条件判断式不成立，循环才会停止。这就和for的固定循环不太一样了。</p>\n<pre><code class=\"language-shell\" lang=\"shell\">while [ 条件判断式 ] \n	do \n		程序 \n	done\n</code></pre>\n<p>示例：从1加到100</p>\n<pre><code class=\"language-shell\" lang=\"shell\">#!/bin/bash\ni=1 \ntotal=0\nwhile [ $i -le 100 ] \n	do \n		total=$(( $total+$i )) \n		i=$(( $i+1 )) \n	done \necho \"The sum of 1+2+...+100 is: $total\"\n</code></pre>\n<h6>until循环：</h6>\n<p>until循环，和while循环相反，until循环时只要条件判断式不成立则进行循环，并执行循环程序。一旦循环条件成立，则终止循环。</p>\n<pre><code class=\"language-shell\" lang=\"shell\">until [ 条件判断式 ] \n	do \n		程序 \n	done \n</code></pre>\n<p>示例：从1加到100</p>\n<pre><code class=\"language-shell\" lang=\"shell\">#!/bin/bash\ni=1 \ntotal=0\n# 循环直到变量i的值大于100，就停止循环 \nuntil [ $i -gt 100 ] \n	do \n		total=$(( $total+$i )) \n		i=$(( $i+1 )) \n	done \necho \"The sum of 1+2+...+100 is: $total\"\n</code></pre>\n<p> </p>\n</body>', 25);
INSERT INTO `blog_articledetail` VALUES (26, '<body><h3>正则表达式语法</h3>\n<figure><table>\n<thead>\n<tr><th style=\"text-align:center;\">字符</th><th style=\"text-align:left;\">说明</th></tr></thead>\n<tbody><tr><td style=\"text-align:center;\">\\</td><td style=\"text-align:left;\">将下一字符标记为特殊字符、文本、反向引用或八进制转义符。例如，\"n\" 匹配字符 \"n\"，\"\\n\" 匹配换行符，\"\\\\\" 匹配\"\\\"，\"\\(\" 匹配 \"(\"</td></tr><tr><td style=\"text-align:center;\">^</td><td style=\"text-align:left;\">匹配输入字符串开始的位置。如果设置了 <strong>RegExp</strong> 对象的 <strong>Multiline</strong> 属性，^ 还会与 \"\\n\" 或 \"\\r\" 之后的位置匹配</td></tr><tr><td style=\"text-align:center;\">$</td><td style=\"text-align:left;\">匹配输入字符串结尾的位置。如果设置了 <strong>RegExp</strong> 对象的 <strong>Multiline</strong> 属性，$ 还会与 \"\\n\" 或 \"\\r\" 之前的位置匹配</td></tr><tr><td style=\"text-align:center;\">*</td><td style=\"text-align:left;\"><strong>零次</strong> 或 <strong>多次</strong> 匹配前面的字符或子表达式。例如，\"zo*\" 匹配 \"z\" 和 \"zoo\"。* 等效于 {0,}</td></tr><tr><td style=\"text-align:center;\">+</td><td style=\"text-align:left;\"><strong>一次 </strong>或 <strong>多次</strong> 匹配前面的字符或子表达式。例如，\"zo+\" 匹配 \"zo\" 和 \"zoo\"，但与 \"z\" 不匹配。+ 等效于 {1,}</td></tr><tr><td style=\"text-align:center;\">?</td><td style=\"text-align:left;\"><strong>零次</strong> 或 <strong>一次 </strong>匹配前面的字符或子表达式。例如，\"do(es)?\" 匹配 \"do\" 或 \"does\"。? 等效于 {0,1}</td></tr><tr><td style=\"text-align:center;\">{<strong>n</strong>}</td><td style=\"text-align:left;\"><strong>n</strong> 是非负整数，<strong>正好</strong>匹配 <strong>n</strong> 次。例如，\"o{2}\" 与 \"Bob\" 中的 \"o\" 不匹配，但与 \"food\" 中的两个 \"o\" 匹配</td></tr><tr><td style=\"text-align:center;\">{<strong>n</strong>,}</td><td style=\"text-align:left;\"><strong>n</strong> 是非负整数，<strong>至少</strong>匹配 <strong>n</strong> 次。例如，\"o{2,}\" 不匹配 \"Bob\" 中的 \"o\"，而匹配 \"foooood\" 中的所有 \"o\"。\"o{1,}\" 等效于 \"o+\"。\"o{0,}\" 等效于 \"o*\"</td></tr><tr><td style=\"text-align:center;\">{<strong>n</strong>,<strong>m</strong>}</td><td style=\"text-align:left;\"><strong>M</strong> 和 <strong>n</strong> 是非负整数，其中 <strong>n</strong> &lt;= <strong>m</strong>。匹配至少 <strong>n</strong> 次，至多 <strong>m</strong> 次。例如，\"o{1,3}\" 匹配 \"fooooood\" 中的头三个 \"o\"。\"o{0,1}\"  等效于 \"o?\"。注意：不能将空格插入逗号和数字之间</td></tr><tr><td style=\"text-align:center;\">?</td><td style=\"text-align:left;\">当此字符紧随任何其他限定符 *、+、?、{<strong>n</strong>}、{<strong>n</strong>,}、{<strong>n</strong>,<strong>m</strong>} 之后时，匹配模式是\"非贪心的\"。<strong>\"非贪心的\"模式匹配搜索到的、尽可能短的字符串</strong>，而默认的<strong>\"贪心的\"模式匹配搜索到的、尽可能长的字符串</strong>。例如，在字符串 \"oooo\" 中，\"o+?\" 只匹配单个 \"o\"，而 \"o+\" 匹配所有 \"o\"</td></tr><tr><td style=\"text-align:center;\">.</td><td style=\"text-align:left;\">匹配除 \"\\r\\n\" 之外的任何单个字符。若要匹配包括 \"\\r\\n\" 在内的任意字符，请使用诸如 \"[\\s\\S]\" 之类的模式</td></tr><tr><td style=\"text-align:center;\">(<strong>pattern</strong>)</td><td style=\"text-align:left;\">匹配 <strong>pattern</strong> 并捕获该匹配的子表达式。可以使用 <strong>$0…$9</strong> 属性从结果\"匹配\"集合中检索捕获的匹配。若要匹配括号字符 ( )，请使用 \"\\(\" 或者 \"\\)\"</td></tr><tr><td style=\"text-align:center;\">(?:<strong>pattern</strong>)</td><td style=\"text-align:left;\">匹配 <strong>pattern</strong> 但不捕获该匹配的子表达式，即它是一个非捕获匹配，不存储供以后使用的匹配。这对于用 \"or\" 字符 (|) 组合模式部件的情况很有用。例如，\"industr(?:y|ies)\" 是比  \"industry|industries\" 更经济的表达式</td></tr><tr><td style=\"text-align:center;\">(?=<strong>pattern</strong>)</td><td style=\"text-align:left;\">执行正向预测先行搜索的子表达式，该表达式匹配处于匹配 <strong>pattern</strong> 的字符串的起始点的字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，\"Windows (?=95|98|NT|2000)\" 匹配 \"Windows 2000\" 中的 \"Windows\"，但不匹配 \"Windows 3.1\" 中的 \"Windows\"。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后</td></tr><tr><td style=\"text-align:center;\">(?!<strong>pattern</strong>)</td><td style=\"text-align:left;\">执行反向预测先行搜索的子表达式，该表达式匹配不处于匹配 <strong>pattern</strong> 的字符串的起始点的搜索字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，\"Windows (?!95|98|NT|2000)\" 匹配 \"Windows 3.1\" 中的 \"Windows\"，但不匹配 \"Windows 2000\" 中的 \"Windows\"。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后</td></tr><tr><td style=\"text-align:center;\"><strong>x</strong>|<strong>y</strong></td><td style=\"text-align:left;\">匹配 <strong>x</strong> 或 <strong>y</strong>。例如，\"z|food\" 匹配 \"z\" 或 \"food\"。\"(z|f)ood\"  匹配 \"zood\" 或 \"food\"</td></tr><tr><td style=\"text-align:center;\">[<strong>xyz</strong>]</td><td style=\"text-align:left;\">字符集，匹配包含的任一字符。例如，\"[abc]\" 匹配 \"plain\" 中的 \"a\"</td></tr><tr><td style=\"text-align:center;\">[^<strong>xyz</strong>]</td><td style=\"text-align:left;\">反向字符集，匹配未包含的任何字符。例如，\"[^abc]\" 匹配 \"plain\" 中 \"p\"，\"l\"，\"i\"，\"n\"</td></tr><tr><td style=\"text-align:center;\">[<strong>a-z</strong>]</td><td style=\"text-align:left;\">字符范围，匹配指定范围内的任何字符。例如，\"[a-z]\" 匹配 \"a\" 到 \"z\" 范围内的任何小写字母</td></tr><tr><td style=\"text-align:center;\">[^<strong>a-z</strong>]</td><td style=\"text-align:left;\">反向范围字符，匹配不在指定的范围内的任何字符。例如，\"[^a-z]\" 匹配任何不在 \"a\" 到 \"z\" 范围内的任何字符</td></tr><tr><td style=\"text-align:center;\">\\b</td><td style=\"text-align:left;\">匹配一个字边界，即字与空格间的位置。例如，\"er\\b\" 匹配 \"never\" 中的 \"er\"，但不匹配 \"verb\" 中的 \"er\"</td></tr><tr><td style=\"text-align:center;\">\\B</td><td style=\"text-align:left;\">非字边界匹配。\"er\\B\" 匹配 \"verb\" 中的 \"er\"，但不匹配 \"never\" 中的 \"er\"</td></tr><tr><td style=\"text-align:center;\">\\c<strong>x</strong></td><td style=\"text-align:left;\">匹配 <strong>x</strong> 指示的控制字符。例如，\"\\cM\" 匹配 \"Control-M\" 或 回车符。<strong>x</strong> 的值必须在 A-Z 或 a-z 之间。如果不是这样，则假定 c 就是 \"c\" 字符本身</td></tr><tr><td style=\"text-align:center;\">\\d</td><td style=\"text-align:left;\">数字字符匹配。等效于 \"[0-9]\"</td></tr><tr><td style=\"text-align:center;\">\\D</td><td style=\"text-align:left;\">非数字字符匹配。等效于 \"[^0-9]\"</td></tr><tr><td style=\"text-align:center;\">\\f</td><td style=\"text-align:left;\">换页符匹配。等效于 \"\\x0c\"  和 \"\\cL\"</td></tr><tr><td style=\"text-align:center;\">\\n</td><td style=\"text-align:left;\">换行符匹配。等效于 \"\\x0a\" 和 \"\\cJ\"</td></tr><tr><td style=\"text-align:center;\">\\r</td><td style=\"text-align:left;\">匹配一个回车符。等效于\" \\x0d\" 和 \"\\cM\"</td></tr><tr><td style=\"text-align:center;\">\\s</td><td style=\"text-align:left;\">匹配任何空白字符，包括空格、制表符、换页符等。与 \"[ \\f\\n\\r\\t\\v]\" 等效</td></tr><tr><td style=\"text-align:center;\">\\S</td><td style=\"text-align:left;\">匹配任何非空白字符。与 \"[^ \\f\\n\\r\\t\\v]\" 等效。</td></tr><tr><td style=\"text-align:center;\">\\t</td><td style=\"text-align:left;\">制表符匹配。与 \"\\x09\" 和\" \\cI\" 等效</td></tr><tr><td style=\"text-align:center;\">\\v</td><td style=\"text-align:left;\">垂直制表符匹配。与\" \\x0b\" 和 \"\\cK\" 等效</td></tr><tr><td style=\"text-align:center;\">\\w</td><td style=\"text-align:left;\">匹配任何字类字符，包括下划线。与 \"[A-Za-z0-9_]\" 等效</td></tr><tr><td style=\"text-align:center;\">\\W</td><td style=\"text-align:left;\">与任何非单词字符匹配。与 \"[^A-Za-z0-9_]\" 等效</td></tr><tr><td style=\"text-align:center;\">\\x<strong>n</strong></td><td style=\"text-align:left;\">匹配 <strong>n</strong>，此处的 <strong>n</strong> 是一个十六进制转义码。十六进制转义码必须正好是两位数长。例如，\"\\x41\" 匹配 \"A\"。\"\\x041\" 与 \"\\x04\"&amp;\"1\" 等效。允许在正则表达式中使用 ASCII 代码</td></tr><tr><td style=\"text-align:center;\">\\<strong>num</strong></td><td style=\"text-align:left;\">匹配 <strong>num</strong>，此处的 <strong>num</strong> 是一个正整数。到捕获匹配的反向引用。例如，\"(.)\\1\" 匹配两个连续的相同字符</td></tr><tr><td style=\"text-align:center;\">\\n</td><td style=\"text-align:left;\">标识一个八进制转义码或反向引用。如果 \\n 前面至少有 <strong>n</strong> 个捕获子表达式，那么 <strong>n</strong> 是反向引用。否则，如果 <strong>n</strong> 是八进制数 (0-7)，那么 <strong>n</strong> 是八进制转义码</td></tr><tr><td style=\"text-align:center;\">\\<strong>nm</strong></td><td style=\"text-align:left;\">标识一个八进制转义码或反向引用。如果 \\nm 前面至少有 <strong>nm</strong> 个捕获子表达式，那么 <strong>nm</strong> 是反向引用。如果 \\nm 前面至少有 <strong>n</strong> 个捕获，则 <strong>n</strong> 是反向引用，后面跟有字符 <strong>m</strong>。如果两种前面的情况都不存在，则 \\nm 匹配八进制值 <strong>nm</strong>，其中 <strong>n</strong> 和 <strong>m</strong> 是八进制数字 (0-7)</td></tr><tr><td style=\"text-align:center;\">\\<strong>nml</strong></td><td style=\"text-align:left;\">当 <strong>n</strong> 是八进制数 (0-3)，<strong>m</strong> 和 <strong>l</strong> 是八进制数 (0-7) 时，匹配八进制转义码 <strong>nml</strong></td></tr><tr><td style=\"text-align:center;\">\\u<strong>n</strong></td><td style=\"text-align:left;\">匹配 <strong>n</strong>，其中 <strong>n</strong> 是以四位十六进制数表示的 Unicode 字符。例如，\\u00A9 匹配版权符号 ©</td></tr></tbody>\n</table></figure>\n</body>', 26);
INSERT INTO `blog_articledetail` VALUES (27, '<div class=\"page-inner\">\n<div id=\"book-search-results\">\n<div class=\"search-noresults\">\n<div id=\"anchor-navigation-ex-navbar\">\n<i class=\"fa fa-navicon\"></i>\n<ul>\n<li>\n<span class=\"title-icon\"></span><a href=\"#golang新手可能会踩的58个坑\"><b>1. </b>Golang新手可能会踩的58个坑</a>\n</li>\n<ul>\n<li>\n<span class=\"title-icon\"></span><a href=\"#前言\"><b>1.1. </b>前言</a>\n</li>\n<ul>\n<li>\n<span class=\"title-icon\"></span><a href=\"#初级篇：1-34\"><b>1.1.1. </b>初级篇：1-34</a>\n</li>\n<li>\n<span class=\"title-icon\"></span><a href=\"#中级篇：36-51\"><b>1.1.2. </b>中级篇：36-51</a>\n</li>\n<li>\n<span class=\"title-icon\"></span><a href=\"#高级篇：52-58\"><b>1.1.3. </b>高级篇：52-58</a>\n</li>\n</ul>\n</ul>\n</ul>\n</div>\n<a href=\"#golang新手可能会踩的58个坑\" id=\"anchorNavigationExGoTop\"><i class=\"fa fa-arrow-up\"></i></a>\n<h1 id=\"golang新手可能会踩的58个坑\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#golang新手可能会踩的58个坑\" name=\"golang新手可能会踩的58个坑\"><i class=\"fa fa-link\"></i></a>1. Golang新手可能会踩的58个坑\n			</h1>\n<h2 id=\"前言\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#前言\" name=\"前言\"><i class=\"fa fa-link\"></i></a>1.1. 前言\n			</h2>\n<p>\n				Go 是一门简单有趣的编程语言，与其他语言一样，在使用时不免会遇到很多坑，不过它们大多不是 Go 本身的设计缺陷。如果你刚从其他语言转到 Go，那这篇文章里的坑多半会踩到。\n			</p>\n<p>\n				如果花时间学习官方 doc、wiki、讨论邮件列表、 Rob Pike 的大量文章以及 Go 的源码，会发现这篇文章中的坑是很常见的，新手跳过这些坑，能减少大量调试代码的时间。\n			</p>\n<h3 id=\"初级篇：1-34\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#初级篇：1-34\" name=\"初级篇：1-34\"><i class=\"fa fa-link\"></i></a>1.1.1. 初级篇：1-34\n			</h3>\n<h4 id=\"1左大括号--不能单独放一行\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#1左大括号--不能单独放一行\" name=\"1左大括号--不能单独放一行\"><i class=\"fa fa-link\"></i></a>1.左大括号 { 不能单独放一行\n			</h4>\n<p>\n				在其他大多数语言中，{ 的位置你自行决定。Go比较特别，遵守分号注入规则（automatic semicolon injection）：编译器会在每行代码尾部特定分隔符后加;来分隔多条语句，比如会在 ) 后加分号：\n			</p>\n<pre class=\"language-\"><span class=\"token comment\">// 错误示例</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"www.topgoer.com是个不错的go语言中文文档\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 等效于</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 无函数体 </span> <span class=\"token punctuation\">{</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> </pre>\n<pre class=\"language-\">./main.go: missing function body\n    ./main.go: syntax error: unexpected semicolon or newline before {</pre>\n<pre class=\"language-\"><span class=\"token comment\">// 正确示例</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"www.topgoer.com是个不错的go语言中文文档\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> </pre>\n<h4 id=\"2未使用的变量\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#2未使用的变量\" name=\"2未使用的变量\"><i class=\"fa fa-link\"></i></a>2.未使用的变量\n			</h4>\n<p>\n				如果在函数体代码中有未使用的变量，则无法通过编译，不过全局变量声明但不使用是可以的。即使变量声明后为变量赋值，依旧无法通过编译，需在某处使用它：\n			</p>\n<pre class=\"language-\"><span class=\"token comment\">// 错误示例</span> <span class=\"token keyword\">var</span> gvar <span class=\"token builtin\">int</span> <span class=\"token comment\">// 全局变量，声明不使用也可以</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">var</span> one <span class=\"token builtin\">int</span> <span class=\"token comment\">// error: one declared and not used</span> two <span class=\"token operator\">:=</span> <span class=\"token number\">2</span> <span class=\"token comment\">// error: two declared and not used</span> <span class=\"token keyword\">var</span> three <span class=\"token builtin\">int</span> <span class=\"token comment\">// error: three declared and not used</span> three <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 正确示例</span> <span class=\"token comment\">// 可以直接注释或移除未使用的变量</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">var</span> one <span class=\"token builtin\">int</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> one\n\n    two <span class=\"token operator\">:=</span> <span class=\"token number\">2</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>two<span class=\"token punctuation\">)</span> <span class=\"token keyword\">var</span> three <span class=\"token builtin\">int</span> one <span class=\"token operator\">=</span> three <span class=\"token keyword\">var</span> four <span class=\"token builtin\">int</span> four <span class=\"token operator\">=</span> four <span class=\"token punctuation\">}</span> </pre>\n<h4 id=\"3未使用的-import\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#3未使用的-import\" name=\"3未使用的-import\"><i class=\"fa fa-link\"></i></a>3.未使用的 import\n			</h4>\n<p>\n				如果你 import一个包，但包中的变量、函数、接口和结构体一个都没有用到的话，将编译失败。可以使用_下划线符号作为别名来忽略导入的包，从而避免编译错误，这只会执行 package 的 init()\n			</p>\n<pre class=\"language-\"><span class=\"token comment\">// 错误示例</span> <span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">\"fmt\"</span> <span class=\"token comment\">// imported and not used: \"fmt\"</span> <span class=\"token string\">\"log\"</span> <span class=\"token comment\">// imported and not used: \"log\"</span> <span class=\"token string\">\"time\"</span> <span class=\"token comment\">// imported and not used: \"time\"</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 正确示例</span> <span class=\"token comment\">// 可以使用 goimports 工具来注释或移除未使用到的包</span> <span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span> <span class=\"token boolean\">_</span> <span class=\"token string\">\"fmt\"</span> <span class=\"token string\">\"log\"</span> <span class=\"token string\">\"time\"</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> log<span class=\"token punctuation\">.</span>Println <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>Now <span class=\"token punctuation\">}</span> </pre>\n<h4 id=\"4简短声明的变量只能在函数内部使用\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#4简短声明的变量只能在函数内部使用\" name=\"4简短声明的变量只能在函数内部使用\"><i class=\"fa fa-link\"></i></a>4.简短声明的变量只能在函数内部使用\n			</h4>\n<pre class=\"language-\"><span class=\"token comment\">// 错误示例</span> myvar <span class=\"token operator\">:=</span> <span class=\"token number\">1</span> <span class=\"token comment\">// syntax error: non-declaration statement outside function body</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 正确示例</span> <span class=\"token keyword\">var</span> myvar <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> </pre>\n<h4 id=\"5使用简短声明来重复声明变量\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#5使用简短声明来重复声明变量\" name=\"5使用简短声明来重复声明变量\"><i class=\"fa fa-link\"></i></a>5.使用简短声明来重复声明变量\n			</h4>\n<p>\n				不能用简短声明方式来单独为一个变量重复声明，:=左侧至少有一个新变量，才允许多变量的重复声明：\n			</p>\n<pre class=\"language-\"><span class=\"token comment\">// 错误示例</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> one <span class=\"token operator\">:=</span> <span class=\"token number\">0</span> one <span class=\"token operator\">:=</span> <span class=\"token number\">1</span> <span class=\"token comment\">// error: no new variables on left side of :=</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 正确示例</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> one <span class=\"token operator\">:=</span> <span class=\"token number\">0</span> one<span class=\"token punctuation\">,</span> two <span class=\"token operator\">:=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token comment\">// two 是新变量，允许 one 的重复声明。比如 error 处理经常用同名变量 err</span> one<span class=\"token punctuation\">,</span> two <span class=\"token operator\">=</span> two<span class=\"token punctuation\">,</span> one <span class=\"token comment\">// 交换两个变量值的简写</span> <span class=\"token punctuation\">}</span> </pre>\n<h4 id=\"6不能使用简短声明来设置字段的值\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#6不能使用简短声明来设置字段的值\" name=\"6不能使用简短声明来设置字段的值\"><i class=\"fa fa-link\"></i></a>6.不能使用简短声明来设置字段的值\n			</h4>\n<p>\n				struct 的变量字段不能使用 := 来赋值以使用预定义的变量来避免解决：\n			</p>\n<pre class=\"language-\"><span class=\"token comment\">// 错误示例</span> <span class=\"token keyword\">type</span> info <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span> result <span class=\"token builtin\">int</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">func</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">var</span> data info\n    data<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// error: non-name data.result on left side of :=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"info: %+v\\n\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 正确示例</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">var</span> data info <span class=\"token keyword\">var</span> err <span class=\"token builtin\">error</span> <span class=\"token comment\">// err 需要预声明</span> data<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">}</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"info: %+v\\n\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> </pre>\n<h4 id=\"7不小心覆盖了变量\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#7不小心覆盖了变量\" name=\"7不小心覆盖了变量\"><i class=\"fa fa-link\"></i></a>7.不小心覆盖了变量\n			</h4>\n<p>\n				对从动态语言转过来的开发者来说，简短声明很好用，这可能会让人误会 := 是一个赋值操作符。如果你在新的代码块中像下边这样误用了 :=，编译不会报错，但是变量不会按你的预期工作：\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> x <span class=\"token operator\">:=</span> <span class=\"token number\">1</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span> x <span class=\"token operator\">:=</span> <span class=\"token number\">2</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2    // 新的 x 变量的作用域只在代码块内部</span> <span class=\"token punctuation\">}</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				这是 Go 开发者常犯的错，而且不易被发现。可使用 vet工具来诊断这种变量覆盖，Go 默认不做覆盖检查，添加 -shadow 选项来启用：\n			</p>\n<pre class=\"language-\">&gt; go tool vet -shadow main.go\n    main.go:9: declaration of \"x\" shadows declaration at main.go:5</pre>\n<p>\n				注意 vet 不会报告全部被覆盖的变量，可以使用 go-nyet 来做进一步的检测：\n			</p>\n<pre class=\"language-\">&gt; $GOPATH/bin/go-nyet main.go\n    main.go:10:3:Shadowing variable `x`</pre>\n<h4 id=\"8显式类型的变量无法使用-nil-来初始化\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#8显式类型的变量无法使用-nil-来初始化\" name=\"8显式类型的变量无法使用-nil-来初始化\"><i class=\"fa fa-link\"></i></a>8.显式类型的变量无法使用 nil 来初始化\n			</h4>\n<p>\n				nil 是 interface、function、pointer、map、slice 和 channel 类型变量的默认初始值。但声明时不指定类型，编译器也无法推断出变量的具体类型。\n			</p>\n<pre class=\"language-\"><span class=\"token comment\">// 错误示例</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span> <span class=\"token comment\">// error: use of untyped nil</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> x <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 正确示例</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">var</span> x <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> x <span class=\"token punctuation\">}</span> </pre>\n<h4 id=\"9直接使用值为-nil-的-slice、map\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#9直接使用值为-nil-的-slice、map\" name=\"9直接使用值为-nil-的-slice、map\"><i class=\"fa fa-link\"></i></a>9.直接使用值为 nil 的 slice、map\n			</h4>\n<p>\n				允许对值为 nil 的 slice 添加元素，但对值为 nil 的 map添加元素则会造成运行时 panic\n			</p>\n<pre class=\"language-\"><span class=\"token comment\">// map 错误示例</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">var</span> m <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> m<span class=\"token punctuation\">[</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\">// error: panic: assignment to entry in nil map</span> <span class=\"token comment\">// m := make(map[string]int)// map 的正确声明，分配了实际的内存</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// slice 正确示例</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">var</span> s <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> s <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> </pre>\n<h4 id=\"10map-容量\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#10map-容量\" name=\"10map-容量\"><i class=\"fa fa-link\"></i></a>10.map 容量\n			</h4>\n<p>\n				在创建 map 类型的变量时可以指定容量，但不能像 slice 一样使用 cap() 来检测分配空间的大小：\n			</p>\n<pre class=\"language-\"><span class=\"token comment\">// 错误示例</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> m <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">cap</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// error: invalid argument m1 (type map[string]int) for cap </span> <span class=\"token punctuation\">}</span> </pre>\n<h4 id=\"11string-类型的变量值不能为-nil\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#11string-类型的变量值不能为-nil\" name=\"11string-类型的变量值不能为-nil\"><i class=\"fa fa-link\"></i></a>11.string 类型的变量值不能为 nil\n			</h4>\n<p>\n				对那些喜欢用 nil 初始化字符串的人来说，这就是坑：\n			</p>\n<pre class=\"language-\"><span class=\"token comment\">// 错误示例</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">var</span> s <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span> <span class=\"token comment\">// cannot use nil as type string in assignment</span> <span class=\"token keyword\">if</span> s <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// invalid operation: s == nil (mismatched types string and nil)</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"default\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 正确示例</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">var</span> s <span class=\"token builtin\">string</span> <span class=\"token comment\">// 字符串类型的零值是空串 \"\"</span> <span class=\"token keyword\">if</span> s <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">{</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"default\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> </pre>\n<h4 id=\"12array-类型的值作为函数参数\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#12array-类型的值作为函数参数\" name=\"12array-类型的值作为函数参数\"><i class=\"fa fa-link\"></i></a>12.Array 类型的值作为函数参数\n			</h4>\n<p>\n				在 C/C++ 中，数组（名）是指针。将数组作为参数传进函数时，相当于传递了数组内存地址的引用，在函数内部会改变该数组的值。\n			</p>\n<p>\n				在 Go 中，数组是值。作为参数传进函数时，传递的是数组的原始值拷贝，此时在函数内部是无法更新该数组的：\n			</p>\n<pre class=\"language-\"><span class=\"token comment\">// 数组使用值拷贝传参</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> x <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>arr <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">7</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [7 2 3]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1 2 3]    // 并不是你以为的 [7 2 3]</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				如果想修改参数数组：\n			</p>\n<ul>\n<li>\n					直接传递指向这个数组的指针类型：\n				</li>\n</ul>\n<pre class=\"language-\"><span class=\"token comment\">// 传址会修改原数据</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> x <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>arr <span class=\"token operator\">*</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">7</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// &amp;[7 2 3]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [7 2 3]</span> <span class=\"token punctuation\">}</span> </pre>\n<ul>\n<li>\n					直接使用 slice：即使函数内部得到的是 slice 的值拷贝，但依旧会更新 slice 的原始数据（底层 array）\n				</li>\n</ul>\n<pre class=\"language-\"><span class=\"token comment\">// 会修改 slice 的底层 array，从而修改 slice</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> x <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>arr <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">7</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [7 2 3]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [7 2 3]</span> <span class=\"token punctuation\">}</span> </pre>\n<h4 id=\"13range-遍历-slice-和-array-时混淆了返回值\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#13range-遍历-slice-和-array-时混淆了返回值\" name=\"13range-遍历-slice-和-array-时混淆了返回值\"><i class=\"fa fa-link\"></i></a>13.range 遍历 slice 和 array 时混淆了返回值\n			</h4>\n<p>\n				与其他编程语言中的 for-in 、foreach 遍历语句不同，Go 中的 range 在遍历时会生成 2 个值，第一个是元素索引，第二个是元素的值：\n			</p>\n<pre class=\"language-\"><span class=\"token comment\">// 错误示例</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> x <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">for</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> x <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1 2 3</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 正确示例</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> x <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> x <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 使用 _ 丢弃索引</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> </pre>\n<h4 id=\"14slice-和-array-其实是一维数据\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#14slice-和-array-其实是一维数据\" name=\"14slice-和-array-其实是一维数据\"><i class=\"fa fa-link\"></i></a>14.slice 和 array 其实是一维数据\n			</h4>\n<p>\n				看起来 Go 支持多维的 array 和 slice，可以创建数组的数组、切片的切片，但其实并不是。\n			</p>\n<p>\n				对依赖动态计算多维数组值的应用来说，就性能和复杂度而言，用 Go 实现的效果并不理想。\n			</p>\n<p>\n				可以使用原始的一维数组、“独立“ 的切片、“共享底层数组”的切片来创建动态的多维数组。\n			</p>\n<p>\n				1.使用原始的一维数组：要做好索引检查、溢出检测、以及当数组满时再添加值时要重新做内存分配。\n			</p>\n<p>\n				2.使用“独立”的切片分两步：\n			</p>\n<ul>\n<li>\n<p>\n						创建外部 slice\n					</p>\n<ul>\n<li>\n<p>\n								对每个内部 slice 进行内存分配\n							</p>\n<p>\n								注意内部的 slice 相互独立，使得任一内部 slice 增缩都不会影响到其他的 slice\n							</p>\n</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-\"><span class=\"token comment\">// 使用各自独立的 6 个 slice 来创建 [2][3] 的动态多维数组</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> x <span class=\"token operator\">:=</span> <span class=\"token number\">2</span> y <span class=\"token operator\">:=</span> <span class=\"token number\">4</span> table <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> table <span class=\"token punctuation\">{</span> table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				1.使用“共享底层数组”的切片\n			</p>\n<ul>\n<li>\n					创建一个存放原始数据的容器 slice\n				</li>\n<li>\n					创建其他的 slice\n				</li>\n<li>\n					切割原始 slice 来初始化其他的 slice\n				</li>\n</ul>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> h<span class=\"token punctuation\">,</span> w <span class=\"token operator\">:=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> raw <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> h<span class=\"token operator\">*</span>w<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> raw <span class=\"token punctuation\">{</span> raw<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 初始化原始 slice</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>raw<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>raw<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [0 1 2 3 4 5 6 7] 0xc420012120 </span> table <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> table <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 等间距切割原始 slice，创建动态多维数组 table</span> <span class=\"token comment\">// 0: raw[0*4: 0*4 + 4]</span> <span class=\"token comment\">// 1: raw[1*4: 1*4 + 4]</span> table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> raw<span class=\"token punctuation\">[</span>i<span class=\"token operator\">*</span>w <span class=\"token punctuation\">:</span> i<span class=\"token operator\">*</span>w <span class=\"token operator\">+</span> w<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>table<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [[0 1 2 3] [4 5 6 7]] 0xc420012120</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				更多关于多维数组的参考\n			</p>\n<p>\n<a href=\"https://stackoverflow.com/questions/39561140/how-is-two-dimensional-arrays-memory-representation\" target=\"_blank\">go-how-is-two-dimensional-arrays-memory-representation</a>\n</p>\n<p>\n<a href=\"https://stackoverflow.com/questions/39804861/what-is-a-concise-way-to-create-a-2d-slice-in-go\" target=\"_blank\">what-is-a-concise-way-to-create-a-2d-slice-in-go</a>\n</p>\n<h4 id=\"15访问-map-中不存在的-key\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#15访问-map-中不存在的-key\" name=\"15访问-map-中不存在的-key\"><i class=\"fa fa-link\"></i></a>15.访问 map 中不存在的 key\n			</h4>\n<p>\n				和其他编程语言类似，如果访问了 map 中不存在的 key 则希望能返回 nil，比如在 PHP 中：\n			</p>\n<pre class=\"language-\">&gt; php -r \'$v = [\"x\"=&gt;1, \"y\"=&gt;2]; @var_dump($v[\"z\"]);\'\n    NULL</pre>\n<p>\n				Go 则会返回元素对应数据类型的零值，比如 nil、\'\' 、false 和 0，取值操作总有值返回，故不能通过取出来的值来判断 key 是不是在 map 中。\n			</p>\n<p>\n				检查 key 是否存在可以用 map 直接访问，检查返回的第二个参数即可：\n			</p>\n<pre class=\"language-\"><span class=\"token comment\">// 错误的 key 检测方式</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> x <span class=\"token operator\">:=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"three\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">if</span> v <span class=\"token operator\">:=</span> x<span class=\"token punctuation\">[</span><span class=\"token string\">\"two\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> v <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key two is no entry\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 键 two 存不存在都会返回的空字符串</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 正确示例</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> x <span class=\"token operator\">:=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"three\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">if</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> x<span class=\"token punctuation\">[</span><span class=\"token string\">\"two\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key two is no entry\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> </pre>\n<h4 id=\"16string-类型的值是常量，不可更改\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#16string-类型的值是常量，不可更改\" name=\"16string-类型的值是常量，不可更改\"><i class=\"fa fa-link\"></i></a>16.string 类型的值是常量，不可更改\n			</h4>\n<p>\n				尝试使用索引遍历字符串，来更新字符串中的个别字符，是不允许的。\n			</p>\n<p>\n				string 类型的值是只读的二进制 byte slice，如果真要修改字符串中的字符，将 string 转为 []byte 修改后，再转为 string 即可：\n			</p>\n<pre class=\"language-\"><span class=\"token comment\">// 修改字符串的错误示例</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> x <span class=\"token operator\">:=</span> <span class=\"token string\">\"text\"</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"T\"</span> <span class=\"token comment\">// error: cannot assign to x[0]</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 修改示例</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> x <span class=\"token operator\">:=</span> <span class=\"token string\">\"text\"</span> xBytes <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> xBytes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\'T\'</span> <span class=\"token comment\">// 注意此时的 T 是 rune 类型</span> x <span class=\"token operator\">=</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>xBytes<span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Text</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				注意： 上边的示例并不是更新字符串的正确姿势，因为一个 UTF8 编码的字符可能会占多个字节，比如汉字就需要3~4个字节来存储，此时更新其中的一个字节是错误的。\n			</p>\n<p>\n				更新字串的正确姿势：将 string 转为 rune slice（此时 1 个 rune 可能占多个 byte），直接更新 rune 中的字符\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> x <span class=\"token operator\">:=</span> <span class=\"token string\">\"text\"</span> xRunes <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">rune</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> xRunes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\'我\'</span> x <span class=\"token operator\">=</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>xRunes<span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 我ext</span> <span class=\"token punctuation\">}</span> </pre>\n<h4 id=\"17string-与-byte-slice-之间的转换\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#17string-与-byte-slice-之间的转换\" name=\"17string-与-byte-slice-之间的转换\"><i class=\"fa fa-link\"></i></a>17.string 与 byte slice 之间的转换\n			</h4>\n<p>\n				当进行 string 和 byte slice 相互转换时，参与转换的是拷贝的原始值。这种转换的过程，与其他编程语的强制类型转换操作不同，也和新 slice 与旧 slice 共享底层数组不同。\n			</p>\n<p>\n				Go 在 string 与 byte slice 相互转换上优化了两点，避免了额外的内存分配：\n			</p>\n<ul>\n<li>\n					在 map[string] 中查找 key 时，使用了对应的 []byte，避免做 m[string(key)] 的内存分配\n				</li>\n<li>\n					使用 for range 迭代 string 转换为 []byte 的迭代：for i,v := range []byte(str) {...}\n				</li>\n</ul>\n<h4 id=\"18string-与索引操作符\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#18string-与索引操作符\" name=\"18string-与索引操作符\"><i class=\"fa fa-link\"></i></a>18.string 与索引操作符\n			</h4>\n<p>\n				对字符串用索引访问返回的不是字符，而是一个 byte 值。\n			</p>\n<p>\n				这种处理方式和其他语言一样，比如 PHP 中：\n			</p>\n<pre class=\"language-\">&gt; php -r \'$name=\"中文\"; var_dump($name);\'    # \"中文\" 占用 6 个字节\nstring(6) \"中文\"\n\n&gt; php -r \'$name=\"中文\"; var_dump($name[0]);\' # 把第一个字节当做 Unicode 字符读取，显示 U+FFFD\nstring(1) \"�\"    \n\n&gt; php -r \'$name=\"中文\"; var_dump($name[0].$name[1].$name[2]);\'\nstring(3) \"中\"</pre>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> x <span class=\"token operator\">:=</span> <span class=\"token string\">\"ascii\"</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 97</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%T\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// uint8</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				如果需要使用for range迭代访问字符串中的字符（unicode code point / rune），标准库中有\"unicode/utf8\"包来做UTF8的相关解码编码。另外utf8string也有像func (s *String) At(i int) rune等很方便的库函数。\n			</p>\n<h4 id=\"19字符串并不都是-utf8-文本\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#19字符串并不都是-utf8-文本\" name=\"19字符串并不都是-utf8-文本\"><i class=\"fa fa-link\"></i></a>19.字符串并不都是 UTF8 文本\n			</h4>\n<p>\n				string 的值不必是 UTF8 文本，可以包含任意的值。只有字符串是文字字面值时才是 UTF8 文本，字串可以通过转义来包含其他数据。\n			</p>\n<p>\n				判断字符串是否是 UTF8 文本，可使用 \"unicode/utf8\" 包中的 ValidString() 函数：\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> str1 <span class=\"token operator\">:=</span> <span class=\"token string\">\"ABC\"</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>utf8<span class=\"token punctuation\">.</span><span class=\"token function\">ValidString</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span> str2 <span class=\"token operator\">:=</span> <span class=\"token string\">\"A\\xfeC\"</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>utf8<span class=\"token punctuation\">.</span><span class=\"token function\">ValidString</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span> str3 <span class=\"token operator\">:=</span> <span class=\"token string\">\"A\\\\xfeC\"</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>utf8<span class=\"token punctuation\">.</span><span class=\"token function\">ValidString</span><span class=\"token punctuation\">(</span>str3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true    // 把转义字符转义成字面值</span> <span class=\"token punctuation\">}</span> </pre>\n<h4 id=\"20字符串的长度\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#20字符串的长度\" name=\"20字符串的长度\"><i class=\"fa fa-link\"></i></a>20.字符串的长度\n			</h4>\n<p>\n				在 Python 中：\n			</p>\n<pre class=\"language-\">data = u\'♥\'  \n    print(len(data)) # 1</pre>\n<p>\n				然而在 Go 中：\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> char <span class=\"token operator\">:=</span> <span class=\"token string\">\"♥\"</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				Go 的内建函数 len() 返回的是字符串的 byte 数量，而不是像 Python 中那样是计算 Unicode 字符数。\n			</p>\n<p>\n				如果要得到字符串的字符数，可使用 \"unicode/utf8\" 包中的 RuneCountInString(str string) (n int)\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> char <span class=\"token operator\">:=</span> <span class=\"token string\">\"♥\"</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>utf8<span class=\"token punctuation\">.</span><span class=\"token function\">RuneCountInString</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				注意： RuneCountInString 并不总是返回我们看到的字符数，因为有的字符会占用 2 个 rune：\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> char <span class=\"token operator\">:=</span> <span class=\"token string\">\"é\"</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>utf8<span class=\"token punctuation\">.</span><span class=\"token function\">RuneCountInString</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cafe\\u0301\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// café    // 法文的 cafe，实际上是两个 rune 的组合</span> <span class=\"token punctuation\">}</span> </pre>\n<h4 id=\"21在多行-array、slice、map-语句中缺少--号\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#21在多行-array、slice、map-语句中缺少--号\" name=\"21在多行-array、slice、map-语句中缺少--号\"><i class=\"fa fa-link\"></i></a>21.在多行 array、slice、map 语句中缺少 , 号\n			</h4>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> x <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token comment\">// syntax error: unexpected newline, expecting comma or }</span> <span class=\"token punctuation\">}</span> y <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span> z <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// ...</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				声明语句中 } 折叠到单行后，尾部的 , 不是必需的。\n			</p>\n<h4 id=\"22logfatal-和-logpanic-不只是-log\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#22logfatal-和-logpanic-不只是-log\" name=\"22logfatal-和-logpanic-不只是-log\"><i class=\"fa fa-link\"></i></a>22.log.Fatal 和 log.Panic 不只是 log\n			</h4>\n<p>\n				log 标准库提供了不同的日志记录等级，与其他语言的日志库不同，Go 的 log 包在调用Fatal*()、Panic*()时能做更多日志外的事，如中断程序的执行等：\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fatal level log: log entry\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出信息后，程序终止执行</span> log<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Nomal level log: log entry\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> </pre>\n<h4 id=\"23对内建数据结构的操作并不是同步的\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#23对内建数据结构的操作并不是同步的\" name=\"23对内建数据结构的操作并不是同步的\"><i class=\"fa fa-link\"></i></a>23.对内建数据结构的操作并不是同步的\n			</h4>\n<p>\n				尽管 Go 本身有大量的特性来支持并发，但并不保证并发的数据安全，用户需自己保证变量等数据以原子操作更新。\n			</p>\n<p>\n				goroutine 和 channel 是进行原子操作的好方法，或使用 \"sync\" 包中的锁。\n			</p>\n<h4 id=\"24range-迭代-string-得到的值\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#24range-迭代-string-得到的值\" name=\"24range-迭代-string-得到的值\"><i class=\"fa fa-link\"></i></a>24.range 迭代 string 得到的值\n			</h4>\n<p>\n				range 得到的索引是字符值（Unicode point / rune）第一个字节的位置，与其他编程语言不同，这个索引并不直接是字符在字符串中的位置。\n			</p>\n<p>\n				注意一个字符可能占多个 rune，比如法文单词 café 中的 é。操作特殊字符可使用norm 包。\n			</p>\n<p>\n				for range 迭代会尝试将 string 翻译为 UTF8 文本，对任何无效的码点都直接使用 0XFFFD rune（�）UNicode 替代字符来表示。如果 string 中有任何非 UTF8 的数据，应将 string 保存为 byte slice 再进行操作。\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> data <span class=\"token operator\">:=</span> <span class=\"token string\">\"A\\xfe\\x02\\xff\\x04\"</span> <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> data <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%#x \"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0x41 0xfffd 0x2 0xfffd 0x4    // 错误</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%#x \"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0x41 0xfe 0x2 0xff 0x4    // 正确</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> </pre>\n<h4 id=\"25range-迭代-map\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#25range-迭代-map\" name=\"25range-迭代-map\"><i class=\"fa fa-link\"></i></a>25.range 迭代 map\n			</h4>\n<p>\n				如果你希望以特定的顺序（如按 key 排序）来迭代 map，要注意每次迭代都可能产生不一样的结果。\n			</p>\n<p>\n				Go 的运行时是有意打乱迭代顺序的，所以你得到的迭代结果可能不一致。但也并不总会打乱，得到连续相同的 5 个迭代结果也是可能的，如：\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> m <span class=\"token operator\">:=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"three\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"four\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> m <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				如果你去 Go Playground 重复运行上边的代码，输出是不会变的，只有你更新代码它才会重新编译。重新编译后迭代顺序是被打乱的：\n			</p>\n<p>\n<img alt=\"\" src=\"../static/xiangmu/9.png\"/>\n</p>\n<h4 id=\"26switch-中的-fallthrough-语句\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#26switch-中的-fallthrough-语句\" name=\"26switch-中的-fallthrough-语句\"><i class=\"fa fa-link\"></i></a>26.switch 中的 fallthrough 语句\n			</h4>\n<p>\n				switch 语句中的 case 代码块会默认带上 break，但可以使用 fallthrough 来强制执行下一个 case 代码块。\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> isSpace <span class=\"token operator\">:=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>char <span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">switch</span> char <span class=\"token punctuation\">{</span> <span class=\"token keyword\">case</span> <span class=\"token string\">\' \'</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">// 空格符会直接 break，返回 false // 和其他语言不一样</span> <span class=\"token comment\">// fallthrough    // 返回 true</span> <span class=\"token keyword\">case</span> <span class=\"token string\">\'\\t\'</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">isSpace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\'\\t\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">isSpace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\' \'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				不过你可以在 case 代码块末尾使用 fallthrough，强制执行下一个 case 代码块。\n			</p>\n<p>\n				也可以改写 case 为多条件判断：\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> isSpace <span class=\"token operator\">:=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>char <span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">switch</span> char <span class=\"token punctuation\">{</span> <span class=\"token keyword\">case</span> <span class=\"token string\">\' \'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'\\t\'</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">isSpace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\'\\t\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">isSpace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\' \'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span> <span class=\"token punctuation\">}</span> </pre>\n<h4 id=\"27自增和自减运算\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#27自增和自减运算\" name=\"27自增和自减运算\"><i class=\"fa fa-link\"></i></a>27.自增和自减运算\n			</h4>\n<p>\n				很多编程语言都自带前置后置的 ++、-- 运算。但 Go 特立独行，去掉了前置操作，同时 ++、— 只作为运算符而非表达式。\n			</p>\n<pre class=\"language-\"><span class=\"token comment\">// 错误示例</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> data <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span> <span class=\"token operator\">++</span>i <span class=\"token comment\">// syntax error: unexpected ++, expecting }</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// syntax error: unexpected ++, expecting :</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 正确示例</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> data <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span> i<span class=\"token operator\">++</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span> <span class=\"token punctuation\">}</span> </pre>\n<h4 id=\"28按位取反\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#28按位取反\" name=\"28按位取反\"><i class=\"fa fa-link\"></i></a>28.按位取反\n			</h4>\n<p>\n				很多编程语言使用 ~ 作为一元按位取反（NOT）操作符，Go 重用 ^ XOR 操作符来按位取反：\n			</p>\n<pre class=\"language-\"><span class=\"token comment\">// 错误的取反操作</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>~<span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// bitwise complement operator is ^</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 正确示例</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">var</span> d <span class=\"token builtin\">uint8</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%08b\\n\"</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 00000010</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%08b\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">^</span>d<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 11111101</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				同时 ^ 也是按位异或（XOR）操作符。\n			</p>\n<p>\n				一个操作符能重用两次，是因为一元的 NOT 操作 NOT 0x02，与二元的 XOR 操作 0x22 XOR 0xff 是一致的。\n			</p>\n<p>\n				Go 也有特殊的操作符 AND NOT &amp;^ 操作符，不同位才取1。\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">var</span> a <span class=\"token builtin\">uint8</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x82</span> <span class=\"token keyword\">var</span> b <span class=\"token builtin\">uint8</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x02</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%08b [A]\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%08b [B]\\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%08b (NOT B)\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">^</span>b<span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%08b ^ %08b = %08b [B XOR 0xff]\\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">^</span><span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%08b ^ %08b = %08b [A XOR B]\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> a<span class=\"token operator\">^</span>b<span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%08b &amp; %08b = %08b [A AND B]\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> a<span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%08b &amp;^%08b = %08b [A \'AND NOT\' B]\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> a<span class=\"token operator\">&amp;^</span>b<span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%08b&amp;(^%08b)= %08b [A AND (NOT B)]\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> a<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">^</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> </pre>\n<pre class=\"language-\">10000010 [A]\n    00000010 [B]\n    11111101 (NOT B)\n    00000010 ^ 11111111 = 11111101 [B XOR 0xff]\n    10000010 ^ 00000010 = 10000000 [A XOR B]\n    10000010 &amp; 00000010 = 00000010 [A AND B]\n    10000010 &amp;^00000010 = 10000000 [A \'AND NOT\' B]\n    10000010&amp;(^00000010)= 10000000 [A AND (NOT B)]</pre>\n<h4 id=\"29运算符的优先级\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#29运算符的优先级\" name=\"29运算符的优先级\"><i class=\"fa fa-link\"></i></a>29.运算符的优先级\n			</h4>\n<p>\n				除了位清除（bit clear）操作符，Go 也有很多和其他语言一样的位操作符，但优先级另当别论。\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0x2 &amp; 0x2 + 0x4 -&gt; %#x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x2</span><span class=\"token operator\">&amp;</span><span class=\"token number\">0x2</span><span class=\"token operator\">+</span><span class=\"token number\">0x4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// &amp; 优先 +</span> <span class=\"token comment\">//prints: 0x2 &amp; 0x2 + 0x4 -&gt; 0x6</span> <span class=\"token comment\">//Go:    (0x2 &amp; 0x2) + 0x4</span> <span class=\"token comment\">//C++:    0x2 &amp; (0x2 + 0x4) -&gt; 0x2</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0x2 + 0x2 &lt;&lt; 0x1 -&gt; %#x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x2</span><span class=\"token operator\">+</span><span class=\"token number\">0x2</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">0x1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// &lt;&lt; 优先 +</span> <span class=\"token comment\">//prints: 0x2 + 0x2 &lt;&lt; 0x1 -&gt; 0x6</span> <span class=\"token comment\">//Go:     0x2 + (0x2 &lt;&lt; 0x1)</span> <span class=\"token comment\">//C++:   (0x2 + 0x2) &lt;&lt; 0x1 -&gt; 0x8</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0xf | 0x2 ^ 0x2 -&gt; %#x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xf</span><span class=\"token operator\">|</span><span class=\"token number\">0x2</span><span class=\"token operator\">^</span><span class=\"token number\">0x2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// | 优先 ^</span> <span class=\"token comment\">//prints: 0xf | 0x2 ^ 0x2 -&gt; 0xd</span> <span class=\"token comment\">//Go:    (0xf | 0x2) ^ 0x2</span> <span class=\"token comment\">//C++:    0xf | (0x2 ^ 0x2) -&gt; 0xf</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				优先级列表：\n			</p>\n<pre class=\"language-\">Precedence    Operator\n        5             *  /  %  &lt;&lt;  &gt;&gt;  &amp;  &amp;^\n        4             +  -  |  ^\n        3             ==  !=  &lt;  &lt;=  &gt;  &gt;=\n        2             &amp;&amp;\n        1             ||</pre>\n<h4 id=\"30不导出的-struct-字段无法被-encode\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#30不导出的-struct-字段无法被-encode\" name=\"30不导出的-struct-字段无法被-encode\"><i class=\"fa fa-link\"></i></a>30.不导出的 struct 字段无法被 encode\n			</h4>\n<p>\n				以小写字母开头的字段成员是无法被外部直接访问的，所以 struct 在进行 json、xml、gob 等格式的 encode 操作时，这些私有字段会被忽略，导出时得到零值：\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> in <span class=\"token operator\">:=</span> MyData<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">}</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%#v\\n\"</span><span class=\"token punctuation\">,</span> in<span class=\"token punctuation\">)</span> <span class=\"token comment\">// main.MyData{One:1, two:\"two\"}</span> encoded<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Marshal</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>encoded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {\"One\":1}    // 私有字段 two 被忽略了</span> <span class=\"token keyword\">var</span> out MyData\n    json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span>encoded<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>out<span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%#v\\n\"</span><span class=\"token punctuation\">,</span> out<span class=\"token punctuation\">)</span> <span class=\"token comment\">// main.MyData{One:1, two:\"\"}</span> <span class=\"token punctuation\">}</span> </pre>\n<h4 id=\"31程序退出时还有-goroutine-在执行\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#31程序退出时还有-goroutine-在执行\" name=\"31程序退出时还有-goroutine-在执行\"><i class=\"fa fa-link\"></i></a>31.程序退出时还有 goroutine 在执行\n			</h4>\n<p>\n				程序默认不等所有 goroutine 都执行完才退出，这点需要特别注意：\n			</p>\n<pre class=\"language-\"><span class=\"token comment\">// 主程序会直接退出</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> workerCount <span class=\"token operator\">:=</span> <span class=\"token number\">2</span> <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> workerCount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">go</span> <span class=\"token function\">doIt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all done!\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">func</span> <span class=\"token function\">doIt</span><span class=\"token punctuation\">(</span>workerID <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[%v] is running\\n\"</span><span class=\"token punctuation\">,</span> workerID<span class=\"token punctuation\">)</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 模拟 goroutine 正在执行 </span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[%v] is done\\n\"</span><span class=\"token punctuation\">,</span> workerID<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				如下，main() 主程序不等两个 goroutine 执行完就直接退出了：\n			</p>\n<p>\n<img alt=\"\" src=\"../static/xiangmu/10.png\"/>\n</p>\n<p>\n				常用解决办法：使用 \"WaitGroup\" 变量，它会让主程序等待所有 goroutine 执行完毕再退出。\n			</p>\n<p>\n				如果你的 goroutine 要做消息的循环处理等耗时操作，可以向它们发送一条 kill 消息来关闭它们。或直接关闭一个它们都等待接收数据的 channel：\n			</p>\n<pre class=\"language-\"><span class=\"token comment\">// www.topgoer.com go语言中文文档</span> <span class=\"token comment\">// 等待所有 goroutine 执行完毕</span> <span class=\"token comment\">// 进入死锁</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">var</span> wg sync<span class=\"token punctuation\">.</span>WaitGroup\n    done <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> workerCount <span class=\"token operator\">:=</span> <span class=\"token number\">2</span> <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> workerCount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">go</span> <span class=\"token function\">doIt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> done<span class=\"token punctuation\">,</span> wg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all done!\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">func</span> <span class=\"token function\">doIt</span><span class=\"token punctuation\">(</span>workerID <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> done <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> wg sync<span class=\"token punctuation\">.</span>WaitGroup<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[%v] is running\\n\"</span><span class=\"token punctuation\">,</span> workerID<span class=\"token punctuation\">)</span> <span class=\"token keyword\">defer</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span>done\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[%v] is done\\n\"</span><span class=\"token punctuation\">,</span> workerID<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				执行结果：\n			</p>\n<p>\n<img alt=\"\" src=\"../static/xiangmu/11.png\"/>\n</p>\n<p>\n				看起来好像 goroutine 都执行完了，然而报错：\n			</p>\n<blockquote>\n<p>\n					fatal error: all goroutines are asleep - deadlock!\n				</p>\n</blockquote>\n<p>\n				为什么会发生死锁？goroutine 在退出前调用了 wg.Done() ，程序应该正常退出的。\n			</p>\n<p>\n				原因是 goroutine 得到的 \"WaitGroup\" 变量是 var wg WaitGroup 的一份拷贝值，即 doIt() 传参只传值。所以哪怕在每个 goroutine 中都调用了 wg.Done()， 主程序中的 wg 变量并不会受到影响。\n			</p>\n<pre class=\"language-\"><span class=\"token comment\">// www.topgoer.com go语言中文文档</span> <span class=\"token comment\">// 等待所有 goroutine 执行完毕</span> <span class=\"token comment\">// 使用传址方式为 WaitGroup 变量传参</span> <span class=\"token comment\">// 使用 channel 关闭 goroutine</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">var</span> wg sync<span class=\"token punctuation\">.</span>WaitGroup\n    done <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> ch <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> workerCount <span class=\"token operator\">:=</span> <span class=\"token number\">2</span> <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> workerCount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">go</span> <span class=\"token function\">doIt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> ch<span class=\"token punctuation\">,</span> done<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>wg<span class=\"token punctuation\">)</span> <span class=\"token comment\">// wg 传指针，doIt() 内部会改变 wg 的值</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> workerCount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 向 ch 中发送数据，关闭 goroutine</span> ch <span class=\"token operator\">&lt;-</span> i <span class=\"token punctuation\">}</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all done!\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">func</span> <span class=\"token function\">doIt</span><span class=\"token punctuation\">(</span>workerID <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> ch <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> done <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> wg <span class=\"token operator\">*</span>sync<span class=\"token punctuation\">.</span>WaitGroup<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[%v] is running\\n\"</span><span class=\"token punctuation\">,</span> workerID<span class=\"token punctuation\">)</span> <span class=\"token keyword\">defer</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">case</span> m <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>ch<span class=\"token punctuation\">:</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[%v] m =&gt; %v\\n\"</span><span class=\"token punctuation\">,</span> workerID<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span> <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>done<span class=\"token punctuation\">:</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[%v] is done\\n\"</span><span class=\"token punctuation\">,</span> workerID<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				运行效果：\n			</p>\n<p>\n<img alt=\"\" src=\"../static/xiangmu/12.png\"/>\n</p>\n<h4 id=\"32向无缓冲的-channel-发送数据，只要-receiver-准备好了就会立刻返回\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#32向无缓冲的-channel-发送数据，只要-receiver-准备好了就会立刻返回\" name=\"32向无缓冲的-channel-发送数据，只要-receiver-准备好了就会立刻返回\"><i class=\"fa fa-link\"></i></a>32.向无缓冲的 channel 发送数据，只要 receiver 准备好了就会立刻返回\n			</h4>\n<p>\n				只有在数据被 receiver 处理时，sender 才会阻塞。因运行环境而异，在 sender 发送完数据后，receiver 的 goroutine 可能没有足够的时间处理下一个数据。如：\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> ch <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">for</span> m <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> ch <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Processed:\"</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 模拟需要长时间运行的操作</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> ch <span class=\"token operator\">&lt;-</span> <span class=\"token string\">\"cmd.1\"</span> ch <span class=\"token operator\">&lt;-</span> <span class=\"token string\">\"cmd.2\"</span> <span class=\"token comment\">// 不会被接收处理</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				运行效果：\n			</p>\n<p>\n<img alt=\"\" src=\"../static/xiangmu/13.png\"/>\n</p>\n<h4 id=\"33向已关闭的-channel-发送数据会造成-panic\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#33向已关闭的-channel-发送数据会造成-panic\" name=\"33向已关闭的-channel-发送数据会造成-panic\"><i class=\"fa fa-link\"></i></a>33.向已关闭的 channel 发送数据会造成 panic\n			</h4>\n<p>\n				从已关闭的 channel 接收数据是安全的：\n			</p>\n<p>\n				接收状态值 ok 是 false 时表明 channel 中已没有数据可以接收了。类似的，从有缓冲的 channel 中接收数据，缓存的数据获取完再没有数据可取时，状态值也是 false\n			</p>\n<p>\n				向已关闭的 channel 中发送数据会造成 panic：\n			</p>\n<p>\n<img alt=\"\" src=\"../static/xiangmu/14.png\"/>\n</p>\n<p>\n				针对上边有 bug 的这个例子，可使用一个废弃 channel done 来告诉剩余的 goroutine 无需再向 ch 发送数据。此时 &lt;- done 的结果是 {}：\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> ch <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> done <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>idx <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">case</span> ch <span class=\"token operator\">&lt;-</span> <span class=\"token punctuation\">(</span>idx <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Send result\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>done<span class=\"token punctuation\">:</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Exiting\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Result: \"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;-</span>ch<span class=\"token punctuation\">)</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				运行效果：\n			</p>\n<p>\n<img alt=\"\" src=\"../static/xiangmu/15.png\"/>\n</p>\n<h4 id=\"34使用了值为-nil-的-channel\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#34使用了值为-nil-的-channel\" name=\"34使用了值为-nil-的-channel\"><i class=\"fa fa-link\"></i></a>34.使用了值为 nil 的 channel\n			</h4>\n<p>\n				在一个值为 nil 的 channel 上发送和接收数据将永久阻塞：\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">var</span> ch <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span> <span class=\"token comment\">// 未初始化，值为 nil</span> <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>i <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> ch <span class=\"token operator\">&lt;-</span> i <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Result: \"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;-</span>ch<span class=\"token punctuation\">)</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				runtime 死锁错误：\n			</p>\n<blockquote>\n<p>\n					fatal error: all goroutines are asleep - deadlock!\ngoroutine 1 [chan receive (nil chan)]\n				</p>\n</blockquote>\n<p>\n				利用这个死锁的特性，可以用在 select 中动态的打开和关闭 case 语句块：\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> inCh <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> outCh <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">var</span> in <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> inCh <span class=\"token keyword\">var</span> out <span class=\"token keyword\">chan</span><span class=\"token operator\">&lt;-</span> <span class=\"token builtin\">int</span> <span class=\"token keyword\">var</span> val <span class=\"token builtin\">int</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">case</span> out <span class=\"token operator\">&lt;-</span> val<span class=\"token punctuation\">:</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--------\"</span><span class=\"token punctuation\">)</span> out <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span> in <span class=\"token operator\">=</span> inCh <span class=\"token keyword\">case</span> val <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;-</span>in<span class=\"token punctuation\">:</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"++++++++++\"</span><span class=\"token punctuation\">)</span> out <span class=\"token operator\">=</span> outCh\n                in <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">for</span> r <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> outCh <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Result: \"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> inCh <span class=\"token operator\">&lt;-</span> <span class=\"token number\">1</span> inCh <span class=\"token operator\">&lt;-</span> <span class=\"token number\">2</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				运行效果：\n			</p>\n<p>\n<img alt=\"\" src=\"../static/xiangmu/16.png\"/>\n</p>\n<h4 id=\"35若函数-receiver-传参是传值方式，则无法修改参数的原有值\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#35若函数-receiver-传参是传值方式，则无法修改参数的原有值\" name=\"35若函数-receiver-传参是传值方式，则无法修改参数的原有值\"><i class=\"fa fa-link\"></i></a>35.若函数 receiver 传参是传值方式，则无法修改参数的原有值\n			</h4>\n<p>\n				方法 receiver 的参数与一般函数的参数类似：如果声明为值，那方法体得到的是一份参数的值拷贝，此时对参数的任何修改都不会对原有值产生影响。\n			</p>\n<p>\n				除非 receiver 参数是 map 或 slice 类型的变量，并且是以指针方式更新 map 中的字段、slice 中的元素的，才会更新原有值:\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">type</span> data <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span> num <span class=\"token builtin\">int</span> key <span class=\"token operator\">*</span><span class=\"token builtin\">string</span> items <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">bool</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>this <span class=\"token operator\">*</span>data<span class=\"token punctuation\">)</span> <span class=\"token function\">pointerFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> this<span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> <span class=\"token number\">7</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>this data<span class=\"token punctuation\">)</span> <span class=\"token function\">valueFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> this<span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> <span class=\"token number\">8</span> <span class=\"token operator\">*</span>this<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> <span class=\"token string\">\"valueFunc.key\"</span> this<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">[</span><span class=\"token string\">\"valueFunc\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> key <span class=\"token operator\">:=</span> <span class=\"token string\">\"key1\"</span> d <span class=\"token operator\">:=</span> data<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>key<span class=\"token punctuation\">,</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num=%v  key=%v  items=%v\\n\"</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>d<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">pointerFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 修改 num 的值为 7</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num=%v  key=%v  items=%v\\n\"</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>d<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">valueFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 修改 key 和 items 的值</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num=%v  key=%v  items=%v\\n\"</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>d<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				运行结果：\n			</p>\n<p>\n<img alt=\"\" src=\"../static/xiangmu/17.png\"/>\n</p>\n<h3 id=\"中级篇：36-51\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#中级篇：36-51\" name=\"中级篇：36-51\"><i class=\"fa fa-link\"></i></a>1.1.2. 中级篇：36-51\n			</h3>\n<h4 id=\"36关闭-http-的响应体\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#36关闭-http-的响应体\" name=\"36关闭-http-的响应体\"><i class=\"fa fa-link\"></i></a>36.关闭 HTTP 的响应体\n			</h4>\n<p>\n				使用 HTTP 标准库发起请求、获取响应时，即使你不从响应中读取任何数据或响应为空，都需要手动关闭响应体。新手很容易忘记手动关闭，或者写在了错误的位置：\n			</p>\n<pre class=\"language-\"><span class=\"token comment\">// 请求失败造成 panic</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> resp<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://api.ipify.org?format=json\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">defer</span> resp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// resp 可能为 nil，不能读取 Body</span> <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">}</span> body<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> ioutil<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAll</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span> <span class=\"token function\">checkError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">func</span> <span class=\"token function\">checkError</span><span class=\"token punctuation\">(</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">{</span> log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatalln</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				上边的代码能正确发起请求，但是一旦请求失败，变量 resp 值为 nil，造成 panic：\n			</p>\n<blockquote>\n<p>\n					panic: runtime error: invalid memory address or nil pointer dereference\n				</p>\n</blockquote>\n<p>\n				应该先检查 HTTP 响应错误为 nil，再调用 resp.Body.Close() 来关闭响应体：\n			</p>\n<pre class=\"language-\"><span class=\"token comment\">// 大多数情况正确的示例</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> resp<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://api.ipify.org?format=json\"</span><span class=\"token punctuation\">)</span> <span class=\"token function\">checkError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">defer</span> resp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 绝大多数情况下的正确关闭方式</span> body<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> ioutil<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAll</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span> <span class=\"token function\">checkError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				输出：\n			</p>\n<pre class=\"language-\">Get https://api.ipify.org?format=...: x509: certificate signed by unknown authority</pre>\n<p>\n				绝大多数请求失败的情况下，resp 的值为 nil 且 err 为 non-nil。但如果你得到的是重定向错误，那它俩的值都是 non-nil，最后依旧可能发生内存泄露。2 个解决办法：\n			</p>\n<ul>\n<li>\n					可以直接在处理 HTTP 响应错误的代码块中，直接关闭非 nil 的响应体。\n				</li>\n<li>\n					手动调用 defer 来关闭响应体：\n				</li>\n</ul>\n<pre class=\"language-\"><span class=\"token comment\">// 正确示例</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> resp<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://www.baidu.com\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 关闭 resp.Body 的正确姿势</span> <span class=\"token keyword\">if</span> resp <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">defer</span> resp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token function\">checkError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">defer</span> resp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> body<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> ioutil<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAll</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span> <span class=\"token function\">checkError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				resp.Body.Close() 早先版本的实现是读取响应体的数据之后丢弃，保证了 keep-alive 的 HTTP 连接能重用处理不止一个请求。但 Go 的最新版本将读取并丢弃数据的任务交给了用户，如果你不处理，HTTP 连接可能会直接关闭而非重用，参考在 Go 1.5 版本文档。\n			</p>\n<p>\n				如果程序大量重用 HTTP 长连接，你可能要在处理响应的逻辑代码中加入：\n			</p>\n<pre class=\"language-\">_, err = io.Copy(ioutil.Discard, resp.Body) // 手动丢弃读取完毕的数据</pre>\n<p>\n				如果你需要完整读取响应，上边的代码是需要写的。比如在解码 API 的 JSON 响应数据：\n			</p>\n<pre class=\"language-\">json.NewDecoder(resp.Body).Decode(&amp;data)</pre>\n<h4 id=\"37关闭-http-连接\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#37关闭-http-连接\" name=\"37关闭-http-连接\"><i class=\"fa fa-link\"></i></a>37.关闭 HTTP 连接\n			</h4>\n<p>\n				一些支持 HTTP1.1 或 HTTP1.0 配置了 connection: keep-alive 选项的服务器会保持一段时间的长连接。但标准库 \"net/http\" 的连接默认只在服务器主动要求关闭时才断开，所以你的程序可能会消耗完 socket 描述符。解决办法有 2 个，请求结束后：\n			</p>\n<ul>\n<li>\n					直接设置请求变量的 Close 字段值为 true，每次请求结束后就会主动关闭连接。\n				</li>\n<li>\n					设置 Header 请求头部选项 Connection: close，然后服务器返回的响应头部也会有这个选项，此时 HTTP 标准库会主动断开连接。\n				</li>\n</ul>\n<pre class=\"language-\"><span class=\"token comment\">// 主动关闭连接</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> req<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">NewRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"http://golang.org\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span> <span class=\"token function\">checkError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> req<span class=\"token punctuation\">.</span>Close <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">//req.Header.Add(\"Connection\", \"close\")    // 等效的关闭方式</span> resp<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span>DefaultClient<span class=\"token punctuation\">.</span><span class=\"token function\">Do</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> resp <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">defer</span> resp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token function\">checkError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> body<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> ioutil<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAll</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span> <span class=\"token function\">checkError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				你可以创建一个自定义配置的 HTTP transport 客户端，用来取消 HTTP 全局的复用连接：\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> tr <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span>Transport<span class=\"token punctuation\">{</span>DisableKeepAlives<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span> client <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span>Client<span class=\"token punctuation\">{</span>Transport<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>tr<span class=\"token punctuation\">}</span> resp<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://golang.google.cn/\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> resp <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">defer</span> resp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token function\">checkError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>StatusCode<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 200</span> body<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> ioutil<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAll</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span> <span class=\"token function\">checkError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				根据需求选择使用场景：\n			</p>\n<ul>\n<li>\n					若你的程序要向同一服务器发大量请求，使用默认的保持长连接。\n				</li>\n<li>\n					若你的程序要连接大量的服务器，且每台服务器只请求一两次，那收到请求后直接关闭连接。或增加最大文件打开数 fs.file-max 的值。\n				</li>\n</ul>\n<h4 id=\"38将-json-中的数字解码为-interface-类型\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#38将-json-中的数字解码为-interface-类型\" name=\"38将-json-中的数字解码为-interface-类型\"><i class=\"fa fa-link\"></i></a>38.将 JSON 中的数字解码为 interface 类型\n			</h4>\n<p>\n				在 encode/decode JSON 数据时，Go 默认会将数值当做 float64 处理，比如下边的代码会造成 panic：\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">`{\"status\": 200}`</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">var</span> result <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span> log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatalln</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%T\\n\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">[</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// float64</span> <span class=\"token keyword\">var</span> status <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 类型断言错误</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Status value: \"</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> </pre>\n<blockquote>\n<p>\n					panic: interface conversion: interface {} is float64, not int\n				</p>\n</blockquote>\n<p>\n				如果你尝试 decode 的 JSON 字段是整型，你可以：\n			</p>\n<ul>\n<li>\n					将 int 值转为 float 统一使用\n				</li>\n<li>\n					将 decode 后需要的 float 值转为 int 使用\n				</li>\n</ul>\n<pre class=\"language-\"><span class=\"token comment\">// 将 decode 的值转为 int 使用</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">`{\"status\": 200}`</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">var</span> result <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span> log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatalln</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">var</span> status <span class=\"token operator\">=</span> <span class=\"token function\">uint64</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">[</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">float64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Status value: \"</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> </pre>\n<ul>\n<li>\n					使用 Decoder 类型来 decode JSON 数据，明确表示字段的值类型\n				</li>\n</ul>\n<pre class=\"language-\"><span class=\"token comment\">// 指定字段类型</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">`{\"status\": 200}`</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">var</span> result <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">var</span> decoder <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">NewDecoder</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">.</span><span class=\"token function\">NewReader</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> decoder<span class=\"token punctuation\">.</span><span class=\"token function\">UseNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> decoder<span class=\"token punctuation\">.</span><span class=\"token function\">Decode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span> log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatalln</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">var</span> status<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">.</span>Number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Int64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Status value: \"</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 你可以使用 string 来存储数值数据，在 decode 时再决定按 int 还是 float 使用</span> <span class=\"token comment\">// 将数据转为 decode 为 string</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">var</span> result <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">var</span> decoder <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">NewDecoder</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">.</span><span class=\"token function\">NewReader</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> decoder<span class=\"token punctuation\">.</span><span class=\"token function\">UseNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> decoder<span class=\"token punctuation\">.</span><span class=\"token function\">Decode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span> log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatalln</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">var</span> status <span class=\"token builtin\">uint64</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">[</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">.</span>Number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">checkError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Status value: \"</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				使用 struct 类型将你需要的数据映射为数值型\n			</p>\n<pre class=\"language-\"><span class=\"token comment\">// struct 中指定字段类型</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">`{\"status\": 200}`</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">var</span> result <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span> Status <span class=\"token builtin\">uint64</span> <span class=\"token string\">`json:\"status\"`</span> <span class=\"token punctuation\">}</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">NewDecoder</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">.</span><span class=\"token function\">NewReader</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Decode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>result<span class=\"token punctuation\">)</span> <span class=\"token function\">checkError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Result: %+v\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> </pre>\n<ul>\n<li>\n					可以使用 struct 将数值类型映射为 json.RawMessage 原生数据类型\n适用于如果 JSON 数据不着急 decode 或 JSON 某个字段的值类型不固定等情况：\n				</li>\n</ul>\n<pre class=\"language-\"><span class=\"token comment\">// 状态名称可能是 int 也可能是 string，指定为 json.RawMessage 类型</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> records <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">`{\"status\":200, \"tag\":\"one\"}`</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">`{\"status\":\"ok\", \"tag\":\"two\"}`</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">for</span> idx<span class=\"token punctuation\">,</span> record <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> records <span class=\"token punctuation\">{</span> <span class=\"token keyword\">var</span> result <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span> StatusCode <span class=\"token builtin\">uint64</span> StatusName <span class=\"token builtin\">string</span> Status     json<span class=\"token punctuation\">.</span>RawMessage <span class=\"token string\">`json:\"status\"`</span> Tag <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"tag\"`</span> <span class=\"token punctuation\">}</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">NewDecoder</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">.</span><span class=\"token function\">NewReader</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Decode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>result<span class=\"token punctuation\">)</span> <span class=\"token function\">checkError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">var</span> name <span class=\"token builtin\">string</span> err <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>Status<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span> result<span class=\"token punctuation\">.</span>StatusName <span class=\"token operator\">=</span> name <span class=\"token punctuation\">}</span> <span class=\"token keyword\">var</span> code <span class=\"token builtin\">uint64</span> err <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>Status<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>code<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span> result<span class=\"token punctuation\">.</span>StatusCode <span class=\"token operator\">=</span> code <span class=\"token punctuation\">}</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[%v] result =&gt; %+v\\n\"</span><span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> </pre>\n<h4 id=\"39struct、array、slice-和-map-的值比较\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#39struct、array、slice-和-map-的值比较\" name=\"39struct、array、slice-和-map-的值比较\"><i class=\"fa fa-link\"></i></a>39.struct、array、slice 和 map 的值比较\n			</h4>\n<p>\n				可以使用相等运算符 == 来比较结构体变量，前提是两个结构体的成员都是可比较的类型：\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">type</span> data <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span> num <span class=\"token builtin\">int</span> fp <span class=\"token builtin\">float32</span> <span class=\"token builtin\">complex</span> <span class=\"token builtin\">complex64</span> str <span class=\"token builtin\">string</span> char <span class=\"token builtin\">rune</span> yes <span class=\"token builtin\">bool</span> events <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">string</span> handler <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> ref <span class=\"token operator\">*</span><span class=\"token builtin\">byte</span> raw <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> v1 <span class=\"token operator\">:=</span> data<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> v2 <span class=\"token operator\">:=</span> data<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v1 == v2: \"</span><span class=\"token punctuation\">,</span> v1 <span class=\"token operator\">==</span> v2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				如果两个结构体中有任意成员是不可比较的，将会造成编译错误。注意数组成员只有在数组元素可比较时候才可比较。\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">type</span> data <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span> num <span class=\"token builtin\">int</span> checks <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token comment\">// 无法比较</span> doIt <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token comment\">// 无法比较</span> m <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span> <span class=\"token comment\">// 无法比较</span> bytes <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span> <span class=\"token comment\">// 无法比较</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> v1 <span class=\"token operator\">:=</span> data<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> v2 <span class=\"token operator\">:=</span> data<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v1 == v2: \"</span><span class=\"token punctuation\">,</span> v1 <span class=\"token operator\">==</span> v2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> </pre>\n<blockquote>\n<p>\n					invalid operation: v1 == v2 (struct containing [10]func() bool cannot be compared)\n				</p>\n</blockquote>\n<p>\n				Go 提供了一些库函数来比较那些无法使用 == 比较的变量，比如使用 \"reflect\" 包的 DeepEqual() ：\n			</p>\n<pre class=\"language-\"><span class=\"token comment\">// 比较相等运算符无法比较的元素</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> v1 <span class=\"token operator\">:=</span> data<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> v2 <span class=\"token operator\">:=</span> data<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v1 == v2: \"</span><span class=\"token punctuation\">,</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">DeepEqual</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span> m1 <span class=\"token operator\">:=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">}</span> m2 <span class=\"token operator\">:=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"two\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"one\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">}</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v1 == v2: \"</span><span class=\"token punctuation\">,</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">DeepEqual</span><span class=\"token punctuation\">(</span>m1<span class=\"token punctuation\">,</span> m2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span> s1 <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span> s2 <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 注意两个 slice 相等，值和顺序必须一致</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v1 == v2: \"</span><span class=\"token punctuation\">,</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">DeepEqual</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				这种比较方式可能比较慢，根据你的程序需求来使用。DeepEqual() 还有其他用法：\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">var</span> b1 <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span> b2 <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b1 == b2: \"</span><span class=\"token punctuation\">,</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">DeepEqual</span><span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">,</span> b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				注意：\n			</p>\n<ul>\n<li>\n					DeepEqual() 并不总适合于比较 slice\n				</li>\n</ul>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"one\"</span> <span class=\"token keyword\">var</span> in <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"one\"</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str == in: \"</span><span class=\"token punctuation\">,</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">DeepEqual</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span> v1 <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">}</span> v2 <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"two\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"one\"</span><span class=\"token punctuation\">}</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v1 == v2: \"</span><span class=\"token punctuation\">,</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">DeepEqual</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span> data <span class=\"token operator\">:=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span> <span class=\"token string\">\"code\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">}</span> encoded<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Marshal</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token keyword\">var</span> decoded <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span>encoded<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>decoded<span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data == decoded: \"</span><span class=\"token punctuation\">,</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">DeepEqual</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> decoded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				如果要大小写不敏感来比较 byte 或 string 中的英文文本，可以使用 \"bytes\" 或 \"strings\" 包的 ToUpper() 和 ToLower() 函数。比较其他语言的 byte 或 string，应使用 bytes.EqualFold() 和 strings.EqualFold()\n			</p>\n<p>\n				如果 byte slice 中含有验证用户身份的数据（密文哈希、token 等），不应再使用 reflect.DeepEqual()、bytes.Equal()、 bytes.Compare()。这三个函数容易对程序造成 timing attacks，此时应使用 \"crypto/subtle\" 包中的 subtle.ConstantTimeCompare() 等函数\n			</p>\n<ul>\n<li>\n					reflect.DeepEqual() 认为空 slice 与 nil slice 并不相等，但注意 byte.Equal() 会认为二者相等：\n				</li>\n</ul>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">var</span> b1 <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span> b2 <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// b1 与 b2 长度相等、有相同的字节序</span> <span class=\"token comment\">// nil 与 slice 在字节上是相同的</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b1 == b2: \"</span><span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">,</span> b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span> <span class=\"token punctuation\">}</span> </pre>\n<h4 id=\"40从-panic-中恢复\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#40从-panic-中恢复\" name=\"40从-panic-中恢复\"><i class=\"fa fa-link\"></i></a>40.从 panic 中恢复\n			</h4>\n<p>\n				在一个 defer 延迟执行的函数中调用 recover() ，它便能捕捉 / 中断 panic\n			</p>\n<pre class=\"language-\"><span class=\"token comment\">// 错误的 recover 调用示例</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">recover</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 什么都不会捕捉</span> <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"not good\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 发生 panic，主程序退出</span> <span class=\"token function\">recover</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 不会被执行</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ok\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 正确的 recover 调用示例</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">defer</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recovered: \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">recover</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"not good\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				从上边可以看出，recover() 仅在 defer 执行的函数中调用才会生效。\n			</p>\n<pre class=\"language-\"><span class=\"token comment\">// 错误的调用示例</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">defer</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">doRecover</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"not good\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">func</span> <span class=\"token function\">doRecover</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recobered: \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">recover</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> </pre>\n<blockquote>\n<p>\n					recobered:panic: not good\n				</p>\n</blockquote>\n<h4 id=\"41在-range-迭代-slice、array、map-时通过更新引用来更新元素\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#41在-range-迭代-slice、array、map-时通过更新引用来更新元素\" name=\"41在-range-迭代-slice、array、map-时通过更新引用来更新元素\"><i class=\"fa fa-link\"></i></a>41.在 range 迭代 slice、array、map 时通过更新引用来更新元素\n			</h4>\n<p>\n				在 range 迭代中，得到的值其实是元素的一份值拷贝，更新拷贝并不会更改原来的元素，即是拷贝的地址并不是原有元素的地址：\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> data <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> data <span class=\"token punctuation\">{</span> v <span class=\"token operator\">*=</span> <span class=\"token number\">10</span> <span class=\"token comment\">// data 中原有元素是不会被修改的</span> <span class=\"token punctuation\">}</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data: \"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span> <span class=\"token comment\">// data:  [1 2 3]</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				如果要修改原有元素的值，应该使用索引直接访问：\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> data <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> data <span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data: \"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span> <span class=\"token comment\">// data:  [10 20 30]</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				如果你的集合保存的是指向值的指针，需稍作修改。依旧需要使用索引访问元素，不过可以使用 range 出来的元素直接更新原有值：\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> data <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span> num <span class=\"token builtin\">int</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> data <span class=\"token punctuation\">{</span> v<span class=\"token punctuation\">.</span>num <span class=\"token operator\">*=</span> <span class=\"token number\">10</span> <span class=\"token comment\">// 直接使用指针更新</span> <span class=\"token punctuation\">}</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// &amp;{10} &amp;{20} &amp;{30}</span> <span class=\"token punctuation\">}</span> </pre>\n<h4 id=\"42slice-中隐藏的数据\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#42slice-中隐藏的数据\" name=\"42slice-中隐藏的数据\"><i class=\"fa fa-link\"></i></a>42.slice 中隐藏的数据\n			</h4>\n<p>\n				从 slice 中重新切出新 slice 时，新 slice 会引用原 slice 的底层数组。如果跳了这个坑，程序可能会分配大量的临时 slice 来指向原底层数组的部分数据，将导致难以预料的内存使用。\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span> <span class=\"token punctuation\">{</span> raw <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>raw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">cap</span><span class=\"token punctuation\">(</span>raw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>raw<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10000 10000 0xc420080000</span> <span class=\"token keyword\">return</span> raw<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 重新分配容量为 10000 的 slice</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> data <span class=\"token operator\">:=</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">cap</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3 10000 0xc420080000</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				可以通过拷贝临时 slice 的数据，而不是重新切片来解决：\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>res <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> raw <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>raw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">cap</span><span class=\"token punctuation\">(</span>raw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>raw<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10000 10000 0xc420080000</span> res <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> raw<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> data <span class=\"token operator\">:=</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">cap</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3 3 0xc4200160b8</span> <span class=\"token punctuation\">}</span> </pre>\n<h4 id=\"43slice-中数据的误用\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#43slice-中数据的误用\" name=\"43slice-中数据的误用\"><i class=\"fa fa-link\"></i></a>43.Slice 中数据的误用\n			</h4>\n<p>\n				举个简单例子，重写文件路径（存储在 slice 中）\n			</p>\n<p>\n				分割路径来指向每个不同级的目录，修改第一个目录名再重组子目录名，创建新路径：\n			</p>\n<pre class=\"language-\"><span class=\"token comment\">// 错误使用 slice 的拼接示例</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> path <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AAAA/BBBBBBBBB\"</span><span class=\"token punctuation\">)</span> sepIndex <span class=\"token operator\">:=</span> bytes<span class=\"token punctuation\">.</span><span class=\"token function\">IndexByte</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token string\">\'/\'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 4</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sepIndex<span class=\"token punctuation\">)</span> dir1 <span class=\"token operator\">:=</span> path<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>sepIndex<span class=\"token punctuation\">]</span> dir2 <span class=\"token operator\">:=</span> path<span class=\"token punctuation\">[</span>sepIndex<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dir1: \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>dir1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// AAAA</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dir2: \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>dir2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// BBBBBBBBB</span> dir1 <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>dir1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"suffix\"</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"current path: \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// AAAAsuffixBBBB</span> path <span class=\"token operator\">=</span> bytes<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">{</span>dir1<span class=\"token punctuation\">,</span> dir2<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">{</span><span class=\"token string\">\'/\'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dir1: \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>dir1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// AAAAsuffix</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dir2: \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>dir2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// uffixBBBB</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"new path: \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// AAAAsuffix/uffixBBBB    // 错误结果</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				拼接的结果不是正确的 AAAAsuffix/BBBBBBBBB，因为 dir1、 dir2 两个 slice 引用的数据都是 path 的底层数组，第 13 行修改 dir1 同时也修改了 path，也导致了 dir2 的修改\n			</p>\n<p>\n				解决方法：\n			</p>\n<ul>\n<li>\n					重新分配新的 slice 并拷贝你需要的数据\n				</li>\n<li>\n					使用完整的 slice 表达式：input[low:high:max]，容量便调整为 max - low\n				</li>\n</ul>\n<pre class=\"language-\"><span class=\"token comment\">// 使用 full slice expression</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> path <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AAAA/BBBBBBBBB\"</span><span class=\"token punctuation\">)</span> sepIndex <span class=\"token operator\">:=</span> bytes<span class=\"token punctuation\">.</span><span class=\"token function\">IndexByte</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token string\">\'/\'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 4</span> dir1 <span class=\"token operator\">:=</span> path<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>sepIndex<span class=\"token punctuation\">:</span>sepIndex<span class=\"token punctuation\">]</span> <span class=\"token comment\">// 此时 cap(dir1) 指定为4， 而不是先前的 16</span> dir2 <span class=\"token operator\">:=</span> path<span class=\"token punctuation\">[</span>sepIndex<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> dir1 <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>dir1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"suffix\"</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span> path <span class=\"token operator\">=</span> bytes<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">{</span>dir1<span class=\"token punctuation\">,</span> dir2<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">{</span><span class=\"token string\">\'/\'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dir1: \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>dir1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// AAAAsuffix</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dir2: \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>dir2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// BBBBBBBBB</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"new path: \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// AAAAsuffix/BBBBBBBBB</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				第 6 行中第三个参数是用来控制 dir1 的新容量，再往 dir1 中 append 超额元素时，将分配新的 buffer 来保存。而不是覆盖原来的 path 底层数组\n			</p>\n<h4 id=\"44旧-slice\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#44旧-slice\" name=\"44旧-slice\"><i class=\"fa fa-link\"></i></a>44.旧 slice\n			</h4>\n<p>\n				当你从一个已存在的 slice 创建新 slice 时，二者的数据指向相同的底层数组。如果你的程序使用这个特性，那需要注意 \"旧\"（stale） slice 问题。\n			</p>\n<p>\n				某些情况下，向一个 slice 中追加元素而它指向的底层数组容量不足时，将会重新分配一个新数组来存储数据。而其他 slice 还指向原来的旧底层数组。\n			</p>\n<pre class=\"language-\"><span class=\"token comment\">// 超过容量将重新分配数组来拷贝值、重新存储</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> s1 <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">cap</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s1<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3 3 [1 2 3 ]</span> s2 <span class=\"token operator\">:=</span> s1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">cap</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2 2 [2 3]</span> <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> s2 <span class=\"token punctuation\">{</span> s2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 此时的 s1 与 s2 是指向同一个底层数组的</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1 22 23]</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [22 23]</span> s2 <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 向容量为 2 的 s2 中再追加元素，此时将分配新数组来存</span> <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> s2 <span class=\"token punctuation\">{</span> s2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1 22 23]    // 此时的 s1 不再更新，为旧数据</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [32 33 14]</span> <span class=\"token punctuation\">}</span> </pre>\n<h4 id=\"45类型声明与方法\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#45类型声明与方法\" name=\"45类型声明与方法\"><i class=\"fa fa-link\"></i></a>45.类型声明与方法\n			</h4>\n<p>\n				从一个现有的非 interface 类型创建新类型时，并不会继承原有的方法：\n			</p>\n<pre class=\"language-\"><span class=\"token comment\">// 定义 Mutex 的自定义类型</span> <span class=\"token keyword\">type</span> myMutex sync<span class=\"token punctuation\">.</span>Mutex <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">var</span> mtx myMutex\n    mtx<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> mtx<span class=\"token punctuation\">.</span><span class=\"token function\">UnLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> </pre>\n<blockquote>\n<p>\n					mtx.Lock undefined (type myMutex has no field or method Lock)...\n				</p>\n</blockquote>\n<p>\n				如果你需要使用原类型的方法，可将原类型以匿名字段的形式嵌到你定义的新 struct 中：\n			</p>\n<pre class=\"language-\"><span class=\"token comment\">// 类型以字段形式直接嵌入</span> <span class=\"token keyword\">type</span> myLocker <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span> sync<span class=\"token punctuation\">.</span>Mutex <span class=\"token punctuation\">}</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">var</span> locker myLocker\n    locker<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> locker<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				interface 类型声明也保留它的方法集：\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">type</span> myLocker sync<span class=\"token punctuation\">.</span>Locker <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">var</span> locker myLocker\n    locker<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> locker<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> </pre>\n<h4 id=\"46跳出-for-switch-和-for-select-代码块\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#46跳出-for-switch-和-for-select-代码块\" name=\"46跳出-for-switch-和-for-select-代码块\"><i class=\"fa fa-link\"></i></a>46.跳出 for-switch 和 for-select 代码块\n			</h4>\n<p>\n				没有指定标签的 break 只会跳出 switch/select 语句，若不能使用 return 语句跳出的话，可为 break 跳出标签指定的代码块：\n			</p>\n<pre class=\"language-\"><span class=\"token comment\">// break 配合 label 跳出指定代码块</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> loop<span class=\"token punctuation\">:</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">case</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">:</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"breaking out...\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//break    // 死循环，一直打印 breaking out...</span> <span class=\"token keyword\">break</span> loop <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"out...\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				goto 虽然也能跳转到指定位置，但依旧会再次进入 for-switch，死循环。\n			</p>\n<h4 id=\"47for-语句中的迭代变量与闭包函数\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#47for-语句中的迭代变量与闭包函数\" name=\"47for-语句中的迭代变量与闭包函数\"><i class=\"fa fa-link\"></i></a>47.for 语句中的迭代变量与闭包函数\n			</h4>\n<p>\n				for 语句中的迭代变量在每次迭代中都会重用，即 for 中创建的闭包函数接收到的参数始终是同一个变量，在 goroutine 开始执行时都会得到同一个迭代值：\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> data <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"three\"</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> data <span class=\"token punctuation\">{</span> <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出 three three three</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				最简单的解决方法：无需修改 goroutine 函数，在 for 内部使用局部变量保存迭代值，再传参：\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> data <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"three\"</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> data <span class=\"token punctuation\">{</span> vCopy <span class=\"token operator\">:=</span> v <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>vCopy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出 one two three</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				另一个解决方法：直接将当前的迭代值以参数形式传递给匿名函数：\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> data <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"three\"</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> data <span class=\"token punctuation\">{</span> <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>in <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出 one two three</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				注意下边这个稍复杂的 3 个示例区别：\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">type</span> field <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span> name <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>field<span class=\"token punctuation\">)</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 错误示例</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> data <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>field<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"two\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"three\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> data <span class=\"token punctuation\">{</span> <span class=\"token keyword\">go</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出 three three three </span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 正确示例</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> data <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>field<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"two\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"three\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> data <span class=\"token punctuation\">{</span> v <span class=\"token operator\">:=</span> v <span class=\"token keyword\">go</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出 one two three</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 正确示例</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> data <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>field<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"two\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"three\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> data <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 此时迭代值 v 是三个元素值的地址，每次 v 指向的值不同</span> <span class=\"token keyword\">go</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出 one two three</span> <span class=\"token punctuation\">}</span> </pre>\n<h4 id=\"48defer-函数的参数值\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#48defer-函数的参数值\" name=\"48defer-函数的参数值\"><i class=\"fa fa-link\"></i></a>48.defer 函数的参数值\n			</h4>\n<p>\n				对 defer 延迟执行的函数，它的参数会在声明时候就会求出具体值，而不是在执行时才求值：\n			</p>\n<pre class=\"language-\"><span class=\"token comment\">// 在 defer 函数中参数会提前求值</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token keyword\">defer</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result: \"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> i <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">}</span> </pre>\n<blockquote>\n<p>\n					result: 2\n				</p>\n</blockquote>\n<h4 id=\"49defer-函数的执行时机\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#49defer-函数的执行时机\" name=\"49defer-函数的执行时机\"><i class=\"fa fa-link\"></i></a>49.defer 函数的执行时机\n			</h4>\n<p>\n				对 defer 延迟执行的函数，会在调用它的函数结束时执行，而不是在调用它的语句块结束时执行，注意区分开。\n			</p>\n<p>\n				比如在一个长时间执行的函数里，内部 for 循环中使用 defer 来清理每次迭代产生的资源调用，就会出现问题：\n			</p>\n<pre class=\"language-\"><span class=\"token comment\">// www.topgoer.com go语言中文文档</span> <span class=\"token comment\">// 命令行参数指定目录名</span> <span class=\"token comment\">// 遍历读取目录下的文件</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">{</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> dir <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> start<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Stat</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>start<span class=\"token punctuation\">.</span><span class=\"token function\">IsDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">var</span> targets <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span> filepath<span class=\"token punctuation\">.</span><span class=\"token function\">Walk</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>fPath <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> fInfo os<span class=\"token punctuation\">.</span>FileInfo<span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> err <span class=\"token punctuation\">}</span> <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>fInfo<span class=\"token punctuation\">.</span><span class=\"token function\">Mode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsRegular</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">}</span> targets <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>targets<span class=\"token punctuation\">,</span> fPath<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> target <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> targets <span class=\"token punctuation\">{</span> f<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bad target:\"</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> <span class=\"token string\">\"error:\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span> <span class=\"token comment\">//error:too many open files</span> <span class=\"token keyword\">break</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">defer</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 在每次 for 语句块结束时，不会关闭文件资源</span> <span class=\"token comment\">// 使用 f 资源</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				先创建 10000 个文件：\n			</p>\n<pre class=\"language-\">#<span class=\"token operator\">!</span><span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>bash <span class=\"token keyword\">for</span> n in <span class=\"token punctuation\">{</span><span class=\"token number\">1.</span><span class=\"token number\">.10000</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> do\n    echo content <span class=\"token operator\">&gt;</span> <span class=\"token string\">\"file${n}.txt\"</span> done</pre>\n<p>\n				运行效果：\n			</p>\n<p>\n<img alt=\"\" src=\"../static/xiangmu/18.png\"/>\n</p>\n<p>\n				解决办法：defer 延迟执行的函数写入匿名函数中：\n			</p>\n<pre class=\"language-\"><span class=\"token comment\">// 目录遍历正常</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// ...</span> <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> target <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> targets <span class=\"token punctuation\">{</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> f<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bad target:\"</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> <span class=\"token string\">\"error:\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token comment\">// 在匿名函数内使用 return 代替 break 即可</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">defer</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 匿名函数执行结束，调用关闭文件资源</span> <span class=\"token comment\">// 使用 f 资源</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				当然你也可以去掉 defer，在文件资源使用完毕后，直接调用 f.Close() 来关闭。\n			</p>\n<h4 id=\"50失败的类型断言\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#50失败的类型断言\" name=\"50失败的类型断言\"><i class=\"fa fa-link\"></i></a>50.失败的类型断言\n			</h4>\n<p>\n				在类型断言语句中，断言失败则会返回目标类型的“零值”，断言变量与原来变量混用可能出现异常情况：\n			</p>\n<pre class=\"language-\"><span class=\"token comment\">// 错误示例</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">var</span> data <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"great\"</span> <span class=\"token comment\">// data 混用</span> <span class=\"token keyword\">if</span> data<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> data<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[is an int], data: \"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[not an int], data: \"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [isn\'t a int], data:  0</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 正确示例</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">var</span> data <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"great\"</span> <span class=\"token keyword\">if</span> res<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> data<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[is an int], data: \"</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[not an int], data: \"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [not an int], data:  great</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> </pre>\n<h4 id=\"51阻塞的-gorutinue-与资源泄露\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#51阻塞的-gorutinue-与资源泄露\" name=\"51阻塞的-gorutinue-与资源泄露\"><i class=\"fa fa-link\"></i></a>51.阻塞的 gorutinue 与资源泄露\n			</h4>\n<p>\n				在 2012 年 Google I/O 大会上，Rob Pike 的 Go Concurrency Patterns 演讲讨论 Go 的几种基本并发模式，如 完整代码 中从数据集中获取第一条数据的函数：\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">First</span><span class=\"token punctuation\">(</span>query <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> replicas <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Search<span class=\"token punctuation\">)</span> Result <span class=\"token punctuation\">{</span> c <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> Result<span class=\"token punctuation\">)</span> replicaSearch <span class=\"token operator\">:=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>i <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> c <span class=\"token operator\">&lt;-</span> replicas<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> replicas <span class=\"token punctuation\">{</span> <span class=\"token keyword\">go</span> <span class=\"token function\">replicaSearch</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;-</span>c <span class=\"token punctuation\">}</span> </pre>\n<p>\n				在搜索重复时依旧每次都起一个 goroutine 去处理，每个 goroutine 都把它的搜索结果发送到结果 channel 中，channel 中收到的第一条数据会直接返回。\n			</p>\n<p>\n				返回完第一条数据后，其他 goroutine 的搜索结果怎么处理？他们自己的协程如何处理？\n			</p>\n<p>\n				在 First() 中的结果 channel 是无缓冲的，这意味着只有第一个 goroutine 能返回，由于没有 receiver，其他的 goroutine 会在发送上一直阻塞。如果你大量调用，则可能造成资源泄露。\n			</p>\n<p>\n				为避免泄露，你应该确保所有的 goroutine 都能正确退出，有 2 个解决方法：\n			</p>\n<ul>\n<li>\n					使用带缓冲的 channel，确保能接收全部 goroutine 的返回结果：\n				</li>\n</ul>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">First</span><span class=\"token punctuation\">(</span>query <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> replicas <span class=\"token operator\">...</span>Search<span class=\"token punctuation\">)</span> Result <span class=\"token punctuation\">{</span> c <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> Result<span class=\"token punctuation\">,</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>replicas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> searchReplica <span class=\"token operator\">:=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>i <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> c <span class=\"token operator\">&lt;-</span> replicas<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> replicas <span class=\"token punctuation\">{</span> <span class=\"token keyword\">go</span> <span class=\"token function\">searchReplica</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;-</span>c <span class=\"token punctuation\">}</span> </pre>\n<ul>\n<li>\n					使用 select 语句，配合能保存一个缓冲值的 channel default 语句：\ndefault 的缓冲 channel 保证了即使结果 channel 收不到数据，也不会阻塞 goroutine\n				</li>\n</ul>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">First</span><span class=\"token punctuation\">(</span>query <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> replicas <span class=\"token operator\">...</span>Search<span class=\"token punctuation\">)</span> Result <span class=\"token punctuation\">{</span> c <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> Result<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> searchReplica <span class=\"token operator\">:=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>i <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">case</span> c <span class=\"token operator\">&lt;-</span> replicas<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> replicas <span class=\"token punctuation\">{</span> <span class=\"token keyword\">go</span> <span class=\"token function\">searchReplica</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;-</span>c <span class=\"token punctuation\">}</span> </pre>\n<ul>\n<li>\n					使用特殊的废弃（cancellation） channel 来中断剩余 goroutine 的执行：\n				</li>\n</ul>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">First</span><span class=\"token punctuation\">(</span>query <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> replicas <span class=\"token operator\">...</span>Search<span class=\"token punctuation\">)</span> Result <span class=\"token punctuation\">{</span> c <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> Result<span class=\"token punctuation\">)</span> done <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">defer</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> searchReplica <span class=\"token operator\">:=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>i <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">case</span> c <span class=\"token operator\">&lt;-</span> replicas<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span> done<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> replicas <span class=\"token punctuation\">{</span> <span class=\"token keyword\">go</span> <span class=\"token function\">searchReplica</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;-</span>c <span class=\"token punctuation\">}</span> </pre>\n<p>\n				Rob Pike 为了简化演示，没有提及演讲代码中存在的这些问题。不过对于新手来说，可能会不加思考直接使用。\n			</p>\n<h3 id=\"高级篇：52-58\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#高级篇：52-58\" name=\"高级篇：52-58\"><i class=\"fa fa-link\"></i></a>1.1.3. 高级篇：52-58\n			</h3>\n<h4 id=\"52使用指针作为方法的-receiver\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#52使用指针作为方法的-receiver\" name=\"52使用指针作为方法的-receiver\"><i class=\"fa fa-link\"></i></a>52.使用指针作为方法的 receiver\n			</h4>\n<p>\n				只要值是可寻址的，就可以在值上直接调用指针方法。即是对一个方法，它的 receiver 是指针就足矣。\n			</p>\n<p>\n				但不是所有值都是可寻址的，比如 map 类型的元素、通过 interface 引用的变量：\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">type</span> data <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span> name <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">type</span> printer <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>data<span class=\"token punctuation\">)</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name: \"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> d1 <span class=\"token operator\">:=</span> data<span class=\"token punctuation\">{</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">}</span> d1<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// d1 变量可寻址，可直接调用指针 receiver 的方法</span> <span class=\"token keyword\">var</span> in printer <span class=\"token operator\">=</span> data<span class=\"token punctuation\">{</span><span class=\"token string\">\"two\"</span><span class=\"token punctuation\">}</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 类型不匹配</span> m <span class=\"token operator\">:=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>data<span class=\"token punctuation\">{</span> <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">{</span><span class=\"token string\">\"three\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">}</span> m<span class=\"token punctuation\">[</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// m[\"x\"] 是不可寻址的    // 变动频繁</span> <span class=\"token punctuation\">}</span> </pre>\n<blockquote>\n<p>\n					cannot use data literal (type data) as type printer in assignment:\ndata does not implement printer (print method has pointer receiver)\n				</p>\n<p>\n					cannot call pointer method on m[\"x\"]\ncannot take the address of m[\"x\"]\n				</p>\n</blockquote>\n<h4 id=\"53更新-map-字段的值\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#53更新-map-字段的值\" name=\"53更新-map-字段的值\"><i class=\"fa fa-link\"></i></a>53.更新 map 字段的值\n			</h4>\n<p>\n				如果 map 一个字段的值是 struct 类型，则无法直接更新该 struct 的单个字段：\n			</p>\n<pre class=\"language-\"><span class=\"token comment\">// 无法直接更新 struct 的字段值</span> <span class=\"token keyword\">type</span> data <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span> name <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> m <span class=\"token operator\">:=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>data<span class=\"token punctuation\">{</span> <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">}</span> m<span class=\"token punctuation\">[</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Jerry\"</span> <span class=\"token punctuation\">}</span> </pre>\n<blockquote>\n<p>\n					cannot assign to struct field m[\"x\"].name in map\n				</p>\n</blockquote>\n<p>\n				因为 map 中的元素是不可寻址的。需区分开的是，slice 的元素可寻址：\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">type</span> data <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span> name <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> s <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>data<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Jerry\"</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [{Jerry}]</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				注意：不久前 gccgo 编译器可更新 map struct 元素的字段值，不过很快便修复了，官方认为是 Go1.3 的潜在特性，无需及时实现，依旧在 todo list 中。\n			</p>\n<p>\n				更新 map 中 struct 元素的字段值，有 2 个方法：\n			</p>\n<ul>\n<li>\n					使用局部变量\n				</li>\n</ul>\n<pre class=\"language-\"><span class=\"token comment\">// 提取整个 struct 到局部变量中，修改字段值后再整个赋值</span> <span class=\"token keyword\">type</span> data <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span> name <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> m <span class=\"token operator\">:=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>data<span class=\"token punctuation\">{</span> <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">}</span> r <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">[</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">]</span> r<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Jerry\"</span> m<span class=\"token punctuation\">[</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> r\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token comment\">// map[x:{Jerry}]</span> <span class=\"token punctuation\">}</span> </pre>\n<ul>\n<li>\n					使用指向元素的 map 指针\n				</li>\n</ul>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> m <span class=\"token operator\">:=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>data<span class=\"token punctuation\">{</span> <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">}</span> m<span class=\"token punctuation\">[</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Jerry\"</span> <span class=\"token comment\">// 直接修改 m[\"x\"] 中的字段</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">[</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// &amp;{Jerry}</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				但是要注意下边这种误用：\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> m <span class=\"token operator\">:=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>data<span class=\"token punctuation\">{</span> <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">}</span> m<span class=\"token punctuation\">[</span><span class=\"token string\">\"z\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"what???\"</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">[</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> </pre>\n<blockquote>\n<p>\n					panic: runtime error: invalid memory address or nil pointer dereference\n				</p>\n</blockquote>\n<h4 id=\"54nil-interface-和-nil-interface-值\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#54nil-interface-和-nil-interface-值\" name=\"54nil-interface-和-nil-interface-值\"><i class=\"fa fa-link\"></i></a>54.nil interface 和 nil interface 值\n			</h4>\n<p>\n				虽然 interface 看起来像指针类型，但它不是。interface 类型的变量只有在类型和值均为 nil 时才为 nil\n			</p>\n<p>\n				如果你的 interface 变量的值是跟随其他变量变化的（雾），与 nil 比较相等时小心：\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">var</span> data <span class=\"token operator\">*</span><span class=\"token builtin\">byte</span> <span class=\"token keyword\">var</span> in <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> data <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// &lt;nil&gt; true</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">,</span> in <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// &lt;nil&gt; true</span> in <span class=\"token operator\">=</span> data\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">,</span> in <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// &lt;nil&gt; false    // data 值为 nil，但 in 值不为 nil</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				如果你的函数返回值类型是 interface，更要小心这个坑：\n			</p>\n<pre class=\"language-\"><span class=\"token comment\">// 错误示例</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> doIt <span class=\"token operator\">:=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>arg <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">var</span> result <span class=\"token operator\">*</span><span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span> <span class=\"token keyword\">if</span> arg <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span> result <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">return</span> result <span class=\"token punctuation\">}</span> <span class=\"token keyword\">if</span> res <span class=\"token operator\">:=</span> <span class=\"token function\">doIt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> res <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Good result: \"</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Good result:  &lt;nil&gt;</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%T\\n\"</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token comment\">// *struct {}    // res 不是 nil，它的值为 nil</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v\\n\"</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token comment\">// &lt;nil&gt;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 正确示例</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> doIt <span class=\"token operator\">:=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>arg <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">var</span> result <span class=\"token operator\">*</span><span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span> <span class=\"token keyword\">if</span> arg <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span> result <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span> <span class=\"token comment\">// 明确指明返回 nil</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">return</span> result <span class=\"token punctuation\">}</span> <span class=\"token keyword\">if</span> res <span class=\"token operator\">:=</span> <span class=\"token function\">doIt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> res <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Good result: \"</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bad result: \"</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Bad result:  &lt;nil&gt;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> </pre>\n<h4 id=\"55堆栈变量\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#55堆栈变量\" name=\"55堆栈变量\"><i class=\"fa fa-link\"></i></a>55.堆栈变量\n			</h4>\n<p>\n				你并不总是清楚你的变量是分配到了堆还是栈。\n			</p>\n<p>\n				在 C++ 中使用 new 创建的变量总是分配到堆内存上的，但在 Go 中即使使用 new()、make() 来创建变量，变量为内存分配位置依旧归 Go 编译器管。\n			</p>\n<p>\n				Go 编译器会根据变量的大小及其 \"escape analysis\" 的结果来决定变量的存储位置，故能准确返回本地变量的地址，这在 C/C++ 中是不行的。\n			</p>\n<p>\n				在 go build 或 go run 时，加入 -m 参数，能准确分析程序的变量分配位置：\n			</p>\n<p>\n<img alt=\"\" src=\"../static/xiangmu/19.png\"/>\n</p>\n<h4 id=\"56gomaxprocs、concurrency（并发）and-parallelism（并行）\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#56gomaxprocs、concurrency（并发）and-parallelism（并行）\" name=\"56gomaxprocs、concurrency（并发）and-parallelism（并行）\"><i class=\"fa fa-link\"></i></a>56.GOMAXPROCS、Concurrency（并发）and Parallelism（并行）\n			</h4>\n<p>\n				Go 1.4 及以下版本，程序只会使用 1 个执行上下文 / OS 线程，即任何时间都最多只有 1 个 goroutine 在执行。\n			</p>\n<p>\n				Go 1.5 版本将可执行上下文的数量设置为 runtime.NumCPU() 返回的逻辑 CPU 核心数，这个数与系统实际总的 CPU 逻辑核心数是否一致，取决于你的 CPU 分配给程序的核心数，可以使用 GOMAXPROCS 环境变量或者动态的使用 runtime.GOMAXPROCS() 来调整。\n			</p>\n<p>\n				误区：GOMAXPROCS 表示执行 goroutine 的 CPU 核心数，参考文档\n			</p>\n<p>\n				GOMAXPROCS 的值是可以超过 CPU 的实际数量的，在 1.5 中最大为 256\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>runtime<span class=\"token punctuation\">.</span><span class=\"token function\">GOMAXPROCS</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 4</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>runtime<span class=\"token punctuation\">.</span><span class=\"token function\">NumCPU</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 4</span> runtime<span class=\"token punctuation\">.</span><span class=\"token function\">GOMAXPROCS</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>runtime<span class=\"token punctuation\">.</span><span class=\"token function\">GOMAXPROCS</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 20</span> runtime<span class=\"token punctuation\">.</span><span class=\"token function\">GOMAXPROCS</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>runtime<span class=\"token punctuation\">.</span><span class=\"token function\">GOMAXPROCS</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Go 1.9.2 // 300</span> <span class=\"token punctuation\">}</span> </pre>\n<h4 id=\"57读写操作的重新排序\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#57读写操作的重新排序\" name=\"57读写操作的重新排序\"><i class=\"fa fa-link\"></i></a>57.读写操作的重新排序\n			</h4>\n<p>\n				Go 可能会重排一些操作的执行顺序，可以保证在一个 goroutine 中操作是顺序执行的，但不保证多 goroutine 的执行顺序：\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">var</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> runtime<span class=\"token punctuation\">.</span><span class=\"token function\">GOMAXPROCS</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">var</span> a<span class=\"token punctuation\">,</span> b <span class=\"token builtin\">int</span> <span class=\"token keyword\">func</span> <span class=\"token function\">u1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">func</span> <span class=\"token function\">u2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span> b <span class=\"token operator\">=</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">func</span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">go</span> <span class=\"token function\">u1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 多个 goroutine 的执行顺序不定</span> <span class=\"token keyword\">go</span> <span class=\"token function\">u2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">go</span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				运行效果：\n			</p>\n<p>\n<img alt=\"\" src=\"../static/xiangmu/20.png\"/>\n</p>\n<p>\n				如果你想保持多 goroutine 像代码中的那样顺序执行，可以使用 channel 或 sync 包中的锁机制等。\n			</p>\n<h4 id=\"58优先调度\">\n<a class=\"anchor-navigation-ex-anchor\" href=\"#58优先调度\" name=\"58优先调度\"><i class=\"fa fa-link\"></i></a>58.优先调度\n			</h4>\n<p>\n				你的程序可能出现一个 goroutine 在运行时阻止了其他 goroutine 的运行，比如程序中有一个不让调度器运行的 for 循环：\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> done <span class=\"token operator\">:=</span> <span class=\"token boolean\">false</span> <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> done <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> <span class=\"token operator\">!</span>done <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"done !\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				for 的循环体不必为空，但如果代码不会触发调度器执行，将出现问题。\n			</p>\n<p>\n				调度器会在 GC、Go 声明、阻塞 channel、阻塞系统调用和锁操作后再执行，也会在非内联函数调用时执行：\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> done <span class=\"token operator\">:=</span> <span class=\"token boolean\">false</span> <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> done <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> <span class=\"token operator\">!</span>done <span class=\"token punctuation\">{</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"not done !\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 并不内联执行</span> <span class=\"token punctuation\">}</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"done !\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				可以添加 -m 参数来分析 for 代码块中调用的内联函数：\n			</p>\n<p>\n<img alt=\"\" src=\"../static/xiangmu/21.png\"/>\n</p>\n<p>\n				你也可以使用 runtime 包中的 Gosched() 来 手动启动调度器：\n			</p>\n<pre class=\"language-\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> done <span class=\"token operator\">:=</span> <span class=\"token boolean\">false</span> <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> done <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> <span class=\"token operator\">!</span>done <span class=\"token punctuation\">{</span> runtime<span class=\"token punctuation\">.</span><span class=\"token function\">Gosched</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"done !\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> </pre>\n<p>\n				运行效果：\n			</p>\n<p>\n<img alt=\"\" src=\"../static/xiangmu/22.png\"/>\n</p>\n<p>\n				转自：<a href=\"http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/index.html#string_byte_slice_conv\" target=\"_blank\">http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/index.html#string_byte_slice_conv</a>\n</p>\n<div class=\"gitbook-donate\">\n<div>\n</div>\n<br/>\n</div>\n</div>\n</div>\n</div>', 27);
INSERT INTO `blog_articledetail` VALUES (28, '<p><strong>安装Pika Python客户端：</strong></p>\n<div class=\"cnblogs_code\">\n<pre>pip3 install pika</pre>\n</div>\n<h2><img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1468833/201903/1468833-20190324221411545-560995387.png\"/></h2>\n<h2><span style=\"background-color: #00ccff;\">一、单发送单接收</span></h2>\n<p><a href=\"https://www.rabbitmq.com/tutorials/tutorial-one-python.html\" target=\"_blank\">https://www.rabbitmq.com/tutorials/tutorial-one-python.html</a></p>\n<p><span>在下图中，\"P\"是我们的生产者，\"C\"是我们的消费者；</span><span>中间的框是一个队列。</span></p>\n<p><img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1468833/201903/1468833-20190324215857804-1191340589.png\"/></p>\n<p><span style=\"background-color: #ff9900;\"><strong>生产者send.py：</strong></span></p>\n<p><img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1468833/201903/1468833-20190324221606445-721763058.png\"/></p>\n<p><span class=\"cm-tab\">P发送消息给\"秒杀\"队列，C消费者从队列中获取消息，默认轮询方式。</span></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> pika\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 创建凭证，使用RabbitMQ用户密码登录（去邮局取邮件，必须得验证身份）</span>\ncredentials = pika.PlainCredentials(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">123456</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 新建连接（找到这个邮局，等于连接上服务器）</span>\nconnection = pika.BlockingConnection(pika.ConnectionParameters(host=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">localhost</span><span style=\"color: #800000;\">\"</span>, port=5672, credentials=<span style=\"color: #000000;\">credentials))\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 创建频道（建造一个大邮箱，隶属于这家邮局的邮箱，就是个连接）</span>\nchannel =<span style=\"color: #000000;\"> connection.channel()\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 声明一个队列，用于接收消息，队列名字叫\"秒杀\"</span>\nchannel.queue_declare(queue=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">秒杀</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 注意在RabbitMQ中，消息想要发送给队列，必须经过交换(exchange)，初学可以使用空字符串交换(exchange=\"\")，它允许我们精确的指定发送给哪个队列(routing_key=\"\")，参数body的值为发送的数据。</span>\nchannel.basic_publish(exchange=<span style=\"color: #800000;\">\"\"</span>, routing_key=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">秒杀</span><span style=\"color: #800000;\">\"</span>, body=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">恭喜您抢到iPhone666</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #0000ff;\">print</span>(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">已经发送了消息</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 程序退出前，确保刷新网络缓冲以及消息发送给RabbitMQ，需要关闭本次连接</span>\nconnection.close()</pre>\n</div>\n<p><span style=\"background-color: #ff9900;\"><strong>消费者receive.py：</strong></span></p>\n<p><img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1468833/201903/1468833-20190324221642920-1433181371.png\"/></p>\n<p>可以同时存在多个接收者，等待接收队列的消息，默认是轮询方式分配消息。接收者receive.py，可以运行多次，即运行多个消费者。</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> pika\ncredentials </span>= pika.PlainCredentials(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">123456</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\nconnection </span>= pika.BlockingConnection(pika.ConnectionParameters(host=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">localhost</span><span style=\"color: #800000;\">\"</span>, port=5672, credentials=<span style=\"color: #000000;\">credentials))\nchannel </span>=<span style=\"color: #000000;\"> connection.channel()\nchannel.queue_declare(queue</span>=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">秒杀</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\n\n</span><span style=\"color: #0000ff;\">def</span><span style=\"color: #000000;\"> callback(ch, method, properties, body):\n    </span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 有消息来临，立即执行callback，没有消息则夯住，等待消息</span>\n    <span style=\"color: #0000ff;\">print</span>(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">消费者接收到了任务：%s</span><span style=\"color: #800000;\">\"</span> % body.decode(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">utf8</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">))\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 果粉们开始去抢购iPhone，队列名字是\"秒杀\"</span>\nchannel.basic_consume(callback, queue=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">秒杀</span><span style=\"color: #800000;\">\"</span>, no_ack=<span style=\"color: #000000;\">True)\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 开始消费，接收消息</span>\nchannel.start_consuming()</pre>\n</div>\n<p><strong><span style=\"background-color: #ff9900;\">结果：</span></strong></p>\n<p><img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1468833/201903/1468833-20190324222121139-984598327.png\"/></p>\n<p><img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1468833/201903/1468833-20190324222138683-105306318.png\"/></p>\n<h3><span style=\"background-color: #99cc00;\"><strong>设置超时时间：</strong></span></h3>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'91ca5777-a0ce-4b86-bb64-fe275d5cef5d\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_91ca5777-a0ce-4b86-bb64-fe275d5cef5d\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_91ca5777-a0ce-4b86-bb64-fe275d5cef5d\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_91ca5777-a0ce-4b86-bb64-fe275d5cef5d\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> pika\n\ncredentials </span>= pika.PlainCredentials(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">123456</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\nconnection </span>= pika.BlockingConnection(pika.ConnectionParameters(host=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">localhost</span><span style=\"color: #800000;\">\"</span>, port=5672, credentials=<span style=\"color: #000000;\">credentials))\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 超时时间（如果5秒内没有收到消息，将不会夯住等待消息，取消接收消息）</span>\nconnection.add_timeout(5, <span style=\"color: #0000ff;\">lambda</span><span style=\"color: #000000;\">: channel.stop_consuming())\n\nchannel </span>=<span style=\"color: #000000;\"> connection.channel()\nchannel.queue_declare(queue</span>=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">秒杀</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\n\n</span><span style=\"color: #0000ff;\">def</span><span style=\"color: #000000;\"> callback(ch, method, properties, body):\n    </span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 有消息来临，立即执行callback，没有消息则夯住，等待消息</span>\n    <span style=\"color: #0000ff;\">print</span>(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">消费者接收到了任务：%s</span><span style=\"color: #800000;\">\"</span> % body.decode(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">utf8</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">))\n\nchannel.basic_consume(callback, queue</span>=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">秒杀</span><span style=\"color: #800000;\">\"</span>, no_ack=<span style=\"color: #000000;\">True)\nchannel.start_consuming()</span></pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<h2><span style=\"background-color: #00ccff;\">二、单发送多接收</span></h2>\n<p>使用场景：一个发送端，多个接收端，如分布式的任务派发。为了保证消息发送的可靠性，不丢失消息，使消息持久化了。同时为了防止接收端在处理消息时down掉，只有在消息处理完成后才发送ack消息。</p>\n<h2><span style=\"background-color: #00ccff;\">三、RabbitMQ消息确认之ack</span></h2>\n<p><span class=\"md-link\">默认情况下，生产者发送数据给队列，消费者取出消息后，数据将被清除。</span></p>\n<p><span class=\"md-link\">特殊情况，如果消费者处理过程中，出现错误，数据处理没有完成，那么这段数据将从队列丢失。</span></p>\n<h3 class=\"md-end-block md-heading\"><span style=\"background-color: #99cc00;\">no-ack机制</span></h3>\n<p><code>不确认机制</code>也就是说每次消费者接收到数据后，不管是否处理完毕，rabbitmq-server都会把这个消息标记完成，从队列中删除。</p>\n<h3 class=\"md-end-block md-heading\"><span style=\"background-color: #99cc00;\">ack机制</span></h3>\n<p>确认机制用于保证消费者如果拿了队列的消息，<code>客户端</code>处理时出错了，那么队列中仍然还存在这个消息，提供下一位消费者继续取。</p>\n<h3 class=\"md-end-block md-heading\"><span style=\"background-color: #99cc00;\">代码示例</span></h3>\n<p>生产者无须变动，发送消息。<br/>消费者如果no_ack=True，数据消费后如果出错就会丢失；反之no_ack=False，数据消费如果出错，数据也不会丢失。</p>\n<p><strong><span style=\"background-color: #ff9900;\">生产者send.py：</span></strong><code>只负责发送数据即可，无须变动。</code></p>\n<p><span style=\"background-color: #ff9900;\"><strong>消费者reveive.py<code>给与ack回复：</code></strong></span></p>\n<p>拿到消息必须给RabbitMQ服务端回复ack信息，否则消息不会被删除，防止客户端出错，数据丢失。</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'6ef46c79-73c9-4981-890f-f4b332d75e8a\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_6ef46c79-73c9-4981-890f-f4b332d75e8a\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_6ef46c79-73c9-4981-890f-f4b332d75e8a\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_6ef46c79-73c9-4981-890f-f4b332d75e8a\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> pika\ncredentials </span>= pika.PlainCredentials(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">123456</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\nconnection </span>= pika.BlockingConnection(pika.ConnectionParameters(host=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">localhost</span><span style=\"color: #800000;\">\"</span>, port=5672, credentials=<span style=\"color: #000000;\">credentials))\nchannel </span>=<span style=\"color: #000000;\"> connection.channel()\nchannel.queue_declare(queue</span>=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">秒杀</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\n\n</span><span style=\"color: #0000ff;\">def</span><span style=\"color: #000000;\"> callback(ch, method, properties, body):\n    </span><span style=\"color: #0000ff;\">print</span>(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">消费者接收到了任务：%s</span><span style=\"color: #800000;\">\"</span> % body.decode(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">utf8</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">))\n    </span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 模拟异常，没能给服务端回复ack信息，消息不丢失</span>\n    <span style=\"color: #0000ff;\">print</span><span style=\"color: #000000;\">(xx)\n    </span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 告诉服务端，我已经取走了消息，否则消息一直存在</span>\n    ch.basic_ack(delivery_tag=<span style=\"color: #000000;\">method.delivery_tag)\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 关闭no_ack，代表给与服务端ack回复（确认）</span>\nchannel.basic_consume(callback, queue=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">秒杀</span><span style=\"color: #800000;\">\"</span>, no_ack=<span style=\"color: #000000;\">False)\nchannel.start_consuming()</span></pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<h2><span style=\"background-color: #00ccff;\">四、公平分发</span></h2>\n<p>默认消息队列里的数据是按照轮询被消费者拿走，例如：消费者1去队列中获取奇数序列的任务，消费者2去队列中获取偶数序列的任务。假如消费者1获取到任务，需要处理很久；下个任务就被消费者2获取到，一下子就处理完了；那么按照RabbitMQ默认设置，下个任务就应该分发给消费者1了，但是此时消费者1还是没处理完任务。RabbitMQ是不知道消费时1还没处理完任务的，既然轮到了消费者1，那RabbitMQ依然向消费者1发送消息。</p>\n<p><img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1468833/201903/1468833-20190325154648531-1321999291.png\"/></p>\n<p>为了避免这种情况，设置：</p>\n<div class=\"cnblogs_Highlighter\">\n<pre class=\"brush:python;gutter:true;\">channel.basic_qos(prefetch_count=1)</pre>\n</div>\n<p><strong><span style=\"background-color: #ff9900;\">生产者：</span></strong></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'a76856a9-b8c8-4998-8e5a-08a144e7991e\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_a76856a9-b8c8-4998-8e5a-08a144e7991e\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_a76856a9-b8c8-4998-8e5a-08a144e7991e\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_a76856a9-b8c8-4998-8e5a-08a144e7991e\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> pika\n\ncredentials </span>= pika.PlainCredentials(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">123456</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\nconnection </span>= pika.BlockingConnection(pika.ConnectionParameters(host=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">localhost</span><span style=\"color: #800000;\">\"</span>, port=5672, credentials=<span style=\"color: #000000;\">credentials))\nchannel </span>=<span style=\"color: #000000;\"> connection.channel()\nchannel.queue_declare(queue</span>=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">uu</span><span style=\"color: #800000;\">\"</span>, durable=<span style=\"color: #000000;\">True)\nchannel.basic_publish(exchange</span>=<span style=\"color: #800000;\">\"\"</span>, routing_key=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">uu</span><span style=\"color: #800000;\">\"</span>, body=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">你在干什么？</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\nconnection.close()</span></pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p><span style=\"background-color: #ff9900;\"><strong>消费者1：time.sleep(30)</strong></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'1d29213d-0bad-478f-a09f-6b5a8b382d97\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_1d29213d-0bad-478f-a09f-6b5a8b382d97\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_1d29213d-0bad-478f-a09f-6b5a8b382d97\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_1d29213d-0bad-478f-a09f-6b5a8b382d97\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> pika\n</span><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> time\n\ncredentials </span>= pika.PlainCredentials(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">123456</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\nconnection </span>= pika.BlockingConnection(pika.ConnectionParameters(host=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">localhost</span><span style=\"color: #800000;\">\"</span>, port=5672, credentials=<span style=\"color: #000000;\">credentials))\nchannel </span>=<span style=\"color: #000000;\"> connection.channel()\nchannel.queue_declare(queue</span>=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">uu</span><span style=\"color: #800000;\">\"</span>, durable=<span style=\"color: #000000;\">True)\n\n</span><span style=\"color: #0000ff;\">def</span><span style=\"color: #000000;\"> callback(ch, method, properties, body):\n    </span><span style=\"color: #0000ff;\">print</span>(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">消费者1接收到了任务：%s</span><span style=\"color: #800000;\">\"</span> % body.decode(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">utf8</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">))\n    time.sleep(</span>30<span style=\"color: #000000;\">)\n    ch.basic_ack(delivery_tag</span>=<span style=\"color: #000000;\">method.delivery_tag)\n\nchannel.basic_qos(prefetch_count</span>=1<span style=\"color: #000000;\">)\nchannel.basic_consume(callback, queue</span>=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">uu</span><span style=\"color: #800000;\">\"</span>, no_ack=<span style=\"color: #000000;\">False)\nchannel.start_consuming()</span></pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p><span style=\"background-color: #ff9900;\"><strong>消费者2：</strong></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'075f17e4-4d4e-4d41-b94f-55ed930964d6\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_075f17e4-4d4e-4d41-b94f-55ed930964d6\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_075f17e4-4d4e-4d41-b94f-55ed930964d6\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_075f17e4-4d4e-4d41-b94f-55ed930964d6\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> pika\n\ncredentials </span>= pika.PlainCredentials(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">123456</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\nconnection </span>= pika.BlockingConnection(pika.ConnectionParameters(host=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">localhost</span><span style=\"color: #800000;\">\"</span>, port=5672, credentials=<span style=\"color: #000000;\">credentials))\nchannel </span>=<span style=\"color: #000000;\"> connection.channel()\nchannel.queue_declare(queue</span>=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">uu</span><span style=\"color: #800000;\">\"</span>, durable=<span style=\"color: #000000;\">True)\n\n</span><span style=\"color: #0000ff;\">def</span><span style=\"color: #000000;\"> callback(ch, method, properties, body):\n    </span><span style=\"color: #0000ff;\">print</span>(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">消费者2接收到了任务：%s</span><span style=\"color: #800000;\">\"</span> % body.decode(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">utf8</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">))\n    ch.basic_ack(delivery_tag</span>=<span style=\"color: #000000;\">method.delivery_tag)\n\nchannel.basic_qos(prefetch_count</span>=1<span style=\"color: #000000;\">)\nchannel.basic_consume(callback, queue</span>=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">uu</span><span style=\"color: #800000;\">\"</span>, no_ack=<span style=\"color: #000000;\">False)\nchannel.start_consuming()</span></pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<h2><span style=\"background-color: #00ccff;\">五、消息持久化</span></h2>\n<div class=\"cnblogs_code\">\n<pre>1<span style=\"color: #000000;\">.执行生产者，向队列写入数据，产生一个新队列queue\n</span>2<span style=\"color: #000000;\">.重启服务端，队列丢失\n\n</span>3<span style=\"color: #000000;\">.开启生产者数据持久化后，重启服务端，队列不丢失\n</span>4.客户端依旧可以读取数据</pre>\n</div>\n<p>消息的可靠性是RabbitMQ的一大特色，那么RabbitMQ是如何保证消息可靠性的呢——消息持久化。 <span class=\"md-softbreak\">为了保证RabbitMQ在退出或者crash等异常情况下数据没有丢失，需要将queue、exchange和Message都持久化。</span></p>\n<p><span style=\"background-color: #ff9900;\"><strong>生产者send.py</strong></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'7c4a75e9-af5b-40f7-b032-9eac81ace253\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_7c4a75e9-af5b-40f7-b032-9eac81ace253\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_7c4a75e9-af5b-40f7-b032-9eac81ace253\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_7c4a75e9-af5b-40f7-b032-9eac81ace253\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> pika\ncredentials </span>= pika.PlainCredentials(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">123456</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\nconnection </span>= pika.BlockingConnection(pika.ConnectionParameters(host=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">localhost</span><span style=\"color: #800000;\">\"</span>, port=5672, credentials=<span style=\"color: #000000;\">credentials))\nchannel </span>=<span style=\"color: #000000;\"> connection.channel()\n</span><span style=\"color: #800000;\">\"\"\"</span><span style=\"color: #800000;\">\n声明一个队列(创建一个队列)，\n默认此队列不支持持久化,如果服务挂掉，数据丢失,\n参数 durable=True 开启queue持久化，必须新开启一个队列，原本的队列已经不支持持久化了。\n</span><span style=\"color: #800000;\">\"\"\"</span><span style=\"color: #000000;\">\nchannel.queue_declare(queue</span>=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">zz</span><span style=\"color: #800000;\">\"</span>, durable=<span style=\"color: #000000;\">True)\n</span><span style=\"color: #800000;\">\"\"\"</span><span style=\"color: #800000;\">\n实现RabbitMQ持久化条件\n delivery_mode=2\n</span><span style=\"color: #800000;\">\"\"\"</span><span style=\"color: #000000;\">\nchannel.basic_publish(exchange</span>=<span style=\"color: #800000;\">\"\"</span><span style=\"color: #000000;\">,\n                      routing_key</span>=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">zz</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n                      body</span>=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">吃饭了没？</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n                      </span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 支持数据持久化</span>\n                      properties=<span style=\"color: #000000;\">pika.BasicProperties(\n                          delivery_mode</span>=2,  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 代表消息是持久的 2</span>\n<span style=\"color: #000000;\">                      )\n)\n</span><span style=\"color: #0000ff;\">print</span>(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">已经发送了消息</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\nconnection.close()</span></pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p><span style=\"background-color: #ff9900;\"><strong>消费者receive.py</strong></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'cede7d94-52e8-4873-aa22-eedb178d2465\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_cede7d94-52e8-4873-aa22-eedb178d2465\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_cede7d94-52e8-4873-aa22-eedb178d2465\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_cede7d94-52e8-4873-aa22-eedb178d2465\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> pika\ncredentials </span>= pika.PlainCredentials(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">123456</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\nconnection </span>= pika.BlockingConnection(pika.ConnectionParameters(host=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">localhost</span><span style=\"color: #800000;\">\"</span>, port=5672, credentials=<span style=\"color: #000000;\">credentials))\nchannel </span>=<span style=\"color: #000000;\"> connection.channel()\n</span><span style=\"color: #800000;\">\"\"\"</span><span style=\"color: #800000;\">\n声明一个队列(创建一个队列)，\n默认此队列不支持持久化,如果服务挂掉，数据丢失,\n参数 durable=True 开启queue持久化，必须新开启一个队列，原本的队列已经不支持持久化了。\n</span><span style=\"color: #800000;\">\"\"\"</span><span style=\"color: #000000;\">\nchannel.queue_declare(queue</span>=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">zz</span><span style=\"color: #800000;\">\"</span>, durable=<span style=\"color: #000000;\">True)\n</span><span style=\"color: #800000;\">\"\"\"</span><span style=\"color: #800000;\">\n实现RabbitMQ持久化条件\n delivery_mode=2\n</span><span style=\"color: #800000;\">\"\"\"</span><span style=\"color: #000000;\">\nchannel.basic_publish(exchange</span>=<span style=\"color: #800000;\">\"\"</span><span style=\"color: #000000;\">,\n                      routing_key</span>=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">zz</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n                      body</span>=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">吃饭了没？</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n                      </span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 支持数据持久化</span>\n                      properties=<span style=\"color: #000000;\">pika.BasicProperties(\n                          delivery_mode</span>=2,  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 代表消息是持久的 2</span>\n<span style=\"color: #000000;\">                      )\n)\n</span><span style=\"color: #0000ff;\">print</span>(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">已经发送了消息</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\nconnection.close()</span></pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<h2><span style=\"background-color: #00ccff;\">六、exchange模型</span></h2>\n<p>RabbitMQ发送消息首先是发给exchange，然后再通过exchange发送消息给队列（queue）。</p>\n<h3><span style=\"background-color: #99cc00;\"><strong>exchange有四种模式：</strong></span></h3>\n<p><span style=\"background-color: #ff9900;\"><strong>fanout：</strong></span></p>\n<p>exchange将消息发送给和该exchange连接的所有queue；也就是所谓的广播模式；此模式下忽略routing_key。</p>\n<p><span style=\"background-color: #ff9900;\"><strong>direct：</strong></span></p>\n<p>路由模式，通过routing_key将消息发送给对应的queue；如下面这句即可设置exchange为direct模式，只有routing_key为\"black\"时才将其发送到队列queue_name；<code></code></p>\n<div class=\"cnblogs_Highlighter\">\n<pre class=\"brush:python;gutter:true;\">channel.queue_bind(exchange=exchange_name, queue=queue_name, routing_key=\"black\")</pre>\n</div>\n<p>在上图中，Q1和Q2可以绑定同一个key，如绑定routing_key=\"KeySame\"，那么收到routing_key为KeySame的消息时将会同时发送给Q1和Q2，相当于广播模式。</p>\n<p><span style=\"background-color: #ff9900;\"><strong>topic：</strong></span></p>\n<p>topic模式类似于direct模式，只是其中的routing_key变成了一个有\"<strong>.</strong>\"分隔的字符串，\"<strong>.</strong>\"将字符串分割成几个单词，每个单词代表一个条件。</p>\n<p><span style=\"background-color: #ff9900;\"><strong>headers：</strong></span></p>\n<p>headers类型的exchange不依赖于routing key与binding key的匹配规则来路由消息，而是根据发送的消息内容中的headers属性进行匹配。</p>\n<h3><span style=\"background-color: #99cc00;\"><strong>发布订阅</strong></span></h3>\n<p><a href=\"https://www.rabbitmq.com/tutorials/tutorial-three-python.html\" target=\"_blank\">https://www.rabbitmq.com/tutorials/tutorial-three-python.html</a></p>\n<p><img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1468833/201903/1468833-20190325003414221-1139752149.png\"/></p>\n<div class=\"cnblogs_Highlighter\">\n<pre class=\"brush:python;gutter:true;\">exchange type = \"fanout\"</pre>\n</div>\n<p>发布订阅和简单的消息队列区别在于，发布订阅会将消息发送给所有的订阅者，而消息队列中的数据被消费一次便消失。所以，RabbitMQ实现发布和订阅时，会为每一个订阅者创建一个队列，而发布者发布消息时，会将消息放置在所有相关队列中。</p>\n<p><span style=\"background-color: #ff9900;\"><strong>生产者（发布者）：</strong></span></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> pika\ncredentials </span>= pika.PlainCredentials(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">123456</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\nconnection </span>= pika.BlockingConnection(pika.ConnectionParameters(host=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">localhost</span><span style=\"color: #800000;\">\"</span>, port=5672, credentials=<span style=\"color: #000000;\">credentials))\nchannel </span>=<span style=\"color: #000000;\"> connection.channel()\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 指定exchange</span>\nchannel.exchange_declare(exchange=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">mm</span><span style=\"color: #800000;\">\"</span>, exchange_type=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">fanout</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\nchannel.basic_publish(exchange</span>=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">mm</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n                      routing_key</span>=<span style=\"color: #800000;\">\"\"</span>,  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 这里不再指定队列，由exchange分配,如果是fanout模式，每一个队列放一份</span>\n                      body=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">你妈妈叫你回家吃饭了！</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n)\nconnection.close()</span></pre>\n</div>\n<p><span style=\"background-color: #ff9900;\"><strong>消费者（订阅者）：</strong></span></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> pika\ncredentials </span>= pika.PlainCredentials(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">123456</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\nconnection </span>= pika.BlockingConnection(pika.ConnectionParameters(host=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">localhost</span><span style=\"color: #800000;\">\"</span>, port=5672, credentials=<span style=\"color: #000000;\">credentials))\nchannel </span>=<span style=\"color: #000000;\"> connection.channel()\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> exchange=\"mm\"，exchange(秘书)的名称</span><span style=\"color: #008000;\">\n#</span><span style=\"color: #008000;\"> exchange_type=\"fanout\" , 秘书工作方式将消息发送给所有的队列</span>\nchannel.exchange_declare(exchange=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">mm</span><span style=\"color: #800000;\">\"</span>,exchange_type=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">fanout</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 随机生成一个队列，并且在关闭消费者连接后，删除这个队列</span>\nresult = channel.queue_declare(exclusive=<span style=\"color: #000000;\">True)\nqueue_name </span>=<span style=\"color: #000000;\"> result.method.queue\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 让exchange和queue进行绑定</span>\nchannel.queue_bind(exchange=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">mm</span><span style=\"color: #800000;\">\"</span>, queue=<span style=\"color: #000000;\">queue_name)\n\n</span><span style=\"color: #0000ff;\">def</span><span style=\"color: #000000;\"> callback(ch, method, properties, body):\n    </span><span style=\"color: #0000ff;\">print</span>(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">消费者接收到了任务：%s</span><span style=\"color: #800000;\">\"</span> % body.decode(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">utf8</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">))\n\nchannel.basic_consume(callback, queue</span>=queue_name, no_ack=<span style=\"color: #000000;\">True)\nchannel.start_consuming()</span></pre>\n</div>\n<p><strong><span style=\"background-color: #ff9900;\">操作示例：</span></strong></p>\n<div class=\"cnblogs_code\">\n<pre>1<span style=\"color: #000000;\">.运行订阅者（可以多个），相当于有多个滴滴司机，订阅同一个电台（队列），等待着消息到来\n</span>2<span style=\"color: #000000;\">.运行发布者，发送消息给Exchange\n</span>3.查看是否给所有的队列发送了消息</pre>\n</div>\n<h3 class=\"md-end-block md-heading\"><span style=\"background-color: #99cc00;\">关键字发送</span></h3>\n<p><a href=\"https://www.rabbitmq.com/tutorials/tutorial-four-python.html\" target=\"_blank\">https://www.rabbitmq.com/tutorials/tutorial-four-python.html</a></p>\n<p><img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1468833/201903/1468833-20190325132749574-516818475.png\"/></p>\n<div class=\"cnblogs_Highlighter\">\n<pre class=\"brush:python;gutter:true;\">exchange type = \"direct\"</pre>\n</div>\n<p>之前事例，发送消息时明确指定某个队列并向其中发送消息，RabbitMQ还支持根据关键字发送，即：队列绑定关键字，发送者将数据根据关键字发送到消息exchange，exchange根据关键字判定应该将数据发送至指定队列。</p>\n<p><span style=\"background-color: #ff9900;\"><strong>生产者：</strong></span></p>\n<p>发送消息给匹配的路由，\"小白\"或者\"小黑\"；如果routing_key为\"小白\"，两个订阅者都可以收到消息，如果为\"小黑\"，订阅者2无法收到消息。</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'8d3b9751-a114-4254-8d87-ae05fe4c1896\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_8d3b9751-a114-4254-8d87-ae05fe4c1896\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_8d3b9751-a114-4254-8d87-ae05fe4c1896\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_8d3b9751-a114-4254-8d87-ae05fe4c1896\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> pika\ncredentials </span>= pika.PlainCredentials(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">123456</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\nconnection </span>= pika.BlockingConnection(pika.ConnectionParameters(host=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">localhost</span><span style=\"color: #800000;\">\"</span>, port=5672, credentials=<span style=\"color: #000000;\">credentials))\nchannel </span>=<span style=\"color: #000000;\"> connection.channel()\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 路由模式的交换机会发送给绑定的key和routing_key匹配的队列</span>\nchannel.exchange_declare(exchange=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">kk</span><span style=\"color: #800000;\">\"</span>, exchange_type=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">direct</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 发送消息，给有关\"小白\"的路由关键字</span>\nchannel.basic_publish(exchange=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">kk</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n                      routing_key</span>=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">小黑</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n                      body</span>=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">喜洋洋与灰太狼</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n)\nconnection.close()</span></pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p><span style=\"background-color: #ff9900;\"><strong>消费者1：</strong></span></p>\n<p>路由关键字\"小白\"、\"小黑\"</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'0a49c834-2fc9-4ef1-9814-d6c631d43ecb\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_0a49c834-2fc9-4ef1-9814-d6c631d43ecb\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_0a49c834-2fc9-4ef1-9814-d6c631d43ecb\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_0a49c834-2fc9-4ef1-9814-d6c631d43ecb\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> pika\ncredentials </span>= pika.PlainCredentials(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">123456</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\nconnection </span>= pika.BlockingConnection(pika.ConnectionParameters(host=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">localhost</span><span style=\"color: #800000;\">\"</span>, port=5672, credentials=<span style=\"color: #000000;\">credentials))\nchannel </span>=<span style=\"color: #000000;\"> connection.channel()\nchannel.exchange_declare(exchange</span>=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">kk</span><span style=\"color: #800000;\">\"</span>, exchange_type=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">direct</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 随机生成一个队列，并且在关闭消费者连接后，删除这个队列</span>\nresult = channel.queue_declare(exclusive=<span style=\"color: #000000;\">True)\nqueue_name </span>=<span style=\"color: #000000;\"> result.method.queue\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 让exchange和queue进行绑定</span>\nchannel.queue_bind(exchange=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">kk</span><span style=\"color: #800000;\">\"</span>, queue=queue_name, routing_key=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">小白</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\nchannel.queue_bind(exchange</span>=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">kk</span><span style=\"color: #800000;\">\"</span>, queue=queue_name, routing_key=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">小黑</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\n\n</span><span style=\"color: #0000ff;\">def</span><span style=\"color: #000000;\"> callback(ch, method, properties, body):\n    </span><span style=\"color: #0000ff;\">print</span>(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">消费者接收到了任务：%s</span><span style=\"color: #800000;\">\"</span> % body.decode(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">utf8</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">))\n\nchannel.basic_consume(callback, queue</span>=queue_name, no_ack=<span style=\"color: #000000;\">True)\nchannel.start_consuming()</span></pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p><span style=\"background-color: #ff9900;\"><strong>消费者2：</strong></span></p>\n<p>路由关键字\"小白\"</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'ba7159f9-8779-43c0-be2d-7a66977dbba3\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_ba7159f9-8779-43c0-be2d-7a66977dbba3\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_ba7159f9-8779-43c0-be2d-7a66977dbba3\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_ba7159f9-8779-43c0-be2d-7a66977dbba3\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> pika\ncredentials </span>= pika.PlainCredentials(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">123456</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\nconnection </span>= pika.BlockingConnection(pika.ConnectionParameters(host=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">localhost</span><span style=\"color: #800000;\">\"</span>, port=5672, credentials=<span style=\"color: #000000;\">credentials))\nchannel </span>=<span style=\"color: #000000;\"> connection.channel()\nchannel.exchange_declare(exchange</span>=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">kk</span><span style=\"color: #800000;\">\"</span>, exchange_type=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">direct</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 随机生成一个队列，并且在关闭消费者连接后，删除这个队列</span>\nresult = channel.queue_declare(exclusive=<span style=\"color: #000000;\">True)\nqueue_name </span>=<span style=\"color: #000000;\"> result.method.queue\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 让exchange和queue进行绑定</span>\nchannel.queue_bind(exchange=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">kk</span><span style=\"color: #800000;\">\"</span>, queue=queue_name, routing_key=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">小白</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\n\n</span><span style=\"color: #0000ff;\">def</span><span style=\"color: #000000;\"> callback(ch, method, properties, body):\n    </span><span style=\"color: #0000ff;\">print</span>(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">消费者接收到了任务：%s</span><span style=\"color: #800000;\">\"</span> % body.decode(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">utf8</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">))\n\nchannel.basic_consume(callback, queue</span>=queue_name, no_ack=<span style=\"color: #000000;\">True)\nchannel.start_consuming()</span></pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<h3><span style=\"background-color: #99cc00;\">模糊匹配</span></h3>\n<p><a href=\"https://www.rabbitmq.com/tutorials/tutorial-five-python.html\" target=\"_blank\">https://www.rabbitmq.com/tutorials/tutorial-five-python.html</a></p>\n<p><img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1468833/201903/1468833-20190325133416466-1639552107.png\"/></p>\n<div class=\"cnblogs_Highlighter\">\n<pre class=\"brush:python;gutter:true;\">exchange type = \"topic\"\n</pre>\n</div>\n<p>在topic类型下，可以让队列绑定几个模糊的关键字，之后发送者将数据发送到exchange，exchange将传入\"路由值\"和 \"关键字\"进行匹配，匹配成功，则将数据发送到指定队列。</p>\n<div class=\"cnblogs_Highlighter\">\n<pre class=\"brush:html;gutter:true;\">*  表示只能匹配 1个 单词\n#  表示可以匹配 0个 或 多个 单词</pre>\n</div>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #000000;\">发送者路由值      队列中\ni.love          i.</span>*<span style=\"color: #000000;\">        匹配\ni.love          i.</span>#        匹配\ni.love.you      i.*<span style=\"color: #000000;\">        不匹配\ni.love.you      i.</span>#        匹配\ni.love.you      *.love.*   匹配</pre>\n</div>\n<p><span style=\"background-color: #ff9900;\"><strong>生产者：</strong></span></p>\n<p><strong>路由秘钥：i.love.you</strong></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'5d97e55c-a0d7-4389-9a39-705ba904870b\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_5d97e55c-a0d7-4389-9a39-705ba904870b\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_5d97e55c-a0d7-4389-9a39-705ba904870b\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_5d97e55c-a0d7-4389-9a39-705ba904870b\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> pika\n\ncredentials </span>= pika.PlainCredentials(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">123456</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\nconnection </span>= pika.BlockingConnection(pika.ConnectionParameters(host=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">localhost</span><span style=\"color: #800000;\">\"</span>, port=5672, credentials=<span style=\"color: #000000;\">credentials))\nchannel </span>=<span style=\"color: #000000;\"> connection.channel()\nchannel.exchange_declare(exchange</span>=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">topic_xx</span><span style=\"color: #800000;\">\"</span>, exchange_type=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">topic</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 让exchange和queue进行绑定，并且指定这条消息的路由密钥</span>\nchannel.basic_publish(exchange=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">topic_xx</span><span style=\"color: #800000;\">\"</span>, routing_key=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">i.love.you</span><span style=\"color: #800000;\">\"</span>, body=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">该写做作业了！</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\nconnection.close()</span></pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p><span style=\"background-color: #ff9900;\"><strong>消费者1：</strong></span></p>\n<p><strong>队列绑定秘钥：<span style=\"background-color: #ff99cc;\">i.#</span> 和 <span style=\"background-color: #ff99cc;\">*.love.*</span></strong></p>\n<p>只要有一个能匹配到路由秘钥，就能接收到消息。</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'4c9032eb-2055-499a-a08a-4d8d1eae0b9b\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_4c9032eb-2055-499a-a08a-4d8d1eae0b9b\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_4c9032eb-2055-499a-a08a-4d8d1eae0b9b\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_4c9032eb-2055-499a-a08a-4d8d1eae0b9b\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> pika\n\ncredentials </span>= pika.PlainCredentials(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">123456</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\nconnection </span>= pika.BlockingConnection(pika.ConnectionParameters(host=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">localhost</span><span style=\"color: #800000;\">\"</span>, port=5672, credentials=<span style=\"color: #000000;\">credentials))\nchannel </span>=<span style=\"color: #000000;\"> connection.channel()\nchannel.exchange_declare(exchange</span>=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">topic_xx</span><span style=\"color: #800000;\">\"</span>, exchange_type=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">topic</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\nresult </span>= channel.queue_declare(exclusive=<span style=\"color: #000000;\">True)\nqueue_name </span>=<span style=\"color: #000000;\"> result.method.queue\n\nbinding_keys </span>= [<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">i.#</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">*.love.*</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">]\n\n</span><span style=\"color: #0000ff;\">for</span> binding_key <span style=\"color: #0000ff;\">in</span><span style=\"color: #000000;\"> binding_keys:\n    </span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 让exchange和queue进行绑定，并且指定queue绑定密钥</span>\n    channel.queue_bind(exchange=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">topic_xx</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n                       queue</span>=<span style=\"color: #000000;\">queue_name,\n                       routing_key</span>=<span style=\"color: #000000;\">binding_key)\n\n</span><span style=\"color: #0000ff;\">def</span><span style=\"color: #000000;\"> callback(ch, method, properties, body):\n    </span><span style=\"color: #0000ff;\">print</span>(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">消费者接收到了任务：%s</span><span style=\"color: #800000;\">\"</span> % body.decode(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">utf8</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">))\n    </span><span style=\"color: #0000ff;\">print</span><span style=\"color: #000000;\">(method.routing_key)\n\nchannel.basic_consume(callback, queue</span>=queue_name, no_ack=<span style=\"color: #000000;\">True)\nchannel.start_consuming()</span></pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p><span style=\"background-color: #ff9900;\"><strong>消费者2：</strong></span></p>\n<p><strong>队列绑定秘钥：<span style=\"background-color: #ff99cc;\">i.*</span></strong></p>\n<p>无法匹配到路由秘钥，丢失消息。</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'908d66ce-1416-473b-9b52-589e77185304\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_908d66ce-1416-473b-9b52-589e77185304\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_908d66ce-1416-473b-9b52-589e77185304\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_908d66ce-1416-473b-9b52-589e77185304\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> pika\n\ncredentials </span>= pika.PlainCredentials(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">123456</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\nconnection </span>= pika.BlockingConnection(pika.ConnectionParameters(host=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">localhost</span><span style=\"color: #800000;\">\"</span>, port=5672, credentials=<span style=\"color: #000000;\">credentials))\nchannel </span>=<span style=\"color: #000000;\"> connection.channel()\nchannel.exchange_declare(exchange</span>=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">topic_xx</span><span style=\"color: #800000;\">\"</span>, exchange_type=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">topic</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\nresult </span>= channel.queue_declare(exclusive=<span style=\"color: #000000;\">True)\nqueue_name </span>=<span style=\"color: #000000;\"> result.method.queue\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 让exchange和queue进行绑定，并且指定queue绑定密钥</span>\nchannel.queue_bind(exchange=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">topic_xx</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n                   queue</span>=<span style=\"color: #000000;\">queue_name,\n                   routing_key</span>=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">i.*</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\n\n</span><span style=\"color: #0000ff;\">def</span><span style=\"color: #000000;\"> callback(ch, method, properties, body):\n    </span><span style=\"color: #0000ff;\">print</span>(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">消费者接收到了任务：%s</span><span style=\"color: #800000;\">\"</span> % body.decode(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">utf8</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">))\n    </span><span style=\"color: #0000ff;\">print</span><span style=\"color: #000000;\">(method.routing_key)\n\nchannel.basic_consume(callback, queue</span>=queue_name, no_ack=<span style=\"color: #000000;\">True)\nchannel.start_consuming()</span></pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<h2><span style=\"background-color: #00ccff;\">七</span><span style=\"background-color: #00ccff;\">、RPC（远程过程调用）</span></h2>\n<p><strong>将一个函数运行在远程计算机上并且等待获取那里的结果，这个称作远程过程调用（Remote Procedure Call）或者 RPC。RPC<strong>是一个计算机通信协议。</strong></strong></p>\n<h3><span style=\"background-color: #99cc00;\"><strong>通俗理解RPC：</strong></span></h3>\n<p>将计算机服务运行理解为厨师做饭，厨师想做苦瓜炒鸡蛋，则厨师需要：洗和切苦瓜、拌鸡蛋、炒等。他一个人完成所有的事，如同一台计算机做所有的事，效率低下。</p>\n<p><strong><span style=\"font-family: monospace;\">RPC</span>应用</strong><strong>：</strong></p>\n<p>老板有钱了，请了专职员工，各司其职，不再是厨师一个人单打独斗，而是备菜师傅准备苦瓜、鸡蛋、调料，切菜师傅切苦瓜、拌鸡蛋，厨师只负责炒好即可。</p>\n<p>制作苦瓜炒鸡蛋：</p>\n<ul>\n<li>备菜师傅 -&gt; 备好菜、调料</li>\n<li>切菜师傅 -&gt; 切好菜</li>\n<li>厨师 -&gt; 炒好菜</li>\n</ul>\n<p>此时一件事好多人在做，厨师就得和其他人沟通，通知备菜、切菜师傅的这个动作就是远程过程调用（RPC）。</p>\n<p class=\"md-end-block\">这个过程在计算机系统中，比如一个电商的下单过程，涉及物流、支付、库存、红包等多个系统，多个系统又在多个服务器上，由不同的技术团队负责，整个下单过程，需要所有团队进行远程调用。</p>\n<p class=\"md-end-block\">下单：</p>\n<ul>\n<li class=\"md-end-block\">库存 -&gt; 减少库存</li>\n<li class=\"md-end-block\">支付 -&gt; 扣款</li>\n<li class=\"md-end-block\">红包 -&gt; 减免红包</li>\n<li class=\"md-end-block\">物流 -&gt; 生成订单</li>\n</ul>\n<h3><span style=\"background-color: #99cc00;\"><strong>RPC到底是什么？</strong></span></h3>\n<p>RPC指的是在计算机A上的进程，调用另外一台计算机B的进程，A上的进程被挂起，B上的被调用进程开始执行后，产生返回值给A，A继续执行。调用方可以通过参数将信息传递给被调用方，而后通过返回结果得到信息，这个过程对于开发人员来说是透明的。</p>\n<p>如同厨师一样，服务员把菜单给后厨，厨师告诉洗菜人，备菜人，开始工作，完成工作后，整个过程对于服务员是透明的，他完全不用管后厨是怎么把菜做好的。</p>\n<p>由于服务在不同的机器上，远程调用必经网络通信，调用服务必须写一坨网络通信代码，很容易出错且很复杂，因此就出现了RPC框架。</p>\n<div class=\"cnblogs_Highlighter\">\n<pre class=\"brush:python;gutter:true;\">阿里巴巴   dubbo    java\n新浪      motan    java\n谷歌      grpc     多语言\nApache   thrift   多语言\n</pre>\n</div>\n<p><strong>RPC封装了数据的序列化，反序列化，以及传输协议。</strong></p>\n<h3 class=\"md-end-block md-heading\"><span style=\"background-color: #99cc00;\">Python实现RPC</span></h3>\n<p>利用RabbitMQ构建一个RPC系统，包含了客户端和RPC服务器，依旧使用pika模块。</p>\n<h3 class=\"md-end-block md-heading\"><span style=\"background-color: #99cc00;\">Callback queue 回调队列</span></h3>\n<p class=\"md-end-block\">一个客户端向服务器发送请求，服务器端处理请求后，将其处理结果保存在一个存储体中。而客户端为了获得处理结果，那么客户在向服务器发送请求时，同时发送一个回调队列地址reply_to。<code><br/></code></p>\n<h3 class=\"md-end-block md-heading\"><span style=\"background-color: #99cc00;\">Correlation id 关联标识</span></h3>\n<p>一个客户端可能会发送多个请求给服务器，当服务器处理完后，客户端无法辨别在回调队列中的响应具体和哪个请求是对应的。为了处理这种情况，客户端在发送每个请求时，同时会附带一个独有correlation_id属性，这样客户端在回调队列中根据correlation_id字段的值就可以分辨此响应属于哪个请求。</p>\n<p>客户端发送请求：某个应用将请求信息交给客户端，然后客户端发送RPC请求，在发送RPC请求到RPC请求队列时，客户端至少发送带有reply_to以及correlation_id两个属性的信息。</p>\n<p>服务器端工作流程：等待接受客户端发来RPC请求，当请求出现的时候，服务器从RPC请求队列中取出请求，然后处理后，将响应发送到reply_to指定的回调队列中。</p>\n<p>客户端接受处理结果：客户端等待回调队列中出现响应，当响应出现时，它会根据响应中correlation_id字段的值，将其返回给对应的应用。</p>\n<p><strong>过程：</strong></p>\n<ul>\n<li>启动RPC服务端，等待接收数据到来，来了之后就进行处理，再将结果丢进队列</li>\n<li>启动RPC客户端，发起请求</li>\n</ul>\n<p><span style=\"background-color: #ff9900;\"><strong>rpc_server.py</strong></span></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> pika\n\ncredentials </span>= pika.PlainCredentials(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">123456</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\nconnection </span>= pika.BlockingConnection(pika.ConnectionParameters(host=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">localhost</span><span style=\"color: #800000;\">\"</span>, port=5672, credentials=<span style=\"color: #000000;\">credentials))\nchannel </span>=<span style=\"color: #000000;\"> connection.channel()\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 声明RPC请求队列</span>\nchannel.queue_declare(queue=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">rpc_xx</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 模拟一个进程，例如切菜师傅，等着洗菜师傅传递数据</span>\n<span style=\"color: #0000ff;\">def</span><span style=\"color: #000000;\"> add(n):\n    </span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 对RPC请求队列中的请求进行处理</span>\n    n += 100\n    <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> n\n\n</span><span style=\"color: #0000ff;\">def</span><span style=\"color: #000000;\"> on_request(ch, method, props, body):\n    </span><span style=\"color: #0000ff;\">print</span><span style=\"color: #000000;\">(body, type(body))\n    n </span>=<span style=\"color: #000000;\"> int(body)\n    </span><span style=\"color: #0000ff;\">print</span>(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">正在处理add(%s)</span><span style=\"color: #800000;\">\"</span> %<span style=\"color: #000000;\"> n)\n    </span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 调用数据处理方法</span>\n    response =<span style=\"color: #000000;\"> add(n)\n    </span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 将处理结果(响应)发送到回调队列</span>\n    ch.basic_publish(exchange=<span style=\"color: #800000;\">\"\"</span><span style=\"color: #000000;\">,\n                     </span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> reply_to代表回复目标</span>\n                     routing_key=<span style=\"color: #000000;\">props.reply_to,\n                     </span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> correlation_id（关联标识），用来将RPC的响应和请求关联起来。</span>\n                     properties=pika.BasicProperties(correlation_id=<span style=\"color: #000000;\">props.correlation_id),\n                     body</span>=<span style=\"color: #000000;\">str(response))\n    ch.basic_ack(delivery_tag</span>=<span style=\"color: #000000;\">method.delivery_tag)\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 负载均衡，同一时刻发送给该服务器的请求不超过一个</span>\nchannel.basic_qos(prefetch_count=1<span style=\"color: #000000;\">)\nchannel.basic_consume(on_request, queue</span>=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">rpc_xx</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #0000ff;\">print</span>(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">等待接收RPC请求</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 开始消费</span>\nchannel.start_consuming()</pre>\n</div>\n<p><span style=\"background-color: #ff9900;\"><strong>rpc_client.py</strong></span></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> pika\n</span><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> uuid\n\n</span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> RpcClient(object):\n    </span><span style=\"color: #0000ff;\">def</span> <span style=\"color: #800080;\">__init__</span><span style=\"color: #000000;\">(self):\n        </span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 客户端启动时，创建回调队列，会开启会话用于发送RPC请求以及接受响应</span>\n        <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 建立连接，指定服务器的ip地址</span>\n        credentials = pika.PlainCredentials(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">123456</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\n        self.connection </span>= pika.BlockingConnection(pika.ConnectionParameters(host=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">localhost</span><span style=\"color: #800000;\">\"</span>, port=5672, credentials=<span style=\"color: #000000;\">credentials))\n        </span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 建立一个会话，每个channel代表一个会话任务</span>\n        self.channel =<span style=\"color: #000000;\"> self.connection.channel()\n        </span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 声明回调队列，再次声明的原因是，服务器和客户端可能先后开启，该声明是幂等的，多次声明，但只生效一次</span>\n        <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> exclusive=True 是指只对首次声明它的连接可见</span>\n        <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> exclusive=True 会在连接断开的时候，自动删除该队列</span>\n        result = self.channel.queue_declare(exclusive=<span style=\"color: #000000;\">True)\n        </span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 将次队列指定为当前客户端的回调队列</span>\n        self.callback_queue =<span style=\"color: #000000;\"> result.method.queue\n        </span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 客户端订阅回调队列，当回调队列中有响应时，调用\"on_response\"方法对响应进行处理</span>\n        self.channel.basic_consume(self.on_response, queue=self.callback_queue, no_ack=<span style=\"color: #000000;\">True)\n\n    </span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 对回调队列中的响应进行处理的函数</span>\n    <span style=\"color: #0000ff;\">def</span><span style=\"color: #000000;\"> on_response(self, ch, method, props, body):\n        </span><span style=\"color: #0000ff;\">if</span> self.corr_id ==<span style=\"color: #000000;\"> props.correlation_id:\n            self.response </span>=<span style=\"color: #000000;\"> body\n\n    </span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 发出RPC请求</span>\n    <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 例如这里服务端就是一个切菜师傅，菜切好了，需要传递给洗菜师傅，这个过程是发送rpc请求</span>\n    <span style=\"color: #0000ff;\">def</span><span style=\"color: #000000;\"> call(self, n):\n        </span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 初始化 response</span>\n        self.response =<span style=\"color: #000000;\"> None\n        </span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 生成correlation_id关联标识，通过python的uuid库，生成全局唯一标识ID，保证时间空间唯一性</span>\n        self.corr_id =<span style=\"color: #000000;\"> str(uuid.uuid4())\n        </span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 发送RPC请求内容到RPC请求队列\"rpc_xx\"，同时发送的还有\"reply_to\"和\"correlation_id\"</span>\n        self.channel.basic_publish(exchange=<span style=\"color: #800000;\">\"\"</span><span style=\"color: #000000;\">,\n                                   routing_key</span>=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">rpc_xx</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n                                   properties</span>=<span style=\"color: #000000;\">pika.BasicProperties(\n                                       reply_to</span>=<span style=\"color: #000000;\">self.callback_queue,\n                                       correlation_id</span>=<span style=\"color: #000000;\">self.corr_id,\n                                   ),\n                                   body</span>=<span style=\"color: #000000;\">str(n))\n        </span><span style=\"color: #0000ff;\">while</span> self.response <span style=\"color: #0000ff;\">is</span><span style=\"color: #000000;\"> None:\n            self.connection.process_data_events()\n        </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> self.response\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 建立客户端</span>\nrpc =<span style=\"color: #000000;\"> RpcClient()\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 发送RPC请求，丢进rpc队列，等待客户端处理完毕，给与响应</span>\n<span style=\"color: #0000ff;\">print</span>(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">发送了请求sum(100)</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\nresponse </span>= rpc.call(100<span style=\"color: #000000;\">)\n</span><span style=\"color: #0000ff;\">print</span>(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">得到远程结果响应：%s</span><span style=\"color: #800000;\">\"</span> % response)</pre>\n</div>\n<p> </p>', 28);
INSERT INTO `blog_articledetail` VALUES (29, '<h2><span style=\"background-color: #00ccff;\">一、Cnetos7安装mongodb</span></h2>\n<h3><span style=\"background-color: #99cc00;\">1.1 安装</span></h3>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'bf6fadf5-e456-4fd6-8d56-ed5fc857ffc3\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_bf6fadf5-e456-4fd6-8d56-ed5fc857ffc3\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_bf6fadf5-e456-4fd6-8d56-ed5fc857ffc3\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_bf6fadf5-e456-4fd6-8d56-ed5fc857ffc3\">\n<pre>cd /opt/<span style=\"color: #000000;\">\nwget https:</span>//fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-4.0.7<span style=\"color: #000000;\">.tgz\ntar xzvf mongodb</span>-linux-x86_64-rhel70-4.0.7<span style=\"color: #000000;\">.tgz\nmv mongodb</span>-linux-x86_64-rhel70-4.0.7<span style=\"color: #000000;\"> mongodb\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 创建数据库目录</span>\nmkdir -p /opt/mongodb/data/<span style=\"color: #000000;\">db \nmkdir </span>-p /opt/mongodb/data/<span style=\"color: #000000;\">log\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 创建配置文件</span>\ncd /opt/<span style=\"color: #000000;\">mongodb\nvim mongod.conf\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 加入如下内容</span>\n<span style=\"color: #800000;\">\"\"\"</span><span style=\"color: #800000;\">\nbind_ip=0.0.0.0                             # mongodb所绑定的ip地址\nport=27017                                  # 默认端口\ndbpath=/opt/mongodb/data/db                 # 数据库文件存放路径\nlogpath=/opt/mongodb/data/log/mongod.log    # 日志文件路径\nlogappend=true                              # 以追加的方式记录日志\nfork=true                                   # 以后台方式运行进程\n</span><span style=\"color: #800000;\">\"\"\"</span>\n<span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 添加环境变量</span>\nvim /etc/<span style=\"color: #000000;\">profile\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 加入</span>\nexport PATH=$PATH:/opt/mongodb/<span style=\"color: #000000;\">bin\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 让环境变量立即生效</span>\nsource /etc/profile</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<h3><span style=\"background-color: #99cc00;\">1.2 启动与连接</span></h3>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 启动服务端</span>\nmongod -<span style=\"color: #000000;\">f mongod.conf\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 连接</span>\n<span style=\"color: #000000;\">mongo\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 更多用法</span>\nmongod/mongo --help</pre>\n</div>\n<h2><span style=\"background-color: #00ccff;\">二、简介</span></h2>\n<p>MongoDB是用C++语言编写的非关系型数据库。特点是高性能、易部署、易使用，存储数据十分方便，主要特性有：</p>\n<ul>\n<li>面向集合存储，易于存储对象类型的数据</li>\n<li>模式自由</li>\n<li>支持动态查询</li>\n<li>支持完全索引，包含内部对象</li>\n<li>支持复制和故障恢复</li>\n<li>使用高效的二进制数据存储，包括大型对象</li>\n<li>文件存储格式为BSON (一种JSON的扩展)</li>\n</ul>\n<h3 id=\"mongodb基本概念\"><span style=\"background-color: #99cc00;\">2.1 MongoDB基本概念</span></h3>\n<ul>\n<li>文档 (document) 是MongoDB中数据的基本单元，类似于关系型数据库系统中的行。</li>\n<li>集合 (collection) 就是一组文档，如果说 MongoDB 中的文档类似于关系型数据库中的行，那么集合就如同表。</li>\n<li>MongoDB 的单个计算机可以容纳多个独立的数据库，每一个数据库都有自己的集合和权限。</li>\n<li>MongoDB 自带简洁但功能强大的 JavaScript shell，这个工具对于管理MongoDB实例和操作数据作用非常大。</li>\n<li>每一个文档都有一个特殊的键 \"_id\"，它在文档所处的集合中是唯一的，相当于关系数据库中的表的主键。</li>\n</ul>\n<h2><img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1468833/201903/1468833-20190329031037610-593148574.png\"/></h2>\n<h3><span style=\"background-color: #99cc00;\">2.2 文档（Document）</span></h3>\n<p>文档是一组键值（key-value）对（即 BSON）。MongoDB 的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，这与关系型数据库有很大的区别，也是 MongoDB 非常突出的特点。</p>\n<p>一个简单的文档例子如下：</p>\n<div class=\"cnblogs_code\">\n<pre>{<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span>:<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>,<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">age</span><span style=\"color: #800000;\">\"</span>:18}</pre>\n</div>\n<p>需要注意的是：</p>\n<ul>\n<li>文档中的键/值对是有序的</li>\n<li>文档中的值不仅可以是在双引号里面的字符串，还可以是其他几种数据类型 (甚至可以是整个嵌入的文档)</li>\n<li>MongoDB区分类型和大小写</li>\n<li>MongoDB的文档不能有重复的键</li>\n<li>文档的键是字符串，除了少数例外情况，键可以使用任意UTF-8字符</li>\n</ul>\n<p>文档键命名规范：</p>\n<ul>\n<li>键不能含有\\0 (空字符)，这个字符用来表示键的结尾</li>\n<li><strong>.</strong> 和 <strong>$</strong> 有特别的意义，只有在特定环境下才能使用</li>\n<li>以下划线 \"_\" 开头的键是保留的 (不是严格要求的)</li>\n</ul>\n<h3><span style=\"background-color: #99cc00;\">2.3 集合（Collection）</span></h3>\n<p>集合就是 MongoDB 文档组，类似于 RDBMS (关系数据库管理系统：Relational Database Management System) 中的表。</p>\n<p>集合存在于数据库中，集合没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据，但通常情况下我们插入集合的数据都会有一定的关联性。</p>\n<p>比如，我们可以将以下不同数据结构的文档插入到集合中：</p>\n<div class=\"cnblogs_code\">\n<pre>{<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">site</span><span style=\"color: #800000;\">\"</span>:<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">www.baidu.com</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">}\n{</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">site</span><span style=\"color: #800000;\">\"</span>:<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">www.google.com</span><span style=\"color: #800000;\">\"</span>,<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span>:<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Google</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">}\n{</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">site</span><span style=\"color: #800000;\">\"</span>:<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">www.runoob.com</span><span style=\"color: #800000;\">\"</span>,<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span>:<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">菜鸟教程</span><span style=\"color: #800000;\">\"</span>,<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">num</span><span style=\"color: #800000;\">\"</span>:5}</pre>\n</div>\n<p>当第一个文档插入时，集合就会被创建。</p>\n<p>合法的集合名：</p>\n<ul>\n<li>集合名不能是空字符串\"\"</li>\n<li>集合名不能含有\\0 (空字符)，这个字符表示集合名的结尾</li>\n<li>集合名不能以 \"system.\" 开头，这是为系统集合保留的前缀</li>\n<li>用户创建的集合名字不能含有保留字符。有些驱动程序的确支持在集合名里面包含，这是因为某些系统生成的集合中包含该字符。除非你要访问这种系统创建的集合，否则千万不要在名字里出现$</li>\n</ul>\n<h3 id=\"mongodb数据类型\"><span style=\"background-color: #99cc00;\">2.4 MongoDB数据类型</span></h3>\n<p><img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1468833/201903/1468833-20190329033003032-117144405.png\"/></p>\n<div class=\"cnblogs_code\">\n<pre>String     {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">xx</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">boo</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">}\nInteger    {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">xx</span><span style=\"color: #800000;\">\"</span>: 10<span style=\"color: #000000;\">}\nBoolean    {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">xx</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">: true}\nDouble     {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">xx</span><span style=\"color: #800000;\">\"</span>: 1.11<span style=\"color: #000000;\">}\nArray      {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">xx</span><span style=\"color: #800000;\">\"</span>: [<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">a</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">b</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">]}\nObject     {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">id</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, Objectid()}\nnull       {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">xx</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">: null}\nDate       {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">xx</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">: new Date()}\nCode       {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">xx</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">: function() {}}\nRegular expression    {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">foo</span><span style=\"color: #800000;\">\"</span>: /foobar/i}</pre>\n</div>\n<p><span style=\"background-color: #ff9900;\"><strong>几种重要的数据类型：</strong></span></p>\n<p><strong>ObjectId：</strong></p>\n<p>ObjectId 类似唯一主键，可以很快的去生成和排序，包含 12 bytes，含义是：</p>\n<ul>\n<li>前 4 个字节表示创建 <strong>unix</strong> 时间戳,格林尼治时间 <strong>UTC</strong> 时间，比北京时间晚了 8 个小时</li>\n<li>接下来的 3 个字节是机器标识码</li>\n<li>紧接的两个字节由进程 id 组成 PID</li>\n<li>最后三个字节是随机数</li>\n</ul>\n<p><img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1468833/201903/1468833-20190329033814505-957331389.png\"/></p>\n<p>MongoDB 中存储的文档必须有一个 _id 键。这个键的值可以是任何类型的，默认是个 ObjectId 对象。</p>\n<p>由于 ObjectId 中保存了创建的时间戳，所以你不需要为你的文档保存时间戳字段，你可以通过 getTimestamp 函数来获取文档的创建时间：</p>\n<div class=\"cnblogs_code\">\n<pre>&gt; var newObject =<span style=\"color: #000000;\"> ObjectId()\n</span>&gt;<span style=\"color: #000000;\"> newObject.getTimestamp()\nISODate(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">2017-11-25T07:21:10Z</span><span style=\"color: #800000;\">\"</span>)</pre>\n</div>\n<p>ObjectId 转为字符串</p>\n<div class=\"cnblogs_code\">\n<pre>&gt;<span style=\"color: #000000;\"> newObject.str\n5a1919e63df83ce79df8b38f</span></pre>\n</div>\n<p><strong>字符串：</strong></p>\n<p>BSON 字符串都是 UTF-8 编码。</p>\n<p><strong>时间戳：</strong></p>\n<p>BSON 有一个特殊的时间戳类型用于 MongoDB 内部使用，与普通的日期类型不相关。 时间戳值是一个 64 位的值。其中：</p>\n<ul>\n<li>前32位是一个 time_t 值 (与Unix新纪元相差的秒数)</li>\n<li>后32位是在某秒中操作的一个递增的<code>序数</code></li>\n</ul>\n<p>在单个 mongod 实例中，时间戳值通常是唯一的。</p>\n<p>在复制集中，oplog 有一个 ts 字段。这个字段中的值使用BSON时间戳表示了操作时间。</p>\n<p>BSON 时间戳类型主要用于 MongoDB 内部使用。在大多数情况下的应用开发中，你可以使用 BSON 日期类型。</p>\n<p><strong>日期：</strong></p>\n<p>表示当前距离 Unix新纪元 (1970年1月1日) 的毫秒数。日期类型是有符号的，负数表示 1970 年之前的日期。</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'9b2b4f57-b413-485a-a354-ed2523a25212\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_9b2b4f57-b413-485a-a354-ed2523a25212\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_9b2b4f57-b413-485a-a354-ed2523a25212\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_9b2b4f57-b413-485a-a354-ed2523a25212\">\n<pre>&gt; var mydate1 = new Date()     <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 格林尼治时间</span>\n&gt;<span style=\"color: #000000;\"> mydate1\nISODate(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">2018-03-04T14:58:51.233Z</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\n</span>&gt;<span style=\"color: #000000;\"> typeof mydate1\nobject\n\n</span>&gt; var mydate2 = ISODate()        <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 格林尼治时间</span>\n&gt;<span style=\"color: #000000;\"> mydate2\nISODate(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">2018-03-04T15:00:45.479Z</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\n</span>&gt;<span style=\"color: #000000;\"> typeof mydate2\nobject</span></pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>这样创建的时间是日期类型，可以使用 JS 中的 Date 类型的方法。</p>\n<p>返回一个时间类型的字符串：</p>\n<div class=\"cnblogs_code\">\n<pre>&gt; var mydate1str =<span style=\"color: #000000;\"> mydate1.toString()\n</span>&gt;<span style=\"color: #000000;\"> mydate1str\nSun Mar </span>04 2018 14:58:51 GMT+0000<span style=\"color: #000000;\"> (UTC) \n</span>&gt;<span style=\"color: #000000;\"> typeof mydate1str\nstring</span></pre>\n</div>\n<p>或者</p>\n<div class=\"cnblogs_code\">\n<pre>&gt;<span style=\"color: #000000;\"> Date()\nSun Mar </span>04 2018 15:02:59 GMT+0000 (UTC)   </pre>\n</div>\n<h2><span style=\"background-color: #00ccff;\">三、mongodb操作</span></h2>\n<h3><span style=\"background-color: #99cc00;\">3.1 账号管理</span></h3>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'57d2b426-e354-43de-a30a-30c9b6f6ea82\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_57d2b426-e354-43de-a30a-30c9b6f6ea82\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_57d2b426-e354-43de-a30a-30c9b6f6ea82\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_57d2b426-e354-43de-a30a-30c9b6f6ea82\">\n<pre><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\">################### 创建用户 ####################</span>\n<span style=\"color: #000000;\">use admin\ndb.createUser({ \n    user: </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">root</span><span style=\"color: #800000;\">\"</span>,                            <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 这个root可以随便写</span>\n    pwd: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">123</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, \n　　 roles: [{role: </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">root</span><span style=\"color: #800000;\">\"</span>, db: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">admin</span><span style=\"color: #800000;\">\"</span>}]    <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 权限，role是root说明是管理员</span>\n<span style=\"color: #000000;\">})\n\nuse test\ndb.createUser({\n　　　user: </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n　　　pwd: </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">123456</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, \n　　　roles: [\n        {role: </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">readWrite</span><span style=\"color: #800000;\">\"</span>, db: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">db1</span><span style=\"color: #800000;\">\"</span>},      <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 针对db1库有读写权限，操作自己的库有读写权限</span>\n　　　　 {role: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">read</span><span style=\"color: #800000;\">\"</span>, db: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">db2</span><span style=\"color: #800000;\">\"</span>}            <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 针对db2库读权限，操作其他库有读权限</span>\n<span style=\"color: #000000;\">    ] \n})\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\">################### 登录认证 ####################</span><span style=\"color: #008000;\">\n#</span><span style=\"color: #008000;\"> 连接时认证</span>\nmongo --host 127.0.0.1 --port 27017 --authenticationDatabase <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">数据库名</span><span style=\"color: #800000;\">\"</span> -u <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">账号</span><span style=\"color: #800000;\">\"</span> -<span style=\"color: #000000;\">p\n输入密码\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 登录后认证</span>\nmongo --host 127.0.0.1 --port 27017<span style=\"color: #000000;\">\nuse 数据库名\ndb.auth(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">账号</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">密码</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\">################### 查看所有账号 ####################</span>\n<span style=\"color: #000000;\">use admin\ndb.system.users.find().pretty()</span></pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'3ff4d7a3-d716-4636-85eb-d7c323c10c33\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_3ff4d7a3-d716-4636-85eb-d7c323c10c33\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_3ff4d7a3-d716-4636-85eb-d7c323c10c33\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_3ff4d7a3-d716-4636-85eb-d7c323c10c33\">\n<pre><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> MongoDB 内建角色介绍</span>\nhttps://docs.mongodb.org/manual/reference/built-<span style=\"color: #0000ff;\">in</span>-roles/\n<span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> MongoDB 权限操作列表</span>\nhttps://docs.mongodb.org/manual/reference/privilege-actions/<span style=\"color: #008000;\">#</span><span style=\"color: #008000;\">security-user-actions</span><span style=\"color: #008000;\">\n#</span><span style=\"color: #008000;\"> MongoDB 角色管理方法</span>\nhttps://docs.mongodb.org/manual/reference/method/js-role-management/\n<span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> MongoDB 用户管理方法</span>\nhttps://docs.mongodb.org/manual/reference/method/js-user-management/</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">相关链接</span></div>\n<h3><span style=\"background-color: #99cc00;\"><strong>3.2 <strong>数据库的增删查</strong></strong></span></h3>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'119412c0-eefb-4a62-a0d2-91258ad6cfa0\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_119412c0-eefb-4a62-a0d2-91258ad6cfa0\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_119412c0-eefb-4a62-a0d2-91258ad6cfa0\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_119412c0-eefb-4a62-a0d2-91258ad6cfa0\">\n<pre><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 增</span>\nuse db1               <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 切换/新增数据库</span><span style=\"color: #008000;\">\n#</span><span style=\"color: #008000;\"> 查            　　　　　　　 </span>\nshow dbs              <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 查看所有数据库</span>\ndb                    <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 查看当前数据库</span><span style=\"color: #008000;\">\n#</span><span style=\"color: #008000;\"> 删</span>\ndb.dropDatabase()     <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 删除当前数据库</span></pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<h3><span style=\"background-color: #99cc00;\"><strong>3.3 集合（表）的增删查</strong></span></h3>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'ca327463-fb76-4016-bd27-0ceece129eae\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_ca327463-fb76-4016-bd27-0ceece129eae\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_ca327463-fb76-4016-bd27-0ceece129eae\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_ca327463-fb76-4016-bd27-0ceece129eae\">\n<pre><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 增</span>\n<span style=\"color: #000000;\">use test\n当第一个文档插入时，集合就会被创建\ndb.table1.insert({name: </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>, age: 18<span style=\"color: #000000;\">})\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 删</span>\n<span style=\"color: #000000;\">db.集合名称.drop()\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 查</span>\n<span style=\"color: #000000;\">show collections\nshow tables</span></pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<h3><span style=\"background-color: #99cc00;\">3.4 文档（数据记录）的增删改查</span></h3>\n<h3><strong><span style=\"background-color: #ff9900;\">新增</span></strong></h3>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'025e7329-8942-4771-96e4-01a359945096\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_025e7329-8942-4771-96e4-01a359945096\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_025e7329-8942-4771-96e4-01a359945096\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_025e7329-8942-4771-96e4-01a359945096\">\n<pre>user0 = {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">xx</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">age</span><span style=\"color: #800000;\">\"</span>: 10<span style=\"color: #000000;\">}\nuser1 </span>= {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">oo</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">age</span><span style=\"color: #800000;\">\"</span>: 20<span style=\"color: #000000;\">}\ndb.user.insert(user0)\ndb.user.insertMany([user0, user1])\n\ndb.集合名称.insert()  </span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 插入数据，_id存在就报错</span>\ndb.集合名称.save()    <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 插入数据，_id存在就更新数据</span></pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<h3><strong><span style=\"background-color: #ff9900;\">删除</span></strong></h3>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'def14c9c-9e37-454b-b5f7-e26a31b9a271\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_def14c9c-9e37-454b-b5f7-e26a31b9a271\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_def14c9c-9e37-454b-b5f7-e26a31b9a271\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_def14c9c-9e37-454b-b5f7-e26a31b9a271\">\n<pre>db.collection.deleteOne(&lt;filter&gt;, {writeConcern： &lt;document&gt;, collat​​ion： &lt;document&gt;<span style=\"color: #000000;\">})\ndb.collection.deleteMany(</span>&lt;filter&gt;, {writeConcern： &lt;document&gt;, collat​​ion： &lt;document&gt;<span style=\"color: #000000;\">})\ndb.collection.remove(\n    </span>&lt;query&gt;<span style=\"color: #000000;\">, \n    {\n        justOne: </span>&lt;boolean&gt;<span style=\"color: #000000;\">,\n        writeConcern：</span>&lt;document&gt;<span style=\"color: #000000;\">，\n        collat​​ion：</span>&lt;document&gt;<span style=\"color: #000000;\"> \n    }\n)\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 参数</span>\n<span style=\"color: #000000;\">    query：使用查询运算符指定删除条件；要删除集合中的所有文档，传递空文档 {} 即可\n       justOne：可选，如果设为true或1，则只删除一条，默认为false，表示删除多条\n    writeConcern：可选\n    collation：可选，指定要用于操作的排序规则\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 示例</span>\ndb.collection.deleteOne({<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">})\ndb.collection.deleteMany({</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">})\ndb.user.remove({</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>}, {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">justOne</span><span style=\"color: #800000;\">\"</span>: true})</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<h3><span style=\"background-color: #ff9900;\"><strong>更改</strong></span></h3>\n<p><strong>语法介绍</strong></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'f3dab4c2-66c0-47bd-bb9f-290cf8867fd0\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_f3dab4c2-66c0-47bd-bb9f-290cf8867fd0\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_f3dab4c2-66c0-47bd-bb9f-290cf8867fd0\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_f3dab4c2-66c0-47bd-bb9f-290cf8867fd0\">\n<pre><span style=\"color: #000000;\">db.collection.updateOne(\n    </span>&lt;filter&gt;<span style=\"color: #000000;\">, \n    </span>&lt;update&gt;<span style=\"color: #000000;\">, \n    {    \n        upsert: </span>&lt;boolean&gt;<span style=\"color: #000000;\">,\n        writeConcern: </span>&lt;document&gt;<span style=\"color: #000000;\">,\n        collat​​ion: </span>&lt;document&gt;<span style=\"color: #000000;\">,\n        arrayFilters: [</span>&lt;filterdocument1&gt;<span style=\"color: #000000;\">, ...] \n    }\n)\n\ndb.collection.updateMany(</span>&lt;filter&gt;, &lt;update&gt;, &lt;options&gt;)  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 同上</span>\n<span style=\"color: #000000;\">\ndb.collection.update(\n    </span>&lt;query&gt;<span style=\"color: #000000;\">, \n    </span>&lt;update&gt;<span style=\"color: #000000;\">, \n    {    \n        upsert: </span>&lt;boolean&gt;<span style=\"color: #000000;\">,\n        multi: </span>&lt;boolean&gt;<span style=\"color: #000000;\">,\n        writeConcern: </span>&lt;document&gt;<span style=\"color: #000000;\">,\n        collat​​ion: </span>&lt;document&gt;<span style=\"color: #000000;\">,\n        arrayFilters: [</span>&lt;filterdocument1&gt;<span style=\"color: #000000;\">, ...] \n    }\n)\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 参数说明:</span>\n<span style=\"color: #000000;\">    query：查询条件\n    update：更新操作符\n    upsert：可选，如果设置为true，则在没有文档与查询条件匹配时创建新文档。默认值为false，未找到匹配项时不插入新文档\n    multi：可选，默认为false，代表只更新找到的第一条记录；设为true，代表更新找到的全部记录\n    writeConcern：可选，抛出异常的级别\n    collat​​ion：可选，指定要用于操作的排序规则\n    arrayFilters：可选，一组过滤器文档，用于确定要为阵列字段上的更新操作修改哪些数组元素\n\ndb.user.update({name: </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>}, {name: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pink</span><span style=\"color: #800000;\">\"</span>})             <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 更新一条，更新会覆盖原来全部内容</span>\ndb.user.update({name: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>}, {$set: {name: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pink</span><span style=\"color: #800000;\">\"</span>}})     <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 更新一条，更新指定对应键值对</span>\ndb.user.update({name: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>}, {$set: {name: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pink</span><span style=\"color: #800000;\">\"</span>}}, {upsert: true})  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 没有匹配成功，则新增一条；匹配成功，同上</span>\ndb.user.update({name: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>}, {$set: {name: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pink</span><span style=\"color: #800000;\">\"</span>}, {multi: true}})   <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 更新全部，multi只有和 $ 一起操作才有效</span>\n\n<span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 数据结构</span>\n<span style=\"color: #000000;\">{\n    name: </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, \n    age: </span>18<span style=\"color: #000000;\">, \n    gender: </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">male</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, \n    hobby: [</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">basketball</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">swimming</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">], \n    addr: {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">province</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">GuangDong</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">city</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">GuangZhou</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">}\n}\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 修改内嵌文档，把名字为pd的人所在的城市改成ShenZhen</span>\ndb.user.update({name: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>}, {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$set</span><span style=\"color: #800000;\">\"</span>: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">addr.city</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">ShenZhen</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">}})\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 把名字为pd的人的第2个爱好改成ping pong</span>\ndb.user.update({name: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>}, {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$set</span><span style=\"color: #800000;\">\"</span>: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">hobby.1</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">ping pong</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">}})\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 删除pd的地址，$unset</span>\ndb.user.update({name: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>}, {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$unset</span><span style=\"color: #800000;\">\"</span>: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">addr</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"\"</span>}})</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p><strong>增加与减少：$inc</strong></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'54e8d126-d9ad-42f7-9d56-fbfcc0316d81\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_54e8d126-d9ad-42f7-9d56-fbfcc0316d81\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_54e8d126-d9ad-42f7-9d56-fbfcc0316d81\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_54e8d126-d9ad-42f7-9d56-fbfcc0316d81\">\n<pre><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 把名字为pd的年龄增加2岁</span>\ndb.user.update({name: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>}, {$inc: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">age</span><span style=\"color: #800000;\">\"</span>: 2<span style=\"color: #000000;\">}}, {multi: true})\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 把名字为pd的年龄减少10岁</span>\ndb.user.update({name: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>}, {$inc: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">age</span><span style=\"color: #800000;\">\"</span>: -10}}, {multi: true})</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p><strong>添加删除数组内元素：$push、$pop、$pull</strong></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'f3e90e7b-50c6-4514-921d-f9d5eb89f91d\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_f3e90e7b-50c6-4514-921d-f9d5eb89f91d\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_f3e90e7b-50c6-4514-921d-f9d5eb89f91d\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_f3e90e7b-50c6-4514-921d-f9d5eb89f91d\">\n<pre><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 往数组内添加元素（$push）</span><span style=\"color: #008000;\">\n#</span><span style=\"color: #008000;\"> 为名字为pd的人添加一个爱好</span>\ndb.user.update({name: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>}, {$push: {hobby: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">swimming</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">}})\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 为名字为pd的人添加多个爱好</span>\ndb.user.update({name: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>}, {$push: {hobby: {$each: [<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">reading</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">writting</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">]}}})\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 按照位置且只能从开头或结尾删除元素（$pop）</span><span style=\"color: #008000;\">\n#</span><span style=\"color: #008000;\"> -1 从数组头部删除一个元素</span>\ndb.user.update({name: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>}, {$pop: {hobby: -1<span style=\"color: #000000;\">}})\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\">  1 从数组末尾删除一个元素</span>\ndb.user.update({name: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>}, {$pop: {hobby: 1<span style=\"color: #000000;\">}})\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 按照条件删除元素，\"$pull\" 把符合条件的统统删掉，而$pop只能从两端删</span>\ndb.user.update({name: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>}, {$pull: {hobby: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">reading</span><span style=\"color: #800000;\">\"</span>}}, {multi: true})</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p><strong>避免重复添加：$addToSet</strong></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'6b4ee931-cf81-4a4f-ac27-1f173d898954\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_6b4ee931-cf81-4a4f-ac27-1f173d898954\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_6b4ee931-cf81-4a4f-ac27-1f173d898954\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_6b4ee931-cf81-4a4f-ac27-1f173d898954\">\n<pre>db.urls.insert({_id: 1<span style=\"color: #000000;\">, urls: []})\n\ndb.urls.update({_id: </span>1}, {$addToSet: {urls:http://<span style=\"color: #000000;\">www.baidu.com}})\ndb.urls.update({_id: </span>1}, {$addToSet: {urls:http://<span style=\"color: #000000;\">www.baidu.com}})\ndb.urls.update({_id: </span>1}, {$addToSet: {urls:http://<span style=\"color: #000000;\">www.baidu.com}})\n\n\ndb.urls.update({_id: </span>1<span style=\"color: #000000;\">}, {\n    $addToSet: {\n        urls: {\n            $each: [\n                </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">http://www.baidu.com</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n                </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">http://www.baidu.com</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n                </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">http://www.xxxxx.com</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n            ]\n        }\n    }   \n})</span></pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<h3><span style=\"background-color: #ff9900;\"><strong>查询</strong></span></h3>\n<p><strong>基本查询</strong></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'9d6643b9-397c-4758-8489-e8ff189974bf\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_9d6643b9-397c-4758-8489-e8ff189974bf\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_9d6643b9-397c-4758-8489-e8ff189974bf\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_9d6643b9-397c-4758-8489-e8ff189974bf\">\n<pre><span style=\"color: #000000;\">db.collection.find().pretty()\ndb.collection.find()\ndb.collection.findOne()\ndb.collection.find({</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>})</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p><strong>比较运算符</strong></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'f609cadc-3e56-472a-83f6-f98fd42bf88f\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_f609cadc-3e56-472a-83f6-f98fd42bf88f\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_f609cadc-3e56-472a-83f6-f98fd42bf88f\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_f609cadc-3e56-472a-83f6-f98fd42bf88f\">\n<pre><span style=\"color: #000000;\">等于：{key: value} 本身就代表什么等于什么\n不等于：$ne\n小于：$lt\n小于等于：$lte\n大于：$gt\n大于等于：$gte\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 查找年龄小于18（其他类似）</span>\ndb.user.find({<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">age</span><span style=\"color: #800000;\">\"</span>: {$lt: 18}})</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p><strong>成员运算符</strong></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'9d2b7453-ee65-4a7a-908f-c21696267f51\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_9d2b7453-ee65-4a7a-908f-c21696267f51\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_9d2b7453-ee65-4a7a-908f-c21696267f51\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_9d2b7453-ee65-4a7a-908f-c21696267f51\">\n<pre>在：$<span style=\"color: #0000ff;\">in</span><span style=\"color: #000000;\">\n不在：$nin\ndb.user.find({</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">age</span><span style=\"color: #800000;\">\"</span>: {$<span style=\"color: #0000ff;\">in</span>: [10, 20<span style=\"color: #000000;\">]}})\ndb.user.find({</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span>: {$nin: [<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">xx</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">oo</span><span style=\"color: #800000;\">\"</span>]}})</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p><strong>逻辑运算符</strong></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'acc16f8d-5bab-47fe-bf10-e538dec4deb6\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_acc16f8d-5bab-47fe-bf10-e538dec4deb6\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_acc16f8d-5bab-47fe-bf10-e538dec4deb6\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_acc16f8d-5bab-47fe-bf10-e538dec4deb6\">\n<pre><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> and：写多个条件即可</span>\n<span style=\"color: #000000;\">查询姓名为pd且年龄大于等于18的用户\ndb.user.find({</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">age</span><span style=\"color: #800000;\">\"</span>: {$gte:10<span style=\"color: #000000;\">}})\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> or：使用 $or，值为数组</span>\n<span style=\"color: #000000;\">查询姓名为pd 或 年龄大于等于18的用户\ndb.user.find({$</span><span style=\"color: #0000ff;\">or</span>: [{<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>}, {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">age</span><span style=\"color: #800000;\">\"</span>: {$gte: 18<span style=\"color: #000000;\">}}]})\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> nor：使用 $nor，值为数组，对一个或多个查询表达式的数组执行逻辑运算，并选择 使数组中的所有查询表达式失败的文档</span>\ndb.user.find({$nor: [{<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>}, {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">age</span><span style=\"color: #800000;\">\"</span>: 18<span style=\"color: #000000;\">}]})\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> not：使用 $nor，语法：{field: {$not: {&lt;operator-expression&gt;}}}</span>\n<span style=\"color: #000000;\">查询姓名不在数组中的值\ndb.user.find({</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span>: {$<span style=\"color: #0000ff;\">not</span>: {$<span style=\"color: #0000ff;\">in</span>: [<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>]}}})</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p><strong>正则匹配</strong></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'957b5f5c-b4ee-4abd-acf5-e4f0c82a4245\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_957b5f5c-b4ee-4abd-acf5-e4f0c82a4245\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_957b5f5c-b4ee-4abd-acf5-e4f0c82a4245\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_957b5f5c-b4ee-4abd-acf5-e4f0c82a4245\">\n<pre><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> {&lt;field&gt;： /pattern/&lt;options&gt;}</span>\n<span style=\"color: #000000;\">查询姓名以p开头的数据\ndb.user.find({</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span>: /^p/<span style=\"color: #000000;\">})\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 使用 $regex</span>\n{&lt;field&gt;： {$regex： /pattern/, $options: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">&lt;options&gt;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">}} \n{</span>&lt;field&gt;： {$regex： <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pattern</span><span style=\"color: #800000;\">\"</span>, $options: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">&lt;options&gt;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">}} \n{</span>&lt;field&gt;： {$regex： /pattern/&lt;options&gt;<span style=\"color: #000000;\">}} \n查询姓名以a结尾的数据\ndb.user.find({</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span>: {$regex: /A$/, $options: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">i</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">}})\ndb.user.find({</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span>: {$regex: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">A$</span><span style=\"color: #800000;\">\"</span>, $options: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">i</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">}})\ndb.user.find({</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span>: {$regex: /A$/<span style=\"color: #000000;\">i}})\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> $options参数说明</span>\n<span style=\"color: #000000;\">    i：不区分大小写。\n    m：对于包含锚点的模式（即</span>^<span style=\"color: #000000;\">，对于开始，$结束），在每行的开头或结尾处匹配具有多行值的字符串。如果没有此选项，这些锚点将在字符串的开头或结尾处匹配。\n    x：$regex除非转义或包含在字符类中，否则</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">扩展</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">功能可忽略模式中的所有空格字符。\n    s：允许点字符（即.）匹配包括换行符在内的所有字符。</span></pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p><strong>limit和skip（分页）</strong></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'ab89ed82-e487-4c8c-8a5f-055059c1d63c\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_ab89ed82-e487-4c8c-8a5f-055059c1d63c\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_ab89ed82-e487-4c8c-8a5f-055059c1d63c\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_ab89ed82-e487-4c8c-8a5f-055059c1d63c\">\n<pre><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 方法limit()：用于读取指定数量的文档</span>\ndb.user.find().limit(2<span style=\"color: #000000;\">)\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 方法skip()：用于跳过指定数量的文档</span>\ndb.user.find().skip(2<span style=\"color: #000000;\">)\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 同时使用</span>\ndb.user.find().limit(2).skip(2<span style=\"color: #000000;\">)\n或\ndb.user.find().skip(</span>2).limit(2)</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p><strong>自定义查询</strong></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'f422984e-438a-48b7-8650-fb788c8a3787\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_f422984e-438a-48b7-8650-fb788c8a3787\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_f422984e-438a-48b7-8650-fb788c8a3787\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_f422984e-438a-48b7-8650-fb788c8a3787\">\n<pre><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 使用：$where后面写一个函数，返回满足条件的数据</span>\n<span style=\"color: #000000;\">查询年龄大于10的用户\ndb.user.find({\n    $where: function() {\n        </span><span style=\"color: #0000ff;\">return</span> this.age&gt;10<span style=\"color: #000000;\">;\n    }\n})\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> {\"_id\" :ObjectId(\"5c9e25b8e58eba05afa55e9f\"), \"name\" :\"pink\", \"age\": 10, \"gender\": \"女\"}</span><span style=\"color: #008000;\">\n#</span><span style=\"color: #008000;\"> 想要哪个字段就写1；非\"_d\"字段，不要不用写；不要\"_d\"字段，写0</span>\n<span style=\"color: #000000;\">db.user.find({\n    $where: function() {\n        </span><span style=\"color: #0000ff;\">return</span> this.age&lt;20<span style=\"color: #000000;\">;\n    }},\n    {name: </span>1, age: 1<span style=\"color: #000000;\">}\n)\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> {\"_id\" :ObjectId(\"5c9e25b8e58eba05afa55e9f\"), \"name\" :\"pink\", \"age\": 10}</span>\n<span style=\"color: #000000;\">\ndb.user.find({\n    $where: function() {\n        </span><span style=\"color: #0000ff;\">return</span> this.age&lt;20<span style=\"color: #000000;\">;\n    }},\n    {_id: 0, name: </span>1, age: 1<span style=\"color: #000000;\">}\n)\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> {\"name\": \"pink\", \"age\": 10}</span></pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p><strong>投影</strong></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'cf01a991-7790-4a3a-8f44-c522f8401dae\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_cf01a991-7790-4a3a-8f44-c522f8401dae\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_cf01a991-7790-4a3a-8f44-c522f8401dae\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_cf01a991-7790-4a3a-8f44-c522f8401dae\">\n<pre><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 在查询到的返回结果中，只选择必要的字段</span><span style=\"color: #008000;\">\n#</span><span style=\"color: #008000;\"> 参数为字段与值，值1表示显示，不显示不用写</span><span style=\"color: #008000;\">\n#</span><span style=\"color: #008000;\"> 特殊：对于 _id 字段默认是显示的，不显示写0</span>\ndb.user.find({}, {_id: 0, name: 1, age: 1})</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p><strong>排序</strong></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'e1ee6ccb-f186-4c74-a362-edbfb364d5cf\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_e1ee6ccb-f186-4c74-a362-edbfb364d5cf\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_e1ee6ccb-f186-4c74-a362-edbfb364d5cf\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_e1ee6ccb-f186-4c74-a362-edbfb364d5cf\">\n<pre><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 1代表升序排序，-1代表降序排序</span>\ndb.user.find().sort({age: 1<span style=\"color: #000000;\">})\ndb.user.find({age: {$gt: </span>20}}).sort({age: -1<span style=\"color: #000000;\">})\ndb.user.find({age: {$gt: </span>20}}, {_id: 0, name: 1}).sort({age: -1<span style=\"color: #000000;\">})\ndb.user.find().sort({age: </span>-1, gender: 1})</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p><strong>统计个数</strong></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'f5b7aa22-ed1c-42ab-ad4d-1c6316e547c3\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_f5b7aa22-ed1c-42ab-ad4d-1c6316e547c3\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_f5b7aa22-ed1c-42ab-ad4d-1c6316e547c3\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_f5b7aa22-ed1c-42ab-ad4d-1c6316e547c3\">\n<pre><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 方法count()用于统计结果集中文档的条数</span><span style=\"color: #008000;\">\n#</span><span style=\"color: #008000;\"> db.集合名称.find({条件}).count()</span><span style=\"color: #008000;\">\n#</span><span style=\"color: #008000;\"> db.集合名称.count({条件})</span>\ndb.user.find({age: 20<span style=\"color: #000000;\">}).count()\ndb.user.find({age: {$gt: </span>20<span style=\"color: #000000;\">}}).count()\ndb.user.count({age: </span>20})</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p><strong>去重</strong></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'9458b4df-519b-45b5-86bd-e24268edaefd\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_9458b4df-519b-45b5-86bd-e24268edaefd\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_9458b4df-519b-45b5-86bd-e24268edaefd\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_9458b4df-519b-45b5-86bd-e24268edaefd\">\n<pre><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 方法distinct()对数据进行去重</span><span style=\"color: #008000;\">\n#</span><span style=\"color: #008000;\"> db.集合名称.distinct(\"去重字段\")</span><span style=\"color: #008000;\">\n#</span><span style=\"color: #008000;\"> db.集合名称.distinct(\"去重字段\", {条件})</span>\ndb.user.distinct(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\ndb.user.distinct(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span>, {age: {$gt: 10}})</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<h2><span style=\"background-color: #00ccff;\">四、聚合操作</span></h2>\n<p><a href=\"https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/\" target=\"_blank\">https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/</a></p>\n<p>聚合 (aggregate) 是基于数据处理的聚合管道，每个文档通过一个由多个阶段 (stage) 组成的管道，可以对每个阶段的管道进行分组、过滤等功能，然后经过一系列的处理，输出相应的结果。</p>\n<div class=\"cnblogs_Highlighter\">\n<pre class=\"brush:python;gutter:true;\">db.集合名称.aggregate({管道: {表达式}})</pre>\n</div>\n<p><img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1468833/201903/1468833-20190330063802224-409899174.png\" width=\"600\"/></p>\n<h3><span style=\"background-color: #99cc00;\">常用管道</span></h3>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 在mongodb中，文档处理完毕后，通过管道进行下一次处理</span><span style=\"color: #008000;\">\n#</span><span style=\"color: #008000;\"> 常用管道如下：</span>\n$group        <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 将集合中的文档分组，可用于统计结果</span>\n$match        <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 过滤数据，只输出符合条件的文档</span>\n$project      <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 修改输入文档的结构，如重命名、增加、删除字段、创建计算结果</span>\n$sort         <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 将输入文档排序后输出</span>\n$limit        <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 限制聚合管道返回的文档数</span>\n$skip         <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 跳过指定数量的文档，并返回余下的文档</span>\n$unwind       <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 将数组类型的字段进行拆分</span></pre>\n</div>\n<h3><span style=\"background-color: #99cc00;\">表达式</span></h3>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 处理输入文档并输出</span><span style=\"color: #008000;\">\n#</span><span style=\"color: #008000;\"> 语法：表达式：\"$列名\"</span><span style=\"color: #008000;\">\n#</span><span style=\"color: #008000;\"> 常用表达式：</span>\n$sum        <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 计算总和，$sum:1表示以一倍计数</span>\n$avg        <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 计算平均值</span>\n$min        <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 获取最小值</span>\n$max        <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 获取最大值</span>\n$push       <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 在结果文档中插入值到一个数组中</span>\n$first      <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 根据资源文档的排序获取第一个文档数据</span>\n$last       <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 根据资源文档的排序获取最后一个文档数据</span></pre>\n</div>\n<h3><span style=\"background-color: #99cc00;\"><strong>聚合操作</strong></span></h3>\n<p><strong>准备数据</strong></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'362a86c0-d84e-4b21-a695-1dd4af9b518e\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_362a86c0-d84e-4b21-a695-1dd4af9b518e\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_362a86c0-d84e-4b21-a695-1dd4af9b518e\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_362a86c0-d84e-4b21-a695-1dd4af9b518e\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> datetime\n</span><span style=\"color: #0000ff;\">from</span> pymongo <span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> MongoClient\n\nclient </span>= MongoClient(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">mongodb://root:123456@localhost:27017</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\ntable </span>= client[<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">test</span><span style=\"color: #800000;\">\"</span>][<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">emp</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">]\n\nl </span>=<span style=\"color: #000000;\"> [\n    </span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 教学部</span>\n    (<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">凯隐</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">male</span><span style=\"color: #800000;\">\"</span>, 18, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">20170301</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">teacher</span><span style=\"color: #800000;\">\"</span>, 7300, 1<span style=\"color: #000000;\">),\n    (</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">纳尔</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">male</span><span style=\"color: #800000;\">\"</span>, 25, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">20150302</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">teacher</span><span style=\"color: #800000;\">\"</span>, 1000, 1<span style=\"color: #000000;\">),\n    (</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">艾克</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">male</span><span style=\"color: #800000;\">\"</span>, 36, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">20130305</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">teacher</span><span style=\"color: #800000;\">\"</span>, 8300, 1<span style=\"color: #000000;\">),\n    (</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">瑞文</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">male</span><span style=\"color: #800000;\">\"</span>, 42, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">20140701</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">teacher</span><span style=\"color: #800000;\">\"</span>, 3500, 1<span style=\"color: #000000;\">),\n    (</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">提莫</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">female</span><span style=\"color: #800000;\">\"</span>, 18, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">20110211</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">teacher</span><span style=\"color: #800000;\">\"</span>, 9000, 1<span style=\"color: #000000;\">),\n    (</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">露露</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">female</span><span style=\"color: #800000;\">\"</span>, 27, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">20160211</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">teacher</span><span style=\"color: #800000;\">\"</span>, 3000, 1<span style=\"color: #000000;\">),\n    </span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 销售部</span>\n    (<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">金克丝</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">female</span><span style=\"color: #800000;\">\"</span>, 48, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">20150311</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">sale</span><span style=\"color: #800000;\">\"</span>, 3000, 2<span style=\"color: #000000;\">),\n    (</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">戴安娜</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">female</span><span style=\"color: #800000;\">\"</span>, 38, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">20101101</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">sale</span><span style=\"color: #800000;\">\"</span>, 2000, 2<span style=\"color: #000000;\">),\n    (</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">丽桑卓</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">female</span><span style=\"color: #800000;\">\"</span>, 18, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">20110312</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">sale</span><span style=\"color: #800000;\">\"</span>, 1000, 2<span style=\"color: #000000;\">),\n    (</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">辛德拉</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">female</span><span style=\"color: #800000;\">\"</span>, 18, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">20160513</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">sale</span><span style=\"color: #800000;\">\"</span>, 3000, 2<span style=\"color: #000000;\">),\n    (</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">拉克丝</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">female</span><span style=\"color: #800000;\">\"</span>, 28, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">20170127</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">sale</span><span style=\"color: #800000;\">\"</span>, 4000, 2<span style=\"color: #000000;\">),\n    </span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 运营部</span>\n    (<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">德玛</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">male</span><span style=\"color: #800000;\">\"</span>, 28, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">20160311</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">operation</span><span style=\"color: #800000;\">\"</span>, 10000, 3<span style=\"color: #000000;\">),\n    (</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">狗头</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">male</span><span style=\"color: #800000;\">\"</span>, 18, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">20170512</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">operation</span><span style=\"color: #800000;\">\"</span>, 20000, 3<span style=\"color: #000000;\">),\n    (</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">盲僧</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">male</span><span style=\"color: #800000;\">\"</span>, 18, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">20130311</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">operation</span><span style=\"color: #800000;\">\"</span>, 19000, 3<span style=\"color: #000000;\">),\n    (</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">妖姬</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">female</span><span style=\"color: #800000;\">\"</span>, 38, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">20150411</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">operation</span><span style=\"color: #800000;\">\"</span>, 18000, 3<span style=\"color: #000000;\">),\n    (</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">寒冰</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">female</span><span style=\"color: #800000;\">\"</span>, 18, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">20140512</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">operation</span><span style=\"color: #800000;\">\"</span>, 17000, 3<span style=\"color: #000000;\">)\n]\n\n</span><span style=\"color: #0000ff;\">for</span> n, item <span style=\"color: #0000ff;\">in</span> enumerate(l, 1<span style=\"color: #000000;\">):\n    d </span>=<span style=\"color: #000000;\"> {\n        </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">_id</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">: n,\n        </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">: item[0],\n        </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">gender</span><span style=\"color: #800000;\">\"</span>: item[1<span style=\"color: #000000;\">],\n        </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">age</span><span style=\"color: #800000;\">\"</span>: item[2<span style=\"color: #000000;\">],\n        </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">hire_date</span><span style=\"color: #800000;\">\"</span>: datetime.datetime.strptime(item[3], <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%Y%m%d</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">),\n        </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">post</span><span style=\"color: #800000;\">\"</span>: item[4<span style=\"color: #000000;\">],\n        </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">salary</span><span style=\"color: #800000;\">\"</span>: item[5<span style=\"color: #000000;\">],\n        </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">emp_id</span><span style=\"color: #800000;\">\"</span>: item[6<span style=\"color: #000000;\">]\n    }\n    table.save(d)</span></pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p><strong>$group</strong></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'be880149-3e1d-45dc-b897-0c91db7d4a5e\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_be880149-3e1d-45dc-b897-0c91db7d4a5e\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_be880149-3e1d-45dc-b897-0c91db7d4a5e\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_be880149-3e1d-45dc-b897-0c91db7d4a5e\">\n<pre><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> $group注意点</span>\n    分组依据需要放到<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">_id</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">后面\n    取不同的字段的值需要使用$，</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$age</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">\n    取字典嵌套的字典中的值的时候，</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$_id.xx</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">\n    能够同时按照多个键进行分组\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 按照gender分组</span>\n<span style=\"color: #000000;\">db.emp.aggregate(\n    {$group: {_id: </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$gender</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">}}\n)\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 按照emp_id分组，获取不同emp_id个数及其平均年龄</span>\n<span style=\"color: #000000;\">db.emp.aggregate(\n    {$group: {_id: </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$emp_id</span><span style=\"color: #800000;\">\"</span>, count: {$sum: 1}, avg_age: {$avg: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$age</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">}}}\n)\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> group by null 将集合中所有文档分为一组</span>\n<span style=\"color: #000000;\">db.emp.aggregate(\n    {$group: {_id: null, count: {$sum: </span>1}, avg_age: {$avg: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$age</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">}}}\n)\n\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 数据</span>\n{<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">province</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">广东</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">city</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">广州</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">user_id</span><span style=\"color: #800000;\">\"</span>: 1<span style=\"color: #000000;\">}\n{</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">province</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">广东</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">city</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">广州</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">user_id</span><span style=\"color: #800000;\">\"</span>: 1<span style=\"color: #000000;\">}\n{</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">province</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">广东</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">city</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">广州</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">user_id</span><span style=\"color: #800000;\">\"</span>: 2<span style=\"color: #000000;\">}\n{</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">province</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">四川</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">city</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">成都</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">user_id</span><span style=\"color: #800000;\">\"</span>: 3<span style=\"color: #000000;\">}\n{</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">province</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">广东</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">city</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">深圳</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">user_id</span><span style=\"color: #800000;\">\"</span>: 4<span style=\"color: #000000;\">}\n{</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">province</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">广东</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">city</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">深圳</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">user_id</span><span style=\"color: #800000;\">\"</span>: 5<span style=\"color: #000000;\">}\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 需求</span><span style=\"color: #008000;\">\n#</span><span style=\"color: #008000;\"> 统计出每个province/city下的user_id的数量（同一个user_id只统计一次）</span>\n<span style=\"color: #000000;\">db.user.aggregate(\n    {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$group</span><span style=\"color: #800000;\">\"</span>: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">_id</span><span style=\"color: #800000;\">\"</span>: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">province</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$province</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">city</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$city</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">user_id</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$user_id</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">}}}\n)\n</span><span style=\"color: #800000;\">\"\"\"</span><span style=\"color: #800000;\">\n{ \"_id\" : { \"province\" : \"广东\", \"city\" : \"深圳\", \"user_id\" : 5 } }\n{ \"_id\" : { \"province\" : \"广东\", \"city\" : \"广州\", \"user_id\" : 1 } }\n{ \"_id\" : { \"province\" : \"广东\", \"city\" : \"广州\", \"user_id\" : 2 } }\n{ \"_id\" : { \"province\" : \"四川\", \"city\" : \"成都\", \"user_id\" : 3 } }\n{ \"_id\" : { \"province\" : \"广东\", \"city\" : \"深圳\", \"user_id\" : 4 } }\n</span><span style=\"color: #800000;\">\"\"\"</span><span style=\"color: #000000;\">\ndb.user.aggregate(\n    {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$group</span><span style=\"color: #800000;\">\"</span>: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">_id</span><span style=\"color: #800000;\">\"</span>: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">province</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$province</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">city</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$city</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">user_id</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$user_id</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">}}},\n    {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$group</span><span style=\"color: #800000;\">\"</span>: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">_id</span><span style=\"color: #800000;\">\"</span>: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">province</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$_id.province</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">city</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$_id.city</span><span style=\"color: #800000;\">\"</span>}, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">count</span><span style=\"color: #800000;\">\"</span>: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$sum</span><span style=\"color: #800000;\">\"</span>: 1<span style=\"color: #000000;\">}}}\n)\n</span><span style=\"color: #800000;\">\"\"\"</span><span style=\"color: #800000;\">\n{ \"_id\" : { \"province\" : \"四川\", \"city\" : \"成都\" }, \"count\" : 1 }\n{ \"_id\" : { \"province\" : \"广东\", \"city\" : \"广州\" }, \"count\" : 2 }\n{ \"_id\" : { \"province\" : \"广东\", \"city\" : \"深圳\" }, \"count\" : 2 }\n</span><span style=\"color: #800000;\">\"\"\"</span><span style=\"color: #000000;\">\ndb.user.aggregate(\n    {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$group</span><span style=\"color: #800000;\">\"</span>: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">_id</span><span style=\"color: #800000;\">\"</span>: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">province</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$province</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">city</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$city</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">user_id</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$user_id</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">}}},\n    {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$group</span><span style=\"color: #800000;\">\"</span>: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">_id</span><span style=\"color: #800000;\">\"</span>: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">province</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$_id.province</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">city</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$_id.city</span><span style=\"color: #800000;\">\"</span>}, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">count</span><span style=\"color: #800000;\">\"</span>: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$sum</span><span style=\"color: #800000;\">\"</span>: 1<span style=\"color: #000000;\">}}},\n    {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$project</span><span style=\"color: #800000;\">\"</span>: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">_id</span><span style=\"color: #800000;\">\"</span>: 0, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">province</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$_id.province</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">city</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$_id.city</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">count</span><span style=\"color: #800000;\">\"</span>: 1<span style=\"color: #000000;\">}}\n)\n</span><span style=\"color: #800000;\">\"\"\"</span><span style=\"color: #800000;\">\n{ \"count\" : 1, \"province\" : \"四川\", \"city\" : \"成都\" }\n{ \"count\" : 2, \"province\" : \"广东\", \"city\" : \"广州\" }\n{ \"count\" : 2, \"province\" : \"广东\", \"city\" : \"深圳\" }\n</span><span style=\"color: #800000;\">\"\"\"</span></pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p><strong>$project</strong></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'11d9da18-ef9b-4820-9229-fff719fa414a\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_11d9da18-ef9b-4820-9229-fff719fa414a\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_11d9da18-ef9b-4820-9229-fff719fa414a\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_11d9da18-ef9b-4820-9229-fff719fa414a\">\n<pre><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 格式：{\"$project\":{\"保留字段名\": 1, \"_id\": 0, \"新增字段名\": \"表达式\"}}</span>\n\n<span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 查看每个员工的名字和年龄+1</span>\n<span style=\"color: #000000;\">db.emp.aggregate(\n    {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$project</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">: \n        {    \n            </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">_id</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">: 0,\n            </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span>: 1<span style=\"color: #000000;\">, \n            </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">new_age</span><span style=\"color: #800000;\">\"</span>: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$add</span><span style=\"color: #800000;\">\"</span>: [<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$age</span><span style=\"color: #800000;\">\"</span>, 1<span style=\"color: #000000;\">]}\n        }\n    }\n)\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 表达式之数学表达式</span>\n{<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$add</span><span style=\"color: #800000;\">\"</span>: [expr1, expr2, ..., exprN]}         <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 相加</span>\n{<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$subtract</span><span style=\"color: #800000;\">\"</span>: [expr1, expr2]}                 <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 第一个减第二个</span>\n{<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$multiply</span><span style=\"color: #800000;\">\"</span>: [expr1, expr2, ..., exprN]}     <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 相乘</span>\n{<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$divide</span><span style=\"color: #800000;\">\"</span>: [expr1, expr2]}                 <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 第一个表达式除以第二个表达式的商作为结果</span>\n{<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$mod</span><span style=\"color: #800000;\">\"</span>: [expr1, expr2]}                     <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 第一个表达式除以第二个表达式得到的余数作为结果</span>\n\n<span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 查看每个员工的工作多长时间</span>\n<span style=\"color: #000000;\">db.emp.aggregate(\n    {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$project</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">: \n        {    \n            </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">_id</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">: 0,\n            </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span>: 1<span style=\"color: #000000;\">, \n            </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">hire_period</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">: {\n                </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$subtract</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">: [\n                    {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$year</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">: new Date()},\n                    {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$year</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$hire_date</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">}\n                ]\n            }\n        }\n    }\n)\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 字符串表达式</span>\n{<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$substr</span><span style=\"color: #800000;\">\"</span>: [字符串/<span style=\"color: #000000;\">$值为字符串的字段名, 起始位置, 截取几个字节]}\n{</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$concat</span><span style=\"color: #800000;\">\"</span>: [expr1, expr2, ..., exprN]}     <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 指定的表达式或字符串连接在一起返回，只支持字符串拼接</span>\n{<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$toLower</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">: expr}\n{</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$toUpper</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">: expr}\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 查看每个员工的姓和以大写形式显示的职位</span>\n<span style=\"color: #000000;\">db.emp.aggregate(\n    {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$project</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">: {\n        </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">_id</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">: 0,\n        </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span>: 1<span style=\"color: #000000;\">,\n        </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">post</span><span style=\"color: #800000;\">\"</span>: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$toUpper</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$post</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">}},\n    }\n)\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 在group基础上进行project</span>\n<span style=\"color: #000000;\">db.emp.aggregate(\n    {$group: {_id: </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$gender</span><span style=\"color: #800000;\">\"</span>, count: {$sum: 1}, avg_age: {$avg: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$age</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">}}},\n    {$project: {gender: </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$_id</span><span style=\"color: #800000;\">\"</span>, count: 1, avg_age: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$avg_age</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, _id: 0}}\n)</span></pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span><span style=\"background-color: #ffffff; font-family: \'PingFang SC\', \'Helvetica Neue\', Helvetica, Arial, sans-serif; font-size: 14px;\"> </span></div>\n<p><strong>$match</strong></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'3945b9b9-661b-4b44-bb53-cff953ad6f7d\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_3945b9b9-661b-4b44-bb53-cff953ad6f7d\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_3945b9b9-661b-4b44-bb53-cff953ad6f7d\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_3945b9b9-661b-4b44-bb53-cff953ad6f7d\">\n<pre><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 查询年龄大于18的员工，观察男性和女性各有多少人</span>\n<span style=\"color: #000000;\">db.emp.aggregate(\n    {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$match</span><span style=\"color: #800000;\">\"</span>: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">age</span><span style=\"color: #800000;\">\"</span>: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$gt</span><span style=\"color: #800000;\">\"</span>: 18<span style=\"color: #000000;\">}}},\n    {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$group</span><span style=\"color: #800000;\">\"</span>: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">_id</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$gender</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">count</span><span style=\"color: #800000;\">\"</span>: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$sum</span><span style=\"color: #800000;\">\"</span>: 1<span style=\"color: #000000;\">}}},\n    {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$project</span><span style=\"color: #800000;\">\"</span>: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">_id</span><span style=\"color: #800000;\">\"</span>: 0, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">gender</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$_id</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">count</span><span style=\"color: #800000;\">\"</span>: 1<span style=\"color: #000000;\">}}\n)\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 查询年龄大于18或部门id为1的员工，观察男性和女性各有多少人</span>\n<span style=\"color: #000000;\">db.emp.aggregate(\n    {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$match</span><span style=\"color: #800000;\">\"</span>: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$or</span><span style=\"color: #800000;\">\"</span>: [{<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">age</span><span style=\"color: #800000;\">\"</span>: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$gt</span><span style=\"color: #800000;\">\"</span>: 18}}, {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">emp_id</span><span style=\"color: #800000;\">\"</span>: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$in</span><span style=\"color: #800000;\">\"</span>: [1<span style=\"color: #000000;\">]}}]}},\n    {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$group</span><span style=\"color: #800000;\">\"</span>: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">_id</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$gender</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">count</span><span style=\"color: #800000;\">\"</span>: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$sum</span><span style=\"color: #800000;\">\"</span>: 1<span style=\"color: #000000;\">}}},\n    {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$project</span><span style=\"color: #800000;\">\"</span>: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">_id</span><span style=\"color: #800000;\">\"</span>: 0, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">gender</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$_id</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">count</span><span style=\"color: #800000;\">\"</span>: 1<span style=\"color: #000000;\">}}\n)</span></pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p><strong>$sort、$limit、$skip</strong></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'d923993f-e05b-4a58-a8bf-24227105beb4\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_d923993f-e05b-4a58-a8bf-24227105beb4\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_d923993f-e05b-4a58-a8bf-24227105beb4\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_d923993f-e05b-4a58-a8bf-24227105beb4\">\n<pre><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> {\"$sort\": {\"字段名\": 1, \"字段名\": -1}}  # 1升序，-1降序</span><span style=\"color: #008000;\">\n#</span><span style=\"color: #008000;\"> {\"$limit\": n}</span><span style=\"color: #008000;\">\n#</span><span style=\"color: #008000;\"> {\"$skip\": n}</span>\n\n<span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 查询男性、女性人数，按人数降序排序</span>\n<span style=\"color: #000000;\">db.emp.aggregate(\n    {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$group</span><span style=\"color: #800000;\">\"</span>: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">_id</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$gender</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">count</span><span style=\"color: #800000;\">\"</span>: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$sum</span><span style=\"color: #800000;\">\"</span>: 1<span style=\"color: #000000;\">}}},\n    {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$sort</span><span style=\"color: #800000;\">\"</span>: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">count</span><span style=\"color: #800000;\">\"</span>: -1<span style=\"color: #000000;\">}}\n)\n\ndb.emp.aggregate(\n    {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$limit</span><span style=\"color: #800000;\">\"</span>: 2<span style=\"color: #000000;\">},\n    {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$project</span><span style=\"color: #800000;\">\"</span>: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span>: 1<span style=\"color: #000000;\">}}\n)\n</span><span style=\"color: #800000;\">\"\"\"</span><span style=\"color: #800000;\">\n{ \"_id\" : 1, \"name\" : \"凯隐\" }\n{ \"_id\" : 2, \"name\" : \"纳尔\" }\n</span><span style=\"color: #800000;\">\"\"\"</span><span style=\"color: #000000;\">\ndb.emp.aggregate(\n    {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$skip</span><span style=\"color: #800000;\">\"</span>: 14<span style=\"color: #000000;\">},\n    {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$project</span><span style=\"color: #800000;\">\"</span>: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span>: 1<span style=\"color: #000000;\">}}\n)\n</span><span style=\"color: #800000;\">\"\"\"</span><span style=\"color: #800000;\">\n{ \"_id\" : 15, \"name\" : \"妖姬\" }\n{ \"_id\" : 16, \"name\" : \"寒冰\" }\n</span><span style=\"color: #800000;\">\"\"\"</span><span style=\"color: #000000;\">\ndb.emp.aggregate(\n    {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$skip</span><span style=\"color: #800000;\">\"</span>: 2<span style=\"color: #000000;\">},\n    {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$limit</span><span style=\"color: #800000;\">\"</span>: 2<span style=\"color: #000000;\">},\n    {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$project</span><span style=\"color: #800000;\">\"</span>: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span>: 1<span style=\"color: #000000;\">}}\n)\ndb.emp.aggregate(\n    {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$limit</span><span style=\"color: #800000;\">\"</span>: 4<span style=\"color: #000000;\">},\n    {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$skip</span><span style=\"color: #800000;\">\"</span>: 2<span style=\"color: #000000;\">},\n    {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$project</span><span style=\"color: #800000;\">\"</span>: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span>: 1<span style=\"color: #000000;\">}}\n)\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 这两个输出结果一样，但是建议先使用skip，再使用limit，因为这样效率会更高</span>\n<span style=\"color: #800000;\">\"\"\"</span><span style=\"color: #800000;\">\n{ \"_id\" : 3, \"name\" : \"艾克\" }\n{ \"_id\" : 4, \"name\" : \"瑞文\" }\n</span><span style=\"color: #800000;\">\"\"\"</span></pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p><strong>$unwind</strong></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show(\'90d66504-575f-48a1-af30-6f0f6ff87f55\')\"><img alt=\"\" class=\"code_img_closed\" id=\"code_img_closed_90d66504-575f-48a1-af30-6f0f6ff87f55\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\"/><img alt=\"\" class=\"code_img_opened\" id=\"code_img_opened_90d66504-575f-48a1-af30-6f0f6ff87f55\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" style=\"display: none;\"/>\n<div class=\"cnblogs_code_hide\" id=\"cnblogs_code_open_90d66504-575f-48a1-af30-6f0f6ff87f55\">\n<pre><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 将文档中的某一个数组类型字段拆分成多条，每条包含数组的一个值</span><span style=\"color: #008000;\">\n#</span><span style=\"color: #008000;\"> 语法：{\"$unwind\": \"$字段名\"}</span>\ndb.t1.insert({<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">_id</span><span style=\"color: #800000;\">\"</span>: 1, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">item</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">t-shirt</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">size</span><span style=\"color: #800000;\">\"</span>: [<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">S</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">M</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">L</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">]})\ndb.t1.aggregate({</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$unwind</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$size</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">})\n</span><span style=\"color: #800000;\">\"\"\"</span><span style=\"color: #800000;\">\n{ \"_id\" : 1, \"item\" : \"t-shirt\", \"size\" : \"S\" }\n{ \"_id\" : 1, \"item\" : \"t-shirt\", \"size\" : \"M\" }\n{ \"_id\" : 1, \"item\" : \"t-shirt\", \"size\" : \"L\" }\n</span><span style=\"color: #800000;\">\"\"\"</span>\n<span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 统计size的个数</span>\n<span style=\"color: #000000;\">db.t1.aggregate(\n    {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$match</span><span style=\"color: #800000;\">\"</span>: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">item</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">t-shirt</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">}},\n    {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$unwind</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$size</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">},\n    {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$group</span><span style=\"color: #800000;\">\"</span>: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">_id</span><span style=\"color: #800000;\">\"</span>: null, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">count</span><span style=\"color: #800000;\">\"</span>: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$sum</span><span style=\"color: #800000;\">\"</span>: 1<span style=\"color: #000000;\">}}},\n    {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$project</span><span style=\"color: #800000;\">\"</span>: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">_id</span><span style=\"color: #800000;\">\"</span>: 0, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">count</span><span style=\"color: #800000;\">\"</span>: 1<span style=\"color: #000000;\">}}\n)\n\n</span><span style=\"color: #800000;\">\"\"\"</span><span style=\"color: #800000;\">\n{ \"count\" : 3 }\n</span><span style=\"color: #800000;\">\"\"\"</span>\n\n<span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 使用$unwind注意点</span>\n<span style=\"color: #000000;\">db.t2.insert([\n    {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">_id</span><span style=\"color: #800000;\">\"</span>: 1, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">item</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">a</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">size</span><span style=\"color: #800000;\">\"</span>: [<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">S</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">M</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">L</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">]},\n    {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">_id</span><span style=\"color: #800000;\">\"</span>: 2, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">item</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">b</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">size</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">: []},\n    {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">_id</span><span style=\"color: #800000;\">\"</span>: 3, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">item</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">c</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">size</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">M</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">},\n    {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">_id</span><span style=\"color: #800000;\">\"</span>: 4, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">item</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">d</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">},\n    {</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">_id</span><span style=\"color: #800000;\">\"</span>: 5, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">item</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">e</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">size</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">: null},\n])\ndb.t2.aggregate({</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$unwind</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$size</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">})\n</span><span style=\"color: #800000;\">\"\"\"</span><span style=\"color: #800000;\">\n{ \"_id\" : 1, \"item\" : \"a\", \"size\" : \"S\" }\n{ \"_id\" : 1, \"item\" : \"a\", \"size\" : \"M\" }\n{ \"_id\" : 1, \"item\" : \"a\", \"size\" : \"L\" }\n{ \"_id\" : 3, \"item\" : \"c\", \"size\" : \"M\" }\n</span><span style=\"color: #800000;\">\"\"\"</span>\n<span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 可以看到_id为2、5的数据没了，如果我们希望保留这种数据，则：</span><span style=\"color: #008000;\">\n#</span><span style=\"color: #008000;\"> 属性值为false表示丢弃属性值为空的文档</span><span style=\"color: #008000;\">\n#</span><span style=\"color: #008000;\"> 设置preserveNullAndEmptyArrays值为true，可以保留属性值为空的文档</span>\n<span style=\"color: #000000;\">db.t2.aggregate({\n    </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$unwind</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">:{\n        </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">path</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$size</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n        </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">preserveNullAndEmptyArrays</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">: true \n    } \n})\n</span><span style=\"color: #800000;\">\"\"\"</span><span style=\"color: #800000;\">\n{ \"_id\" : 1, \"item\" : \"a\", \"size\" : \"S\" }\n{ \"_id\" : 1, \"item\" : \"a\", \"size\" : \"M\" }\n{ \"_id\" : 1, \"item\" : \"a\", \"size\" : \"L\" }\n{ \"_id\" : 2, \"item\" : \"b\" }\n{ \"_id\" : 3, \"item\" : \"c\", \"size\" : \"M\" }\n{ \"_id\" : 4, \"item\" : \"d\" }\n{ \"_id\" : 5, \"item\" : \"e\", \"size\" : null }\n</span><span style=\"color: #800000;\">\"\"\"</span></pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<h2><span style=\"background-color: #00ccff;\">五、数据的备份与恢复</span></h2>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\">########## 备份语法 ###########</span>\nmongodump -h dbhost -d dbname -<span style=\"color: #000000;\">o dbdirectory\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 参数解析</span>\n-<span style=\"color: #000000;\">h    服务器地址，也可以指定端口\n</span>-<span style=\"color: #000000;\">d  需要备份的数据库名称\n</span>-<span style=\"color: #000000;\">o  备份的数据存放位置，此目录中存放着备份出来的数据\n\nmongodump </span>-d test -o /<span style=\"color: #000000;\">home  <span style=\"color: #008000;\"># 本机不需要-h</span>\nmongodump </span>-h 47.107.109.75:27017 -d test -o /<span style=\"color: #000000;\">home\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\">########## 恢复语法 ###########<br/># 恢复时可以指定恢复到哪个数据库（没有强制要求与备份时的名称一样）<br/></span>mongorestore -h dbhost -d dbname --<span style=\"color: #000000;\">dir dbdirectory\nmongorestore </span>-d test1 --dir /home/test</pre>\n</div>\n<h2><span style=\"background-color: #00ccff;\">六、索引</span></h2>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 测试，插入10万条数据</span>\n<span style=\"color: #0000ff;\">for</span>(i=0; i&lt;100000; i++){db.test.insert({<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">test</span><span style=\"color: #800000;\">\"</span>+i, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">age</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">: i})}\n\ndb.test.find({</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">test10000</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">})\ndb.test.find({</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">test10000</span><span style=\"color: #800000;\">\"</span>}).explain(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">executionStats</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 建立索引，语法：db.集合名称.ensureIndex({\"属性\": 1})，1表示升序，-1表示降序</span><span style=\"color: #008000;\">\n#</span><span style=\"color: #008000;\"> 具体操作：db.test.ensureIndex({\"name\": 1})</span></pre>\n</div>\n<p>建立索引之后对比：</p>\n<p><img alt=\"\" src=\"https://img2018.cnblogs.com/blog/1468833/201903/1468833-20190331034014295-444862253.png\"/></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 创建唯一索引（索引的值是唯一的）</span>\ndb.collection.ensureIndex({<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span>: 1}, {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">unique</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">: true})\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 创建联合索引</span>\ndb.collection.ensureIndex({<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span>: 1, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">age</span><span style=\"color: #800000;\">\"</span>: 1<span style=\"color: #000000;\">})\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 查看当前集合的所有索引</span>\n<span style=\"color: #000000;\">db.collection.getIndexes()\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 删除索引</span>\ndb.collection.dropIndex({<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">索引名称</span><span style=\"color: #800000;\">\"</span>: 1})</pre>\n</div>\n<h2><span style=\"background-color: #00ccff;\">七、pymongo</span></h2>\n<p>官方文档：<a href=\"http://api.mongodb.com/python/current/tutorial.html\" target=\"_blank\">http://api.mongodb.com/python/current/tutorial.html</a></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">from</span> pymongo <span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> MongoClient\n\nclient </span>= MongoClient(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">mongodb://root:123456@localhost:27017</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\ncollection </span>= client[<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">test</span><span style=\"color: #800000;\">\"</span>][<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">t1</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">]\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\">####### 插入一条数据 ########</span>\nret1 = collection.insert({<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">age</span><span style=\"color: #800000;\">\"</span>: 18<span style=\"color: #000000;\">})\n</span><span style=\"color: #0000ff;\">print</span>(ret1)  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 打印的是 _id 的值</span>\n\n<span style=\"color: #008000;\">#</span><span style=\"color: #008000;\">####### 插入多条数据 ########</span>\ndata_list = [{<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd{}</span><span style=\"color: #800000;\">\"</span>.format(i), <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">age</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">{}</span><span style=\"color: #800000;\">\"</span>.format(i)} <span style=\"color: #0000ff;\">for</span> i <span style=\"color: #0000ff;\">in</span> range(10<span style=\"color: #000000;\">)]\ncollection.insert_many(data_list)\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\">####### 查新一条记录 ########</span>\nret2 = collection.find_one({<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">})\n</span><span style=\"color: #0000ff;\">print</span><span style=\"color: #000000;\">(ret2)\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\">####### 查新多条记录 ########</span>\nret3 = collection.find({<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">})\n</span><span style=\"color: #0000ff;\">print</span>(ret3)  <span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> &lt;pymongo.cursor.Cursor object at 0x0000000002F4DF28&gt;</span><span style=\"color: #008000;\">\n#</span><span style=\"color: #008000;\"> 方式1</span>\n<span style=\"color: #0000ff;\">for</span> i <span style=\"color: #0000ff;\">in</span><span style=\"color: #000000;\"> ret3:\n    </span><span style=\"color: #0000ff;\">print</span><span style=\"color: #000000;\">(i)\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\"> 方式2</span>\n<span style=\"color: #0000ff;\">print</span><span style=\"color: #000000;\">(list(ret3))\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\">#######  更新一条数据 ########</span>\ncollection.update_one({<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>}, {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$set</span><span style=\"color: #800000;\">\"</span>: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pink</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">}})\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\">#######  更新多条数据 ########</span>\ncollection.update_many({<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>}, {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$set</span><span style=\"color: #800000;\">\"</span>: {<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pink</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">}})\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\">#######  删除一条数据 ########</span>\ncollection.delete_one({<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">})\n\n</span><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\">#######  删除多条数据 ########</span>\ncollection.delete_many({<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pd</span><span style=\"color: #800000;\">\"</span>})</pre>\n</div>\n<p> </p>', 29);
INSERT INTO `blog_articledetail` VALUES (30, '<div class=\"extra-padding\">\n<h1>\n<div class=\"pull-left\">\n<span style=\"font-size:12px;font-weight:normal;\">第一章Golang 调度器的由来</span>\n</div>\n</h1>\n<div class=\"ui readme markdown-body content-body article-content fluidbox-content\">\n<p>\n			第二章Goroutine 调度器的 GMP 模型及设计思想\n		</p>\n<p>\n			第三章Goroutine 调度场景过程全图文解析\n		</p>\n<h4 id=\"d41f96\">\n<a name=\"undefined\"></a><span class=\"header-link octicon octicon-link\"></span>一、Golang “调度器” 的由来？<a class=\"anchorific\" href=\"#d41f96\">#</a>\n</h4>\n<h5 id=\"e9b84b\">\n<a name=\"undefined\"></a><span class=\"header-link octicon octicon-link\"></span>(1) 单进程时代不需要调度器<a class=\"anchorific\" href=\"#e9b84b\">#</a>\n</h5>\n<p>\n			我们知道，一切的软件都是跑在操作系统上，真正用来干活 (计算) 的是 CPU。早期的操作系统每个程序就是一个进程，直到一个程序运行完，才能进行下一个进程，就是 “单进程时代”\n		</p>\n<p>\n			一切的程序只能串行发生。<br/>\n<a class=\"fluidbox fluidbox__instance-1 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/06IoYRyruP.png!large\"></a>\n</p>\n<div class=\"fluidbox__wrap\">\n<a class=\"fluidbox fluidbox__instance-1 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/06IoYRyruP.png!large\"><img alt=\"5-单进程操作系统.png\" class=\"fluidbox__thumb\" src=\"https://cdn.learnku.com/uploads/images/202003/11/58489/06IoYRyruP.png!large\"/>\n<div class=\"fluidbox__ghost\">\n</div>\n</a>\n</div>\n<p>\n<br/>\n</p>\n<p>\n			早期的单进程操作系统，面临 2 个问题：\n		</p>\n<p>\n			1. 单一的执行流程，计算机只能一个任务一个任务处理。\n		</p>\n<p>\n			2. 进程阻塞所带来的 CPU 时间浪费。\n		</p>\n<p>\n			那么能不能有多个进程来宏观一起来执行多个任务呢？\n		</p>\n<p>\n			后来操作系统就具有了<strong>最早的并发能力：多进程并发</strong>，当一个进程阻塞的时候，切换到另外等待执行的进程，这样就能尽量把 CPU 利用起来，CPU 就不浪费了。\n		</p>\n<h5 id=\"817f29\">\n<a name=\"undefined\"></a><span class=\"header-link octicon octicon-link\"></span>(2) 多进程 / 线程时代有了调度器需求<a class=\"anchorific\" href=\"#817f29\">#</a>\n</h5>\n<p>\n<a class=\"fluidbox fluidbox__instance-2 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/sLve6TagD3.png!large\"></a>\n</p>\n<div class=\"fluidbox__wrap\">\n<a class=\"fluidbox fluidbox__instance-2 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/sLve6TagD3.png!large\"><img alt=\"6-多进程操作系统.png\" class=\"fluidbox__thumb\" src=\"https://cdn.learnku.com/uploads/images/202003/11/58489/sLve6TagD3.png!large\"/>\n<div class=\"fluidbox__ghost\">\n</div>\n</a>\n</div>\n<p>\n<br/>\n</p>\n<p>\n			在多进程 / 多线程的操作系统中，就解决了阻塞的问题，因为一个进程阻塞 cpu 可以立刻切换到其他进程中去执行，而且调度 cpu 的算法可以保证在运行的进程都可以被分配到 cpu 的运行时间片。这样从宏观来看，似乎多个进程是在同时被运行。\n		</p>\n<p>\n			但新的问题就又出现了，进程拥有太多的资源，进程的创建、切换、销毁，都会占用很长的时间，CPU 虽然利用起来了，但如果进程过多，CPU 有很大的一部分都被用来进行进程调度了。\n		</p>\n<p>\n<strong>怎么才能提高 CPU 的利用率呢？</strong>\n</p>\n<p>\n			但是对于 Linux 操作系统来讲，cpu 对进程的态度和线程的态度是一样的。<br/>\n<a class=\"fluidbox fluidbox__instance-3 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/dNWd00AiEZ.png!large\"></a>\n</p>\n<div class=\"fluidbox__wrap\">\n<a class=\"fluidbox fluidbox__instance-3 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/dNWd00AiEZ.png!large\"><img alt=\"7-cpu切换浪费成本.png\" class=\"fluidbox__thumb\" src=\"https://cdn.learnku.com/uploads/images/202003/11/58489/dNWd00AiEZ.png!large\"/>\n<div class=\"fluidbox__ghost\">\n</div>\n</a>\n</div>\n<p>\n<br/>\n</p>\n<p>\n			很明显，CPU 调度切换的是进程和线程。尽管线程看起来很美好，但实际上多线程开发设计会变得更加复杂，要考虑很多同步竞争等问题，如锁、竞争冲突等。\n		</p>\n<h5 id=\"39076c\">\n<a name=\"undefined\"></a><span class=\"header-link octicon octicon-link\"></span>(3) 协程来提高 CPU 利用率<a class=\"anchorific\" href=\"#39076c\">#</a>\n</h5>\n<p>\n			多进程、多线程已经提高了系统的并发能力，但是在当今互联网高并发场景下，为每个任务都创建一个线程是不现实的，因为会消耗大量的内存 (进程虚拟内存会占用 4GB [32 位操作系统], 而线程也要大约 4MB)。\n		</p>\n<p>\n			大量的进程 / 线程出现了新的问题\n		</p>\n<ul>\n<li>\n				高内存占用\n			</li>\n<li>\n				调度的高消耗 CPU\n			</li>\n</ul>\n<p>\n			好了，然后工程师们就发现，其实一个线程分为 “内核态 “线程和” 用户态 “线程。\n		</p>\n<p>\n			一个 “用户态线程” 必须要绑定一个 “内核态线程”，但是 CPU 并不知道有 “用户态线程” 的存在，它只知道它运行的是一个 “内核态线程”(Linux 的 PCB 进程控制块)。\n		</p>\n<p>\n<a class=\"fluidbox fluidbox__instance-4 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/TfStmYsfyF.png!large\"></a>\n</p>\n<div class=\"fluidbox__wrap\">\n<a class=\"fluidbox fluidbox__instance-4 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/TfStmYsfyF.png!large\"><img alt=\"8-线程的内核和用户态.png\" class=\"fluidbox__thumb\" src=\"https://cdn.learnku.com/uploads/images/202003/11/58489/TfStmYsfyF.png!large\"/>\n<div class=\"fluidbox__ghost\">\n</div>\n</a>\n</div>\n<p>\n<br/>\n</p>\n<p>\n			这样，我们再去细化去分类一下，内核线程依然叫 “线程 (thread)”，用户线程叫 “协程 (co-routine)”.\n		</p>\n<p>\n<a class=\"fluidbox fluidbox__instance-5 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/vgzlKzvOUL.png!large\"></a>\n</p>\n<div class=\"fluidbox__wrap\">\n<a class=\"fluidbox fluidbox__instance-5 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/vgzlKzvOUL.png!large\"><img alt=\"9-协程和线程.png\" class=\"fluidbox__thumb\" src=\"https://cdn.learnku.com/uploads/images/202003/11/58489/vgzlKzvOUL.png!large\"/>\n<div class=\"fluidbox__ghost\">\n</div>\n</a>\n</div>\n<p>\n<br/>\n</p>\n<p>\n			看到这里，我们就要开脑洞了，既然一个协程 (co-routine) 可以绑定一个线程 (thread)，那么能不能多个协程 (co-routine) 绑定一个或者多个线程 (thread) 上呢。\n		</p>\n<p>\n			之后，我们就看到了有 3 中协程和线程的映射关系：\n		</p>\n<blockquote>\n<h4 id=\"b179e6\">\n<a name=\"undefined\"></a><span class=\"header-link octicon octicon-link\"></span>N:1 关系<a class=\"anchorific\" href=\"#b179e6\">#</a>\n</h4>\n</blockquote>\n<p>\n			N 个协程绑定 1 个线程，优点就是<strong>协程在用户态线程即完成切换，不会陷入到内核态，这种切换非常的轻量快速</strong>。但也有很大的缺点，1 个进程的所有协程都绑定在 1 个线程上\n		</p>\n<p>\n			缺点：\n		</p>\n<ul>\n<li>\n				某个程序用不了硬件的多核加速能力\n			</li>\n<li>\n				一旦某协程阻塞，造成线程阻塞，本进程的其他协程都无法执行了，根本就没有并发的能力了。\n			</li>\n</ul>\n<p>\n<a class=\"fluidbox fluidbox__instance-6 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/12/58489/kfPbThcyRU.png!large\"></a>\n</p>\n<div class=\"fluidbox__wrap\">\n<a class=\"fluidbox fluidbox__instance-6 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/12/58489/kfPbThcyRU.png!large\"><img alt=\"10-N-1关系.png\" class=\"fluidbox__thumb\" src=\"https://cdn.learnku.com/uploads/images/202003/12/58489/kfPbThcyRU.png!large\"/>\n<div class=\"fluidbox__ghost\">\n</div>\n</a>\n</div>\n<p>\n<br/>\n</p>\n<blockquote>\n<h4 id=\"47d01a\">\n<a name=\"undefined\"></a><span class=\"header-link octicon octicon-link\"></span>1:1 关系<a class=\"anchorific\" href=\"#47d01a\">#</a>\n</h4>\n</blockquote>\n<p>\n			1 个协程绑定 1 个线程，这种最容易实现。协程的调度都由 CPU 完成了，不存在 N:1 缺点，\n		</p>\n<p>\n			缺点：\n		</p>\n<ul>\n<li>\n				协程的创建、删除和切换的代价都由 CPU 完成，有点略显昂贵了。\n			</li>\n</ul>\n<p>\n<a class=\"fluidbox fluidbox__instance-7 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/EhNQY2VCpk.png!large\"></a>\n</p>\n<div class=\"fluidbox__wrap\">\n<a class=\"fluidbox fluidbox__instance-7 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/EhNQY2VCpk.png!large\"><img alt=\"11-1-1.png\" class=\"fluidbox__thumb\" src=\"https://cdn.learnku.com/uploads/images/202003/11/58489/EhNQY2VCpk.png!large\"/>\n<div class=\"fluidbox__ghost\">\n</div>\n</a>\n</div>\n<p>\n<br/>\n</p>\n<blockquote>\n<h4 id=\"d5a827\">\n<a name=\"undefined\"></a><span class=\"header-link octicon octicon-link\"></span>M:N 关系<a class=\"anchorific\" href=\"#d5a827\">#</a>\n</h4>\n</blockquote>\n<p>\n			M 个协程绑定 1 个线程，是 N:1 和 1:1 类型的结合，克服了以上 2 种模型的缺点，但实现起来最为复杂。\n		</p>\n<p>\n<a class=\"fluidbox fluidbox__instance-8 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/12/58489/ANDQLx3g9U.png!large\"></a>\n</p>\n<div class=\"fluidbox__wrap\">\n<a class=\"fluidbox fluidbox__instance-8 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/12/58489/ANDQLx3g9U.png!large\"><img alt=\"12-m-n.png\" class=\"fluidbox__thumb\" src=\"https://cdn.learnku.com/uploads/images/202003/12/58489/ANDQLx3g9U.png!large\"/>\n<div class=\"fluidbox__ghost\">\n</div>\n</a>\n</div>\n<p>\n<br/>\n</p>\n<p>\n			协程跟线程是有区别的，线程由 CPU 调度是抢占式的，<strong>协程由用户态调度是协作式的</strong>，一个协程让出 CPU 后，才执行下一个协程。\n		</p>\n<p>\n<br/>\n</p>\n<h5 id=\"820a54\">\n<a name=\"undefined\"></a><span class=\"header-link octicon octicon-link\"></span>(4) Go 语言的协程 goroutine<a class=\"anchorific\" href=\"#820a54\">#</a>\n</h5>\n<p>\n<strong>Go 为了提供更容易使用的并发方法，使用了 goroutine 和 channel</strong>。goroutine 来自协程的概念，让一组可复用的函数运行在一组线程之上，即使有协程阻塞，该线程的其他协程也可以被runtime调度，转移到其他可运行的线程上。最关键的是，程序员看不到这些底层的细节，这就降低了编程的难度，提供了更容易的并发。\n		</p>\n<p>\n			Go 中，协程被称为 goroutine，它非常轻量，一个 goroutine 只占几 KB，并且这几 KB 就足够 goroutine 运行完，这就能在有限的内存空间内支持大量 goroutine，支持了更多的并发。虽然一个 goroutine 的栈只占几 KB，但实际是可伸缩的，如果需要更多内容，runtime会自动为 goroutine 分配。\n		</p>\n<p>\n			Goroutine 特点：\n		</p>\n<ul>\n<li>\n				占用内存更小（几 kb）\n			</li>\n<li>\n				调度更灵活 (runtime 调度)\n			</li>\n</ul>\n<h5 id=\"f94a63\">\n<a name=\"undefined\"></a><span class=\"header-link octicon octicon-link\"></span>(5) 被废弃的 goroutine 调度器<a class=\"anchorific\" href=\"#f94a63\">#</a>\n</h5>\n<p>\n			好了，既然我们知道了协程和线程的关系，那么最关键的一点就是调度协程的调度器的实现了。\n		</p>\n<p>\n			Go 目前使用的调度器是 2012 年重新设计的，因为之前的调度器性能存在问题，所以使用 4 年就被废弃了，那么我们先来分析一下被废弃的调度器是如何运作的？\n		</p>\n<blockquote>\n<p>\n				大部分文章都是会用 G 来表示 Goroutine，用 M 来表示线程，那么我们也会用这种表达的对应关系。\n			</p>\n</blockquote>\n<p>\n<a class=\"fluidbox fluidbox__instance-9 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/Af6GQ3GSlb.png!large\"></a>\n</p>\n<div class=\"fluidbox__wrap\">\n<a class=\"fluidbox fluidbox__instance-9 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/Af6GQ3GSlb.png!large\"><img alt=\"13-gm.png\" class=\"fluidbox__thumb\" src=\"https://cdn.learnku.com/uploads/images/202003/11/58489/Af6GQ3GSlb.png!large\"/>\n<div class=\"fluidbox__ghost\">\n</div>\n</a>\n</div>\n<p>\n<br/>\n</p>\n<p>\n			下面我们来看看被废弃的 golang 调度器是如何实现的？\n		</p>\n<p>\n<a class=\"fluidbox fluidbox__instance-10 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/uWk9pzdREk.png!large\"></a>\n</p>\n<div class=\"fluidbox__wrap\">\n<a class=\"fluidbox fluidbox__instance-10 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/uWk9pzdREk.png!large\"><img alt=\"14-old调度器.png\" class=\"fluidbox__thumb\" src=\"https://cdn.learnku.com/uploads/images/202003/11/58489/uWk9pzdREk.png!large\"/>\n<div class=\"fluidbox__ghost\">\n</div>\n</a>\n</div>\n<p>\n<br/>\n</p>\n<p>\n			M 想要执行、放回 G 都必须访问全局 G 队列，并且 M 有多个，即多线程访问同一资源需要加锁进行保证互斥 / 同步，所以全局 G 队列是有互斥锁进行保护的。\n		</p>\n<p>\n			老调度器有几个缺点：\n		</p>\n<ol>\n<li>\n				创建、销毁、调度 G 都需要每个 M 获取锁，这就形成了<strong>激烈的锁竞争</strong>。\n			</li>\n<li>\n				M 转移 G 会造成<strong>延迟和额外的系统负载</strong>。比如当 G 中包含创建新协程的时候，M 创建了 G’，为了继续执行 G，需要把 G’交给 M’执行，也造成了<strong>很差的局部性</strong>，因为 G’和 G 是相关的，最好放在 M 上执行，而不是其他 M’。\n			</li>\n<li>\n				系统调用 (CPU 在 M 之间的切换) 导致频繁的线程阻塞和取消阻塞操作增加了系统开销。\n			</li>\n</ol>\n<h4 id=\"e0f613\">\n<a name=\"undefined\"></a><span class=\"header-link octicon octicon-link\"></span>二、Goroutine 调度器的 GMP 模型的设计思想<a class=\"anchorific\" href=\"#e0f613\">#</a>\n</h4>\n<p>\n			面对之前调度器的问题，Go 设计了新的调度器。\n		</p>\n<p>\n			在新调度器中，出列 M (thread) 和 G (goroutine)，又引进了 P (Processor)。\n		</p>\n<p>\n<a class=\"fluidbox fluidbox__instance-11 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/zaZ4nQYcZe.png!large\"></a>\n</p>\n<div class=\"fluidbox__wrap\">\n<a class=\"fluidbox fluidbox__instance-11 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/zaZ4nQYcZe.png!large\"><img alt=\"15-gmp.png\" class=\"fluidbox__thumb\" src=\"https://cdn.learnku.com/uploads/images/202003/11/58489/zaZ4nQYcZe.png!large\"/>\n<div class=\"fluidbox__ghost\">\n</div>\n</a>\n</div>\n<p>\n<br/>\n</p>\n<p>\n<strong>Processor，它包含了运行 goroutine 的资源</strong>，如果线程想运行 goroutine，必须先获取 P，P 中还包含了可运行的 G 队列。\n		</p>\n<h5 id=\"d8bb85\">\n<a name=\"undefined\"></a><span class=\"header-link octicon octicon-link\"></span>(1) GMP 模型<a class=\"anchorific\" href=\"#d8bb85\">#</a>\n</h5>\n<p>\n			在 Go 中，<strong>线程是运行 goroutine 的实体，调度器的功能是把可运行的 goroutine 分配到工作线程上</strong>。\n		</p>\n<p>\n<a class=\"fluidbox fluidbox__instance-12 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/Ugu3C2WSpM.jpeg!large\"></a>\n</p>\n<div class=\"fluidbox__wrap\">\n<a class=\"fluidbox fluidbox__instance-12 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/Ugu3C2WSpM.jpeg!large\"><img alt=\"16-GMP-调度.png\" class=\"fluidbox__thumb\" src=\"https://cdn.learnku.com/uploads/images/202003/11/58489/Ugu3C2WSpM.jpeg!large\"/>\n<div class=\"fluidbox__ghost\">\n</div>\n</a>\n</div>\n<p>\n<br/>\n</p>\n<ol>\n<li>\n<strong>全局队列</strong>（Global Queue）：存放等待运行的 G。\n			</li>\n<li>\n<strong>P 的本地队列</strong>：同全局队列类似，存放的也是等待运行的 G，存的数量有限，不超过 256 个。新建 G’时，G’优先加入到 P 的本地队列，如果队列满了，则会把本地队列中一半的 G 移动到全局队列。\n			</li>\n<li>\n<strong>P 列表</strong>：所有的 P 都在程序启动时创建，并保存在数组中，最多有GOMAXPROCS(可配置) 个。\n			</li>\n<li>\n<strong>M</strong>：线程想运行任务就得获取 P，从 P 的本地队列获取 G，P 队列为空时，M 也会尝试从全局队列<strong>拿</strong>一批 G 放到 P 的本地队列，或从其他 P 的本地队列<strong>偷</strong>一半放到自己 P 的本地队列。M 运行 G，G 执行之后，M 会从 P 获取下一个 G，不断重复下去。\n			</li>\n</ol>\n<p>\n<strong>Goroutine 调度器和 OS 调度器是通过 M 结合起来的，每个 M 都代表了 1 个内核线程，OS 调度器负责把内核线程分配到 CPU 的核上执行</strong>。\n		</p>\n<blockquote>\n<h3 id=\"62234a\">\n<a name=\"undefined\"></a><span class=\"header-link octicon octicon-link\"></span>有关 P 和 M 的个数问题<a class=\"anchorific\" href=\"#62234a\">#</a>\n</h3>\n</blockquote>\n<p>\n			1、P 的数量：\n		</p>\n<ul>\n<li>\n				由启动时环境变量$GOMAXPROCS或者是由runtime的方法GOMAXPROCS()决定。这意味着在程序执行的任意时刻都只有$GOMAXPROCS个 goroutine 在同时运行。\n			</li>\n</ul>\n<p>\n			2、M 的数量:\n		</p>\n<ul>\n<li>\n				go 语言本身的限制：go 程序启动时，会设置 M 的最大数量，默认 10000. 但是内核很难支持这么多的线程数，所以这个限制可以忽略。\n			</li>\n<li>\n				runtime/debug 中的 SetMaxThreads 函数，设置 M 的最大数量\n			</li>\n<li>\n				一个 M 阻塞了，会创建新的 M。\n			</li>\n</ul>\n<p>\n			M 与 P 的数量没有绝对关系，一个 M 阻塞，P 就会去创建或者切换另一个 M，所以，即使 P 的默认数量是 1，也有可能会创建很多个 M 出来。\n		</p>\n<blockquote>\n<h3 id=\"363020\">\n<a name=\"undefined\"></a><span class=\"header-link octicon octicon-link\"></span>P 和 M 何时会被创建<a class=\"anchorific\" href=\"#363020\">#</a>\n</h3>\n</blockquote>\n<p>\n			1、P 何时创建：在确定了 P 的最大数量 n 后，运行时系统会根据这个数量创建 n 个 P。\n		</p>\n<p>\n			2、M 何时创建：没有足够的 M 来关联 P 并运行其中的可运行的 G。比如所有的 M 此时都阻塞住了，而 P 中还有很多就绪任务，就会去寻找空闲的 M，而没有空闲的，就会去创建新的 M。\n		</p>\n<h5 id=\"0810e3\">\n<a name=\"undefined\"></a><span class=\"header-link octicon octicon-link\"></span>(2) 调度器的设计策略<a class=\"anchorific\" href=\"#0810e3\">#</a>\n</h5>\n<p>\n<strong>复用线程</strong>：避免频繁的创建、销毁线程，而是对线程的复用。\n		</p>\n<p>\n			1）work stealing 机制\n		</p>\n<p>\n			当本线程无可运行的 G 时，尝试从其他线程绑定的 P 偷取 G，而不是销毁线程。\n		</p>\n<p>\n			2）hand off 机制\n		</p>\n<p>\n			当本线程因为 G 进行系统调用阻塞时，线程释放绑定的 P，把 P 转移给其他空闲的线程执行。\n		</p>\n<p>\n<strong>利用并行</strong>：GOMAXPROCS设置 P 的数量，最多有GOMAXPROCS个线程分布在多个 CPU 上同时运行。GOMAXPROCS也限制了并发的程度，比如GOMAXPROCS = 核数/2，则最多利用了一半的 CPU 核进行并行。\n		</p>\n<p>\n<strong>抢占</strong>：在 coroutine 中要等待一个协程主动让出 CPU 才执行下一个协程，在 Go 中，一个 goroutine 最多占用 CPU 10ms，防止其他 goroutine 被饿死，这就是 goroutine 不同于 coroutine 的一个地方。\n		</p>\n<p>\n<strong>全局 G 队列</strong>：在新的调度器中依然有全局 G 队列，但功能已经被弱化了，当 M 执行 work stealing 从其他 P 偷不到 G 时，它可以从全局 G 队列获取 G。\n		</p>\n<h5 id=\"77eace\">\n<a name=\"undefined\"></a><span class=\"header-link octicon octicon-link\"></span>(3) go func ()  调度流程<a class=\"anchorific\" href=\"#77eace\">#</a>\n</h5>\n<p>\n<a class=\"fluidbox fluidbox__instance-13 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/a4vWtvRWGQ.jpeg!large\"></a>\n</p>\n<div class=\"fluidbox__wrap\">\n<a class=\"fluidbox fluidbox__instance-13 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/a4vWtvRWGQ.jpeg!large\"><img alt=\"18-go-func调度周期.jpeg\" class=\"fluidbox__thumb\" src=\"https://cdn.learnku.com/uploads/images/202003/11/58489/a4vWtvRWGQ.jpeg!large\"/>\n<div class=\"fluidbox__ghost\">\n</div>\n</a>\n</div>\n<p>\n<br/>\n</p>\n<p>\n			从上图我们可以分析出几个结论：\n		</p>\n<p>\n			1、我们通过 go func () 来创建一个 goroutine；\n		</p>\n<p>\n			2、有两个存储 G 的队列，一个是局部调度器 P 的本地队列、一个是全局 G 队列。新创建的 G 会先保存在 P 的本地队列中，如果 P 的本地队列已经满了就会保存在全局的队列中；\n		</p>\n<p>\n			3、G 只能运行在 M 中，一个 M 必须持有一个 P，M 与 P 是 1：1 的关系。M 会从 P 的本地队列弹出一个可执行状态的 G 来执行，如果 P 的本地队列为空，就会想其他的 MP 组合偷取一个可执行的 G 来执行；\n		</p>\n<p>\n			4、一个 M 调度 G 执行的过程是一个循环机制；\n		</p>\n<p>\n			5、当 M 执行某一个 G 时候如果发生了 syscall 或则其余阻塞操作，M 会阻塞，如果当前有一些 G 在执行，runtime 会把这个线程 M 从 P 中摘除 (detach)，然后再创建一个新的操作系统的线程 (如果有空闲的线程可用就复用空闲线程) 来服务于这个 P；\n		</p>\n<p>\n			6、当 M 系统调用结束时候，这个 G 会尝试获取一个空闲的 P 执行，并放入到这个 P 的本地队列。如果获取不到 P，那么这个线程 M 变成休眠状态， 加入到空闲线程中，然后这个 G 会被放入全局队列中。\n		</p>\n<h5 id=\"64b860\">\n<a name=\"undefined\"></a><span class=\"header-link octicon octicon-link\"></span>(4) 调度器的生命周期<a class=\"anchorific\" href=\"#64b860\">#</a>\n</h5>\n<p>\n<a class=\"fluidbox fluidbox__instance-14 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/j37FX8nek9.png!large\"></a>\n</p>\n<div class=\"fluidbox__wrap\">\n<a class=\"fluidbox fluidbox__instance-14 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/j37FX8nek9.png!large\"><img alt=\"17-pic-go调度器生命周期.png\" class=\"fluidbox__thumb\" src=\"https://cdn.learnku.com/uploads/images/202003/11/58489/j37FX8nek9.png!large\"/>\n<div class=\"fluidbox__ghost\">\n</div>\n</a>\n</div>\n<p>\n<br/>\n</p>\n<p>\n			特殊的 M0 和 G0\n		</p>\n<p>\n<strong>M0</strong>\n</p>\n<p>\n			M0是启动程序后的编号为 0 的主线程，这个 M 对应的实例会在全局变量 runtime.m0 中，不需要在 heap 上分配，M0 负责执行初始化操作和启动第一个 G， 在之后 M0 就和其他的 M 一样了。\n		</p>\n<p>\n<strong>G0</strong>\n</p>\n<p>\n			G0是每次启动一个 M 都会第一个创建的 gourtine，G0 仅用于负责调度的 G，G0 不指向任何可执行的函数，每个 M 都会有一个自己的 G0。在调度或系统调用时会使用 G0 的栈空间，全局变量的 G0 是 M0 的 G0。\n		</p>\n<p>\n			我们来跟踪一段代码\n		</p>\n<div>\n<pre class=\"language-go\"><span class=\"token keyword\">package</span> main <span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello world\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>Copy</pre>\n</div>\n<p>\n			接下来我们来针对上面的代码对调度器里面的结构做一个分析。\n		</p>\n<p>\n			也会经历如上图所示的过程：\n		</p>\n<ol>\n<li>\n				runtime 创建最初的线程 m0 和 goroutine g0，并把 2 者关联。\n			</li>\n<li>\n				调度器初始化：初始化 m0、栈、垃圾回收，以及创建和初始化由 GOMAXPROCS 个 P 构成的 P 列表。\n			</li>\n<li>\n				示例代码中的 main 函数是main.main，runtime中也有 1 个 main 函数 ——runtime.main，代码经过编译后，runtime.main会调用main.main，程序启动时会为runtime.main创建 goroutine，称它为 main goroutine 吧，然后把 main goroutine 加入到 P 的本地队列。\n			</li>\n<li>\n				启动 m0，m0 已经绑定了 P，会从 P 的本地队列获取 G，获取到 main goroutine。\n			</li>\n<li>\n				G 拥有栈，M 根据 G 中的栈信息和调度信息设置运行环境\n			</li>\n<li>\n				M 运行 G\n			</li>\n<li>\n				G 退出，再次回到 M 获取可运行的 G，这样重复下去，直到main.main退出，runtime.main执行 Defer 和 Panic 处理，或调用runtime.exit退出程序。\n			</li>\n</ol>\n<p>\n			调度器的生命周期几乎占满了一个 Go 程序的一生，runtime.main的 goroutine 执行之前都是为调度器做准备工作，runtime.main的 goroutine 运行，才是调度器的真正开始，直到runtime.main结束而结束。\n		</p>\n<h5 id=\"ff36f9\">\n<a name=\"undefined\"></a><span class=\"header-link octicon octicon-link\"></span>(5) 可视化 GMP 编程<a class=\"anchorific\" href=\"#ff36f9\">#</a>\n</h5>\n<p>\n			有 2 种方式可以查看一个程序的 GMP 的数据。\n		</p>\n<p>\n<strong>方式 1：go tool trace</strong>\n</p>\n<p>\n			trace 记录了运行时的信息，能提供可视化的 Web 页面。\n		</p>\n<p>\n			简单测试代码：main 函数创建 trace，trace 会运行在单独的 goroutine 中，然后 main 打印”Hello World” 退出。\n		</p>\n<blockquote>\n<p>\n				trace.go\n			</p>\n</blockquote>\n<div>\n<pre class=\"language-go\"><span class=\"token keyword\">package</span> main <span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">\"os\"</span> <span class=\"token string\">\"fmt\"</span> <span class=\"token string\">\"runtime/trace\"</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//创建trace文件</span> f<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"trace.out\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">defer</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//启动trace goroutine</span> err <span class=\"token operator\">=</span> trace<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">defer</span> trace<span class=\"token punctuation\">.</span><span class=\"token function\">Stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//main</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> Copy</pre>\n</div>\n<p>\n			运行程序\n		</p>\n<div>\n<pre class=\"language-bash\">$ go run trace.go \nHello WorldCopy</pre>\n</div>\n<p>\n			会得到一个trace.out文件，然后我们可以用一个工具打开，来分析这个文件。\n		</p>\n<div>\n<pre class=\"language-golang\">$ go tool trace trace.out \n2020/02/23 10:44:11 Parsing trace...\n2020/02/23 10:44:11 Splitting trace...\n2020/02/23 10:44:11 Opening browser. Trace viewer is listening on http://127.0.0.1:33479Copy</pre>\n</div>\n<p>\n			我们可以通过浏览器打开http://127.0.0.1:33479网址，点击view trace能够看见可视化的调度流程。\n		</p>\n<p>\n<a class=\"fluidbox fluidbox__instance-15 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/Xr9qi3emlx.png!large\"></a>\n</p>\n<div class=\"fluidbox__wrap\">\n<a class=\"fluidbox fluidbox__instance-15 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/Xr9qi3emlx.png!large\"><img alt=\"19-go-trace1.png\" class=\"fluidbox__thumb\" src=\"https://cdn.learnku.com/uploads/images/202003/11/58489/Xr9qi3emlx.png!large\"/>\n<div class=\"fluidbox__ghost\">\n</div>\n</a>\n</div>\n<p>\n<br/>\n</p>\n<p>\n<a class=\"fluidbox fluidbox__instance-16 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/vYyO9YJmam.png!large\"></a>\n</p>\n<div class=\"fluidbox__wrap\">\n<a class=\"fluidbox fluidbox__instance-16 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/vYyO9YJmam.png!large\"><img alt=\"20-go-trace2.png\" class=\"fluidbox__thumb\" src=\"https://cdn.learnku.com/uploads/images/202003/11/58489/vYyO9YJmam.png!large\"/>\n<div class=\"fluidbox__ghost\">\n</div>\n</a>\n</div>\n<p>\n<br/>\n</p>\n<p>\n<strong>G 信息</strong>\n</p>\n<p>\n			点击 Goroutines 那一行可视化的数据条，我们会看到一些详细的信息。\n		</p>\n<p>\n<a class=\"fluidbox fluidbox__instance-17 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/QLm0KK1hhd.png!large\"></a>\n</p>\n<div class=\"fluidbox__wrap\">\n<a class=\"fluidbox fluidbox__instance-17 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/QLm0KK1hhd.png!large\"><img alt=\"20-go-trace3.png\" class=\"fluidbox__thumb\" src=\"https://cdn.learnku.com/uploads/images/202003/11/58489/QLm0KK1hhd.png!large\"/>\n<div class=\"fluidbox__ghost\">\n</div>\n</a>\n</div>\n<p>\n<br/>\n</p>\n<div>\n<pre class=\"language-go\">一共有两个G在程序中，一个是特殊的G0，是每个M必须有的一个初始化的G，这个我们不必讨论。Copy</pre>\n</div>\n<p>\n			其中 G1 应该就是 main goroutine (执行 main 函数的协程)，在一段时间内处于可运行和运行的状态。\n		</p>\n<p>\n<strong>M 信息</strong>\n</p>\n<p>\n			点击 Threads 那一行可视化的数据条，我们会看到一些详细的信息。\n		</p>\n<p>\n<a class=\"fluidbox fluidbox__instance-18 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/mYYA4V17yF.png!large\"></a>\n</p>\n<div class=\"fluidbox__wrap\">\n<a class=\"fluidbox fluidbox__instance-18 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/mYYA4V17yF.png!large\"><img alt=\"22-go-trace4.png\" class=\"fluidbox__thumb\" src=\"https://cdn.learnku.com/uploads/images/202003/11/58489/mYYA4V17yF.png!large\"/>\n<div class=\"fluidbox__ghost\">\n</div>\n</a>\n</div>\n<p>\n<br/>\n</p>\n<p>\n			一共有两个 M 在程序中，一个是特殊的 M0，用于初始化使用，这个我们不必讨论。\n		</p>\n<p>\n<strong>P 信息</strong><br/>\n<a class=\"fluidbox fluidbox__instance-19 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/QbWwbth8uN.png!large\"></a>\n</p>\n<div class=\"fluidbox__wrap\">\n<a class=\"fluidbox fluidbox__instance-19 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/QbWwbth8uN.png!large\"><img alt=\"23-go-trace5.png\" class=\"fluidbox__thumb\" src=\"https://cdn.learnku.com/uploads/images/202003/11/58489/QbWwbth8uN.png!large\"/>\n<div class=\"fluidbox__ghost\">\n</div>\n</a>\n</div>\n<p>\n<br/>\n</p>\n<p>\n			G1 中调用了main.main，创建了trace goroutine g18。G1 运行在 P1 上，G18 运行在 P0 上。\n		</p>\n<p>\n			这里有两个 P，我们知道，一个 P 必须绑定一个 M 才能调度 G。\n		</p>\n<p>\n			我们在来看看上面的 M 信息。\n		</p>\n<p>\n<a class=\"fluidbox fluidbox__instance-20 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/5kS6NfpQAI.png!large\"></a>\n</p>\n<div class=\"fluidbox__wrap\">\n<a class=\"fluidbox fluidbox__instance-20 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/5kS6NfpQAI.png!large\"><img alt=\"24-go-trace6.png\" class=\"fluidbox__thumb\" src=\"https://cdn.learnku.com/uploads/images/202003/11/58489/5kS6NfpQAI.png!large\"/>\n<div class=\"fluidbox__ghost\">\n</div>\n</a>\n</div>\n<p>\n<br/>\n</p>\n<p>\n			我们会发现，确实 G18 在 P0 上被运行的时候，确实在 Threads 行多了一个 M 的数据，点击查看如下：\n		</p>\n<p>\n<a class=\"fluidbox fluidbox__instance-21 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/EN1OESafVZ.png!large\"></a>\n</p>\n<div class=\"fluidbox__wrap\">\n<a class=\"fluidbox fluidbox__instance-21 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/EN1OESafVZ.png!large\"><img alt=\"25-go-trace7.png\" class=\"fluidbox__thumb\" src=\"https://cdn.learnku.com/uploads/images/202003/11/58489/EN1OESafVZ.png!large\"/>\n<div class=\"fluidbox__ghost\">\n</div>\n</a>\n</div>\n<p>\n<br/>\n</p>\n<p>\n			多了一个 M2 应该就是 P0 为了执行 G18 而动态创建的 M2.\n		</p>\n<p>\n<strong>方式 2：Debug trace</strong>\n</p>\n<div>\n<pre class=\"language-go\"><span class=\"token keyword\">package</span> main <span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">\"fmt\"</span> <span class=\"token string\">\"time\"</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>Copy</pre>\n</div>\n<p>\n			编译\n		</p>\n<div>\n<pre class=\"language-bash\">$ go build trace2.goCopy</pre>\n</div>\n<p>\n			通过 Debug 方式运行\n		</p>\n<div>\n<pre class=\"language-bash\">$ GODEBUG<span class=\"token operator\">=</span>schedtrace<span class=\"token operator\">=</span>1000 ./trace2 \nSCHED 0ms: gomaxprocs<span class=\"token operator\">=</span>2 idleprocs<span class=\"token operator\">=</span>0 threads<span class=\"token operator\">=</span>4 spinningthreads<span class=\"token operator\">=</span>1 idlethreads<span class=\"token operator\">=</span>1 runqueue<span class=\"token operator\">=</span>0 <span class=\"token punctuation\">[</span>0 0<span class=\"token punctuation\">]</span> Hello World\nSCHED 1003ms: gomaxprocs<span class=\"token operator\">=</span>2 idleprocs<span class=\"token operator\">=</span>2 threads<span class=\"token operator\">=</span>4 spinningthreads<span class=\"token operator\">=</span>0 idlethreads<span class=\"token operator\">=</span>2 runqueue<span class=\"token operator\">=</span>0 <span class=\"token punctuation\">[</span>0 0<span class=\"token punctuation\">]</span> Hello World\nSCHED 2014ms: gomaxprocs<span class=\"token operator\">=</span>2 idleprocs<span class=\"token operator\">=</span>2 threads<span class=\"token operator\">=</span>4 spinningthreads<span class=\"token operator\">=</span>0 idlethreads<span class=\"token operator\">=</span>2 runqueue<span class=\"token operator\">=</span>0 <span class=\"token punctuation\">[</span>0 0<span class=\"token punctuation\">]</span> Hello World\nSCHED 3015ms: gomaxprocs<span class=\"token operator\">=</span>2 idleprocs<span class=\"token operator\">=</span>2 threads<span class=\"token operator\">=</span>4 spinningthreads<span class=\"token operator\">=</span>0 idlethreads<span class=\"token operator\">=</span>2 runqueue<span class=\"token operator\">=</span>0 <span class=\"token punctuation\">[</span>0 0<span class=\"token punctuation\">]</span> Hello World\nSCHED 4023ms: gomaxprocs<span class=\"token operator\">=</span>2 idleprocs<span class=\"token operator\">=</span>2 threads<span class=\"token operator\">=</span>4 spinningthreads<span class=\"token operator\">=</span>0 idlethreads<span class=\"token operator\">=</span>2 runqueue<span class=\"token operator\">=</span>0 <span class=\"token punctuation\">[</span>0 0<span class=\"token punctuation\">]</span> Hello WorldCopy</pre>\n</div>\n<ul>\n<li>\n				SCHED：调试信息输出标志字符串，代表本行是 goroutine 调度器的输出；\n			</li>\n<li>\n				0ms：即从程序启动到输出这行日志的时间；\n			</li>\n<li>\n				gomaxprocs: P 的数量，本例有 2 个 P, 因为默认的 P 的属性是和 cpu 核心数量默认一致，当然也可以通过 GOMAXPROCS 来设置；\n			</li>\n<li>\n				idleprocs: 处于 idle 状态的 P 的数量；通过 gomaxprocs 和 idleprocs 的差值，我们就可知道执行 go 代码的 P 的数量；\n			</li>\n<li>\n				threads: os threads/M的数量，包含 scheduler 使用的 m 数量，加上 runtime 自用的类似 sysmon 这样的 thread 的数量；\n			</li>\n<li>\n				spinningthreads: 处于自旋状态的 os thread 数量；\n			</li>\n<li>\n				idlethread: 处于 idle 状态的 os thread 的数量；\n			</li>\n<li>\n				runqueue=0： Scheduler 全局队列中 G 的数量；\n			</li>\n<li>\n				[0 0]: 分别为 2 个 P 的 local queue 中的 G 的数量。\n			</li>\n</ul>\n<p>\n			下一篇，我们来继续详细的分析 GMP 调度原理的一些场景问题。\n		</p>\n<h4 id=\"5c3da9\">\n<a name=\"undefined\"></a><span class=\"header-link octicon octicon-link\"></span>三、Go 调度器调度场景过程全解析<a class=\"anchorific\" href=\"#5c3da9\">#</a>\n</h4>\n<h5 id=\"5ce8ee\">\n<a name=\"undefined\"></a><span class=\"header-link octicon octicon-link\"></span>(1) 场景 1<a class=\"anchorific\" href=\"#5ce8ee\">#</a>\n</h5>\n<p>\n			P 拥有 G1，M1 获取 P 后开始运行 G1，G1 使用go func()创建了 G2，为了局部性 G2 优先加入到 P1 的本地队列。<br/>\n<a class=\"fluidbox fluidbox__instance-22 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/Pm8LOYcsWQ.png!large\"></a>\n</p>\n<div class=\"fluidbox__wrap\">\n<a class=\"fluidbox fluidbox__instance-22 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/Pm8LOYcsWQ.png!large\"><img alt=\"26-gmp场景1.png\" class=\"fluidbox__thumb\" src=\"https://cdn.learnku.com/uploads/images/202003/11/58489/Pm8LOYcsWQ.png!large\"/>\n<div class=\"fluidbox__ghost\">\n</div>\n</a>\n</div>\n<p>\n<br/>\n</p>\n<hr/>\n<h5 id=\"17f4eb\">\n<a name=\"undefined\"></a><span class=\"header-link octicon octicon-link\"></span>(2) 场景 2<a class=\"anchorific\" href=\"#17f4eb\">#</a>\n</h5>\n<p>\n			G1 运行完成后 (函数：goexit)，M 上运行的 goroutine 切换为 G0，G0 负责调度时协程的切换（函数：schedule）。从 P 的本地队列取 G2，从 G0 切换到 G2，并开始运行 G2 (函数：execute)。实现了线程 M1 的复用。\n		</p>\n<p>\n<a class=\"fluidbox fluidbox__instance-23 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/12/58489/JWDtmKG3rK.png!large\"></a>\n</p>\n<div class=\"fluidbox__wrap\">\n<a class=\"fluidbox fluidbox__instance-23 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/12/58489/JWDtmKG3rK.png!large\"><img alt=\"27-gmp场景2.png\" class=\"fluidbox__thumb\" src=\"https://cdn.learnku.com/uploads/images/202003/12/58489/JWDtmKG3rK.png!large\"/>\n<div class=\"fluidbox__ghost\">\n</div>\n</a>\n</div>\n<p>\n<br/>\n</p>\n<hr/>\n<h5 id=\"71d064\">\n<a name=\"undefined\"></a><span class=\"header-link octicon octicon-link\"></span>(3) 场景 3<a class=\"anchorific\" href=\"#71d064\">#</a>\n</h5>\n<p>\n			假设每个 P 的本地队列只能存 3 个 G。G2 要创建了 6 个 G，前 3 个 G（G3, G4, G5）已经加入 p1 的本地队列，p1 本地队列满了。\n		</p>\n<p>\n<a class=\"fluidbox fluidbox__instance-24 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/12/58489/UpjRxzIBd3.png!large\"></a>\n</p>\n<div class=\"fluidbox__wrap\">\n<a class=\"fluidbox fluidbox__instance-24 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/12/58489/UpjRxzIBd3.png!large\"><img alt=\"28-gmp场景3.png\" class=\"fluidbox__thumb\" src=\"https://cdn.learnku.com/uploads/images/202003/12/58489/UpjRxzIBd3.png!large\"/>\n<div class=\"fluidbox__ghost\">\n</div>\n</a>\n</div>\n<p>\n<br/>\n</p>\n<hr/>\n<h5 id=\"89af20\">\n<a name=\"undefined\"></a><span class=\"header-link octicon octicon-link\"></span>(4) 场景 4<a class=\"anchorific\" href=\"#89af20\">#</a>\n</h5>\n<p>\n			G2 在创建 G7 的时候，发现 P1 的本地队列已满，需要执行<strong>负载均衡</strong> (把 P1 中本地队列中前一半的 G，还有新创建 G <strong>转移</strong>到全局队列)\n		</p>\n<blockquote>\n<p>\n				（实现中并不一定是新的 G，如果 G 是 G2 之后就执行的，会被保存在本地队列，利用某个老的 G 替换新 G 加入全局队列）\n			</p>\n</blockquote>\n<p>\n<a class=\"fluidbox fluidbox__instance-25 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/chqTgsiuWi.png!large\"></a>\n</p>\n<div class=\"fluidbox__wrap\">\n<a class=\"fluidbox fluidbox__instance-25 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/chqTgsiuWi.png!large\"><img alt=\"29-gmp场景4.png\" class=\"fluidbox__thumb\" src=\"https://cdn.learnku.com/uploads/images/202003/11/58489/chqTgsiuWi.png!large\"/>\n<div class=\"fluidbox__ghost\">\n</div>\n</a>\n</div>\n<p>\n<br/>\n</p>\n<p>\n			这些 G 被转移到全局队列时，会被打乱顺序。所以 G3,G4,G7 被转移到全局队列。\n		</p>\n<hr/>\n<h5 id=\"34bdc5\">\n<a name=\"undefined\"></a><span class=\"header-link octicon octicon-link\"></span>(5) 场景 5<a class=\"anchorific\" href=\"#34bdc5\">#</a>\n</h5>\n<p>\n			G2 创建 G8 时，P1 的本地队列未满，所以 G8 会被加入到 P1 的本地队列。\n		</p>\n<p>\n<a class=\"fluidbox fluidbox__instance-26 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/12/58489/nukEY92G6D.png!large\"></a>\n</p>\n<div class=\"fluidbox__wrap\">\n<a class=\"fluidbox fluidbox__instance-26 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/12/58489/nukEY92G6D.png!large\"><img alt=\"30-gmp场景5.png\" class=\"fluidbox__thumb\" src=\"https://cdn.learnku.com/uploads/images/202003/12/58489/nukEY92G6D.png!large\"/>\n<div class=\"fluidbox__ghost\">\n</div>\n</a>\n</div>\n<p>\n<br/>\n</p>\n<p>\n			G8 加入到 P1 点本地队列的原因还是因为 P1 此时在与 M1 绑定，而 G2 此时是 M1 在执行。所以 G2 创建的新的 G 会优先放置到自己的 M 绑定的 P 上。\n		</p>\n<hr/>\n<h5 id=\"d0251c\">\n<a name=\"undefined\"></a><span class=\"header-link octicon octicon-link\"></span>(6) 场景 6<a class=\"anchorific\" href=\"#d0251c\">#</a>\n</h5>\n<p>\n			规定：<strong>在创建 G 时，运行的 G 会尝试唤醒其他空闲的 P 和 M 组合去执行</strong>。\n		</p>\n<p>\n<a class=\"fluidbox fluidbox__instance-27 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/2FWNXSuHfX.png!large\"></a>\n</p>\n<div class=\"fluidbox__wrap\">\n<a class=\"fluidbox fluidbox__instance-27 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/11/58489/2FWNXSuHfX.png!large\"><img alt=\"31-gmp场景6.png\" class=\"fluidbox__thumb\" src=\"https://cdn.learnku.com/uploads/images/202003/11/58489/2FWNXSuHfX.png!large\"/>\n<div class=\"fluidbox__ghost\">\n</div>\n</a>\n</div>\n<p>\n<br/>\n</p>\n<p>\n			假定 G2 唤醒了 M2，M2 绑定了 P2，并运行 G0，但 P2 本地队列没有 G，M2 此时为自旋线程<strong>（没有 G 但为运行状态的线程，不断寻找 G）</strong>。\n		</p>\n<hr/>\n<h5 id=\"ada5e5\">\n<a name=\"undefined\"></a><span class=\"header-link octicon octicon-link\"></span>(7) 场景 7<a class=\"anchorific\" href=\"#ada5e5\">#</a>\n</h5>\n<p>\n			M2 尝试从全局队列 (简称 “GQ”) 取一批 G 放到 P2 的本地队列（函数：findrunnable()）。M2 从全局队列取的 G 数量符合下面的公式：\n		</p>\n<div>\n<pre class=\"language-go\">n <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>GQ<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>GOMAXPROCS <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>GQ<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>Copy</pre>\n</div>\n<p>\n			至少从全局队列取 1 个 g，但每次不要从全局队列移动太多的 g 到 p 本地队列，给其他 p 留点。这是<strong>从全局队列到 P 本地队列的负载均衡</strong>。\n		</p>\n<p>\n<a class=\"fluidbox fluidbox__instance-28 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/12/58489/0fn8DGqI8N.jpeg!large\"></a>\n</p>\n<div class=\"fluidbox__wrap\">\n<a class=\"fluidbox fluidbox__instance-28 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/12/58489/0fn8DGqI8N.jpeg!large\"><img alt=\"32-gmp场景7.001.jpeg\" class=\"fluidbox__thumb\" src=\"https://cdn.learnku.com/uploads/images/202003/12/58489/0fn8DGqI8N.jpeg!large\"/>\n<div class=\"fluidbox__ghost\">\n</div>\n</a>\n</div>\n<p>\n<br/>\n</p>\n<p>\n			假定我们场景中一共有 4 个 P（GOMAXPROCS 设置为 4，那么我们允许最多就能用 4 个 P 来供 M 使用）。所以 M2 只从能从全局队列取 1 个 G（即 G3）移动 P2 本地队列，然后完成从 G0 到 G3 的切换，运行 G3。\n		</p>\n<hr/>\n<h5 id=\"fa2666\">\n<a name=\"undefined\"></a><span class=\"header-link octicon octicon-link\"></span>(8) 场景 8<a class=\"anchorific\" href=\"#fa2666\">#</a>\n</h5>\n<p>\n			假设 G2 一直在 M1 上运行，经过 2 轮后，M2 已经把 G7、G4 从全局队列获取到了 P2 的本地队列并完成运行，全局队列和 P2 的本地队列都空了，如场景 8 图的左半部分。\n		</p>\n<p>\n<a class=\"fluidbox fluidbox__instance-29 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/12/58489/qn1NRMLqnp.png!large\"></a>\n</p>\n<div class=\"fluidbox__wrap\">\n<a class=\"fluidbox fluidbox__instance-29 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/12/58489/qn1NRMLqnp.png!large\"><img alt=\"33-gmp场景8.png\" class=\"fluidbox__thumb\" src=\"https://cdn.learnku.com/uploads/images/202003/12/58489/qn1NRMLqnp.png!large\"/>\n<div class=\"fluidbox__ghost\">\n</div>\n</a>\n</div>\n<p>\n<br/>\n</p>\n<p>\n<strong>全局队列已经没有 G，那 m 就要执行 work stealing (偷取)：从其他有 G 的 P 哪里偷取一半 G 过来，放到自己的 P 本地队列</strong>。P2 从 P1 的本地队列尾部取一半的 G，本例中一半则只有 1 个 G8，放到 P2 的本地队列并执行。\n		</p>\n<hr/>\n<h5 id=\"0f9508\">\n<a name=\"undefined\"></a><span class=\"header-link octicon octicon-link\"></span>(9) 场景 9<a class=\"anchorific\" href=\"#0f9508\">#</a>\n</h5>\n<p>\n			G1 本地队列 G5、G6 已经被其他 M 偷走并运行完成，当前 M1 和 M2 分别在运行 G2 和 G8，M3 和 M4 没有 goroutine 可以运行，M3 和 M4 处于<strong>自旋状态</strong>，它们不断寻找 goroutine。\n		</p>\n<p>\n<a class=\"fluidbox fluidbox__instance-30 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/12/58489/1DjlseEGTT.png!large\"></a>\n</p>\n<div class=\"fluidbox__wrap\">\n<a class=\"fluidbox fluidbox__instance-30 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/12/58489/1DjlseEGTT.png!large\"><img alt=\"34-gmp场景9.png\" class=\"fluidbox__thumb\" src=\"https://cdn.learnku.com/uploads/images/202003/12/58489/1DjlseEGTT.png!large\"/>\n<div class=\"fluidbox__ghost\">\n</div>\n</a>\n</div>\n<p>\n<br/>\n</p>\n<p>\n			为什么要让 m3 和 m4 自旋，自旋本质是在运行，线程在运行却没有执行 G，就变成了浪费 CPU.  为什么不销毁现场，来节约 CPU 资源。因为创建和销毁 CPU 也会浪费时间，我们<strong>希望当有新 goroutine 创建时，立刻能有 M 运行它</strong>，如果销毁再新建就增加了时延，降低了效率。当然也考虑了过多的自旋线程是浪费 CPU，所以系统中最多有GOMAXPROCS个自旋的线程 (当前例子中的GOMAXPROCS=4，所以一共 4 个 P)，多余的没事做线程会让他们休眠。\n		</p>\n<hr/>\n<h5 id=\"806e57\">\n<a name=\"undefined\"></a><span class=\"header-link octicon octicon-link\"></span>(10) 场景 10<a class=\"anchorific\" href=\"#806e57\">#</a>\n</h5>\n<p>\n			假定当前除了 M3 和 M4 为自旋线程，还有 M5 和 M6 为空闲的线程 (没有得到 P 的绑定，注意我们这里最多就只能够存在 4 个 P，所以 P 的数量应该永远是 M&gt;=P, 大部分都是 M 在抢占需要运行的 P)，G8 创建了 G9，G8 进行了<strong>阻塞的系统调用</strong>，M2 和 P2 立即解绑，P2 会执行以下判断：如果 P2 本地队列有 G、全局队列有 G 或有空闲的 M，P2 都会立马唤醒 1 个 M 和它绑定，否则 P2 则会加入到空闲 P 列表，等待 M 来获取可用的 p。本场景中，P2 本地队列有 G9，可以和其他空闲的线程 M5 绑定。\n		</p>\n<p>\n<a class=\"fluidbox fluidbox__instance-31 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/12/58489/k3HKE9U21M.png!large\"></a>\n</p>\n<div class=\"fluidbox__wrap\">\n<a class=\"fluidbox fluidbox__instance-31 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/12/58489/k3HKE9U21M.png!large\"><img alt=\"35-gmp场景10.png\" class=\"fluidbox__thumb\" src=\"https://cdn.learnku.com/uploads/images/202003/12/58489/k3HKE9U21M.png!large\"/>\n<div class=\"fluidbox__ghost\">\n</div>\n</a>\n</div>\n<p>\n<br/>\n</p>\n<h5 id=\"fc0708\">\n<a name=\"undefined\"></a><span class=\"header-link octicon octicon-link\"></span>(11) 场景 11<a class=\"anchorific\" href=\"#fc0708\">#</a>\n</h5>\n<p>\n			G8 创建了 G9，假如 G8 进行了<strong>非阻塞系统调用</strong>。<br/>\n<a class=\"fluidbox fluidbox__instance-32 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/12/58489/zBvpl8ENSb.png!large\"></a>\n</p>\n<div class=\"fluidbox__wrap\">\n<a class=\"fluidbox fluidbox__instance-32 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://cdn.learnku.com/uploads/images/202003/12/58489/zBvpl8ENSb.png!large\"><img alt=\"36-gmp场景11.png\" class=\"fluidbox__thumb\" src=\"https://cdn.learnku.com/uploads/images/202003/12/58489/zBvpl8ENSb.png!large\"/>\n<div class=\"fluidbox__ghost\">\n</div>\n</a>\n</div>\n<p>\n<br/>\n</p>\n<p>\n			M2 和 P2 会解绑，但 M2 会记住 P2，然后 G8 和 M2 进入<strong>系统调用</strong>状态。当 G8 和 M2 退出系统调用时，会尝试获取 P2，如果无法获取，则获取空闲的 P，如果依然没有，G8 会被记为可运行状态，并加入到全局队列，M2 因为没有 P 的绑定而变成休眠状态 (长时间休眠等待 GC 回收销毁)。\n		</p>\n<hr/>\n<h4 id=\"7da648\">\n<a name=\"undefined\"></a><span class=\"header-link octicon octicon-link\"></span>四、小结<a class=\"anchorific\" href=\"#7da648\">#</a>\n</h4>\n<p>\n			总结，Go 调度器很轻量也很简单，足以撑起 goroutine 的调度工作，并且让 Go 具有了原生（强大）并发的能力。<strong>Go 调度本质是把大量的 goroutine 分配到少量线程上去执行，并利用多核并行，实现更强大的并发。</strong>\n</p>\n<p>\n<br/>\n</p>\n</div>\n</div>', 30);

-- ----------------------------
-- Table structure for blog_articleupdown
-- ----------------------------
DROP TABLE IF EXISTS `blog_articleupdown`;
CREATE TABLE `blog_articleupdown`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `is_up` tinyint(1) NOT NULL,
  `article_id` int(0) NULL DEFAULT NULL,
  `user_id` int(0) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `blog_articleupdown_user_id_article_id_caf9abf6_uniq`(`user_id`, `article_id`) USING BTREE,
  INDEX `blog_articleupdown_article_id_9be1a8a2_fk_blog_article_id`(`article_id`) USING BTREE,
  CONSTRAINT `blog_articleupdown_article_id_9be1a8a2_fk_blog_article_id` FOREIGN KEY (`article_id`) REFERENCES `blog_article` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `blog_articleupdown_user_id_2c0ebe49_fk_blog_userinfo_id` FOREIGN KEY (`user_id`) REFERENCES `blog_userinfo` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 10 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of blog_articleupdown
-- ----------------------------
INSERT INTO `blog_articleupdown` VALUES (1, 1, 29, 3);
INSERT INTO `blog_articleupdown` VALUES (2, 1, 28, 3);
INSERT INTO `blog_articleupdown` VALUES (3, 1, 27, 3);
INSERT INTO `blog_articleupdown` VALUES (4, 1, 26, 3);
INSERT INTO `blog_articleupdown` VALUES (5, 1, 25, 3);
INSERT INTO `blog_articleupdown` VALUES (6, 1, 23, 3);

-- ----------------------------
-- Table structure for blog_blog
-- ----------------------------
DROP TABLE IF EXISTS `blog_blog`;
CREATE TABLE `blog_blog`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `name` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `site_postfix` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `user_id` int(0) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `site_postfix`(`site_postfix`) USING BTREE,
  UNIQUE INDEX `user_id`(`user_id`) USING BTREE,
  CONSTRAINT `blog_blog_user_id_0e1a17e5_fk_blog_userinfo_id` FOREIGN KEY (`user_id`) REFERENCES `blog_userinfo` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 4 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of blog_blog
-- ----------------------------
INSERT INTO `blog_blog` VALUES (1, 'admin', 'admin', 1);
INSERT INTO `blog_blog` VALUES (3, 'vinci', NULL, 3);

-- ----------------------------
-- Table structure for blog_category
-- ----------------------------
DROP TABLE IF EXISTS `blog_category`;
CREATE TABLE `blog_category`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `name` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `blog_id` int(0) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `blog_category_blog_id_80f0723a_fk_blog_blog_id`(`blog_id`) USING BTREE,
  CONSTRAINT `blog_category_blog_id_80f0723a_fk_blog_blog_id` FOREIGN KEY (`blog_id`) REFERENCES `blog_blog` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of blog_category
-- ----------------------------
INSERT INTO `blog_category` VALUES (1, '生活', 1);
INSERT INTO `blog_category` VALUES (2, '技术', 1);

-- ----------------------------
-- Table structure for blog_comment
-- ----------------------------
DROP TABLE IF EXISTS `blog_comment`;
CREATE TABLE `blog_comment`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `content` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `comment_time` datetime(6) NOT NULL,
  `article_id` int(0) NOT NULL,
  `parent_comment_id` int(0) NULL DEFAULT NULL,
  `user_id` int(0) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `blog_comment_article_id_3d58bca6_fk_blog_article_id`(`article_id`) USING BTREE,
  INDEX `blog_comment_parent_comment_id_26791b9a_fk_blog_comment_id`(`parent_comment_id`) USING BTREE,
  INDEX `blog_comment_user_id_59a54155_fk_blog_userinfo_id`(`user_id`) USING BTREE,
  CONSTRAINT `blog_comment_article_id_3d58bca6_fk_blog_article_id` FOREIGN KEY (`article_id`) REFERENCES `blog_article` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `blog_comment_parent_comment_id_26791b9a_fk_blog_comment_id` FOREIGN KEY (`parent_comment_id`) REFERENCES `blog_comment` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `blog_comment_user_id_59a54155_fk_blog_userinfo_id` FOREIGN KEY (`user_id`) REFERENCES `blog_userinfo` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 34 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of blog_comment
-- ----------------------------
INSERT INTO `blog_comment` VALUES (30, '牛逼', '2020-09-11 14:46:56.783673', 29, NULL, 3);
INSERT INTO `blog_comment` VALUES (33, '麻麻地', '2020-09-11 14:49:36.802481', 29, NULL, 1);

-- ----------------------------
-- Table structure for blog_tag
-- ----------------------------
DROP TABLE IF EXISTS `blog_tag`;
CREATE TABLE `blog_tag`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `name` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `blog_id` int(0) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `blog_tag_blog_id_a8c60c42_fk_blog_blog_id`(`blog_id`) USING BTREE,
  CONSTRAINT `blog_tag_blog_id_a8c60c42_fk_blog_blog_id` FOREIGN KEY (`blog_id`) REFERENCES `blog_blog` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of blog_tag
-- ----------------------------
INSERT INTO `blog_tag` VALUES (1, '随笔', 1);

-- ----------------------------
-- Table structure for blog_userinfo
-- ----------------------------
DROP TABLE IF EXISTS `blog_userinfo`;
CREATE TABLE `blog_userinfo`  (
  `password` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `last_login` datetime(6) NULL DEFAULT NULL,
  `is_superuser` tinyint(1) NOT NULL,
  `username` varchar(150) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `first_name` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `last_name` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `email` varchar(254) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `is_staff` tinyint(1) NOT NULL,
  `is_active` tinyint(1) NOT NULL,
  `date_joined` datetime(6) NOT NULL,
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `nickname` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `avatar` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `reg_data` date NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `username`(`username`) USING BTREE,
  INDEX `blog_userinfo_nickname_3894bee8`(`nickname`) USING BTREE,
  INDEX `blog_userinfo_avatar_fc5aa94a`(`avatar`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 4 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of blog_userinfo
-- ----------------------------
INSERT INTO `blog_userinfo` VALUES ('pbkdf2_sha256$36000$8zo2aIjTcC5o$262dUMVjePvQtLDcCmgqnSLx/3/OOgyc/EmtmMQatGo=', '2020-09-29 17:14:13.143819', 1, 'admin', '', '', '', 1, 1, '2019-05-08 13:21:41.000000', 1, 'admin', 'media/avatars/default.jpg', '2018-11-22');
INSERT INTO `blog_userinfo` VALUES ('pbkdf2_sha256$36000$E2wguYZhK7ET$SU0/j7Q72b7UQGsss6Jhy9q3C9BrhMb8N68v0kH4I6w=', '2020-09-14 10:18:42.463737', 0, 'vinci', '', '', '184882861@qq.com', 0, 1, '2020-09-11 14:46:02.809010', 3, 'vinci', 'media/avatars/default.jpg', '2020-09-11');

-- ----------------------------
-- Table structure for blog_userinfo_groups
-- ----------------------------
DROP TABLE IF EXISTS `blog_userinfo_groups`;
CREATE TABLE `blog_userinfo_groups`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `userinfo_id` int(0) NOT NULL,
  `group_id` int(0) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `blog_userinfo_groups_userinfo_id_group_id_5f60ecec_uniq`(`userinfo_id`, `group_id`) USING BTREE,
  INDEX `blog_userinfo_groups_group_id_1fb5e93a_fk_auth_group_id`(`group_id`) USING BTREE,
  CONSTRAINT `blog_userinfo_groups_group_id_1fb5e93a_fk_auth_group_id` FOREIGN KEY (`group_id`) REFERENCES `auth_group` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `blog_userinfo_groups_userinfo_id_f6f0498b_fk_blog_userinfo_id` FOREIGN KEY (`userinfo_id`) REFERENCES `blog_userinfo` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for blog_userinfo_user_permissions
-- ----------------------------
DROP TABLE IF EXISTS `blog_userinfo_user_permissions`;
CREATE TABLE `blog_userinfo_user_permissions`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `userinfo_id` int(0) NOT NULL,
  `permission_id` int(0) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `blog_userinfo_user_permi_userinfo_id_permission_i_7d343093_uniq`(`userinfo_id`, `permission_id`) USING BTREE,
  INDEX `blog_userinfo_user_p_permission_id_ace80f7e_fk_auth_perm`(`permission_id`) USING BTREE,
  CONSTRAINT `blog_userinfo_user_p_permission_id_ace80f7e_fk_auth_perm` FOREIGN KEY (`permission_id`) REFERENCES `auth_permission` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `blog_userinfo_user_p_userinfo_id_57e76697_fk_blog_user` FOREIGN KEY (`userinfo_id`) REFERENCES `blog_userinfo` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for django_admin_log
-- ----------------------------
DROP TABLE IF EXISTS `django_admin_log`;
CREATE TABLE `django_admin_log`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `action_time` datetime(6) NOT NULL,
  `object_id` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `object_repr` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `action_flag` smallint(0) UNSIGNED NOT NULL,
  `change_message` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `content_type_id` int(0) NULL DEFAULT NULL,
  `user_id` int(0) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `django_admin_log_content_type_id_c4bce8eb_fk_django_co`(`content_type_id`) USING BTREE,
  INDEX `django_admin_log_user_id_c564eba6_fk_blog_userinfo_id`(`user_id`) USING BTREE,
  CONSTRAINT `django_admin_log_content_type_id_c4bce8eb_fk_django_co` FOREIGN KEY (`content_type_id`) REFERENCES `django_content_type` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `django_admin_log_user_id_c564eba6_fk_blog_userinfo_id` FOREIGN KEY (`user_id`) REFERENCES `blog_userinfo` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 4 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of django_admin_log
-- ----------------------------
INSERT INTO `django_admin_log` VALUES (1, '2019-05-08 13:23:29.065628', '1', 'admin', 1, '[{\"added\": {}}]', 11, 1);
INSERT INTO `django_admin_log` VALUES (2, '2019-05-08 22:43:05.709806', '1', 'admin', 2, '[{\"changed\": {\"fields\": [\"nickname\"]}}]', 6, 1);
INSERT INTO `django_admin_log` VALUES (3, '2020-09-11 14:44:25.552617', '2', 'ghjghj', 3, '', 6, 1);
INSERT INTO `django_admin_log` VALUES (4, '2020-09-29 17:14:25.151226', '4', 'pink', 3, '', 6, 1);

-- ----------------------------
-- Table structure for django_content_type
-- ----------------------------
DROP TABLE IF EXISTS `django_content_type`;
CREATE TABLE `django_content_type`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `app_label` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `model` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `django_content_type_app_label_model_76bd3d3b_uniq`(`app_label`, `model`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 15 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of django_content_type
-- ----------------------------
INSERT INTO `django_content_type` VALUES (1, 'admin', 'logentry');
INSERT INTO `django_content_type` VALUES (3, 'auth', 'group');
INSERT INTO `django_content_type` VALUES (2, 'auth', 'permission');
INSERT INTO `django_content_type` VALUES (7, 'blog', 'article');
INSERT INTO `django_content_type` VALUES (8, 'blog', 'article2tag');
INSERT INTO `django_content_type` VALUES (9, 'blog', 'articledetail');
INSERT INTO `django_content_type` VALUES (10, 'blog', 'articleupdown');
INSERT INTO `django_content_type` VALUES (11, 'blog', 'blog');
INSERT INTO `django_content_type` VALUES (12, 'blog', 'category');
INSERT INTO `django_content_type` VALUES (13, 'blog', 'comment');
INSERT INTO `django_content_type` VALUES (14, 'blog', 'tag');
INSERT INTO `django_content_type` VALUES (6, 'blog', 'userinfo');
INSERT INTO `django_content_type` VALUES (4, 'contenttypes', 'contenttype');
INSERT INTO `django_content_type` VALUES (5, 'sessions', 'session');

-- ----------------------------
-- Table structure for django_migrations
-- ----------------------------
DROP TABLE IF EXISTS `django_migrations`;
CREATE TABLE `django_migrations`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `app` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `applied` datetime(6) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 15 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of django_migrations
-- ----------------------------
INSERT INTO `django_migrations` VALUES (1, 'contenttypes', '0001_initial', '2019-05-08 13:19:29.665936');
INSERT INTO `django_migrations` VALUES (2, 'contenttypes', '0002_remove_content_type_name', '2019-05-08 13:19:30.618990');
INSERT INTO `django_migrations` VALUES (3, 'auth', '0001_initial', '2019-05-08 13:19:34.088188');
INSERT INTO `django_migrations` VALUES (4, 'auth', '0002_alter_permission_name_max_length', '2019-05-08 13:19:34.736226');
INSERT INTO `django_migrations` VALUES (5, 'auth', '0003_alter_user_email_max_length', '2019-05-08 13:19:34.767227');
INSERT INTO `django_migrations` VALUES (6, 'auth', '0004_alter_user_username_opts', '2019-05-08 13:19:34.837231');
INSERT INTO `django_migrations` VALUES (7, 'auth', '0005_alter_user_last_login_null', '2019-05-08 13:19:34.987240');
INSERT INTO `django_migrations` VALUES (8, 'auth', '0006_require_contenttypes_0002', '2019-05-08 13:19:35.051244');
INSERT INTO `django_migrations` VALUES (9, 'auth', '0007_alter_validators_add_error_messages', '2019-05-08 13:19:35.100246');
INSERT INTO `django_migrations` VALUES (10, 'auth', '0008_alter_user_username_max_length', '2019-05-08 13:19:35.160250');
INSERT INTO `django_migrations` VALUES (11, 'blog', '0001_initial', '2019-05-08 13:19:51.345175');
INSERT INTO `django_migrations` VALUES (12, 'admin', '0001_initial', '2019-05-08 13:19:53.020271');
INSERT INTO `django_migrations` VALUES (13, 'admin', '0002_logentry_remove_auto_add', '2019-05-08 13:19:53.094276');
INSERT INTO `django_migrations` VALUES (14, 'sessions', '0001_initial', '2019-05-08 13:19:53.677309');

-- ----------------------------
-- Table structure for django_session
-- ----------------------------
DROP TABLE IF EXISTS `django_session`;
CREATE TABLE `django_session`  (
  `session_key` varchar(40) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `session_data` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `expire_date` datetime(6) NOT NULL,
  PRIMARY KEY (`session_key`) USING BTREE,
  INDEX `django_session_expire_date_a5c62663`(`expire_date`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of django_session
-- ----------------------------
INSERT INTO `django_session` VALUES ('0rooq4dwnnsnavsdu2kh9vmm7hx40cew', 'NjlhMGQ0MGFmOGFkYWQ3NTIzOTg3ZDkzZjMxYWQzY2ZjMmVlZmY2Mzp7InZhbGlkX3N0ciI6IlpPMjFmIn0=', '2020-02-02 19:28:32.386592');
INSERT INTO `django_session` VALUES ('165cq9u6ani5es501za7ejphu9t564i4', 'ZTA0Y2Q1NWMyNmMzMzI2NWExZGNiZTNjNzVjMDI2ZTI1NmEyNWUzZjp7InZhbGlkX3N0ciI6IkJPcnE5In0=', '2019-10-26 12:54:34.657676');
INSERT INTO `django_session` VALUES ('1908vcfo0moi3avjgtjftjnt5v355eek', 'MzNmZDU0ZGY3OGVlMzI4Y2Q1ZWJjMGNhZTU3MjBkMTU0YjZiNzdmNzp7InZhbGlkX3N0ciI6Ik9YRWlpIn0=', '2019-10-26 13:07:59.644439');
INSERT INTO `django_session` VALUES ('190fi4py0n1b6cq9yqh5tgvwp2n8mg9a', 'Yzk1NmZmZjk4Y2UyMDNjMzk2ODhmYzFhYzllYjI0YzhhMjIwMWM0OTp7InZhbGlkX3N0ciI6IjI3UzM3In0=', '2020-10-03 18:16:05.967063');
INSERT INTO `django_session` VALUES ('28y4donkhix8hnstdo119eom3oshodpy', 'YmQ3ZjNhZTEzZmFlM2M5ZGY0NmIzZDY3NTQ4NDQ0NGYyYjVlZWU1Yjp7InZhbGlkX3N0ciI6IjZRMjJHIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaGFzaCI6IjFkMjU1YzlmYzA3NGE0NjgxNWEyMTcxMmU1ZmU2NTlmZWIwNTI4YWEifQ==', '2020-03-31 16:43:46.451829');
INSERT INTO `django_session` VALUES ('3sc110nqz9k7vmxm5gxqmkh9hx4tky3m', 'M2Y2MGI2MDMzYmJkYTc2MGZlMzYxMjQzNmY3MTgyZmQ2ZmE1NmEyNDp7InZhbGlkX3N0ciI6Ijg5MjZiIn0=', '2020-01-22 01:47:32.074915');
INSERT INTO `django_session` VALUES ('4ig5wurib9t1f3q37di6qltwt9nzyhht', 'OWVkYTM1Yjc3NTVjOWIzYzYwODUwOTdiMTQ3NTVhZmU0ODBjM2Q1Mjp7InZhbGlkX3N0ciI6IkRodFhsIn0=', '2019-10-26 19:10:06.522674');
INSERT INTO `django_session` VALUES ('4rsmlh24048eghd1wf1h1kmbwxxmfoiz', 'NzUzZjkwNmI5YjFjOGRiOGQ2ZDhmOTZmYmMxYjZlMDE4NGZlMDYzZDp7InZhbGlkX3N0ciI6Ikxmd2JPIn0=', '2019-10-26 19:15:05.540531');
INSERT INTO `django_session` VALUES ('52mx3o43ksn4m3bwzmr2jsbr1luyk7yg', 'OTVlMzFiZmEyZTk5MDcxZWI4Njg2MzNlZTIzOWYxODViMmM0ODgzZjp7InZhbGlkX3N0ciI6IjFnMzdHIn0=', '2019-10-21 16:39:47.012532');
INSERT INTO `django_session` VALUES ('5l7vyxysttxgsiwq0v05l7lmsipvuwgn', 'YmUxYmMxYzYyYWI5NzRiZDc1NTY1YTE3YThjNDE1ZTA3MDcxNjNlZTp7InZhbGlkX3N0ciI6IjFGMXNLIn0=', '2020-10-04 19:57:22.504300');
INSERT INTO `django_session` VALUES ('7g0bkpefkaueqzdl5xccuvozfsuy1y32', 'Y2I3NjQ3Zjk0ODk4YmVjOTdmOTJiZTM4NTJkMmU1YTNjZmJiNjk0Nzp7InZhbGlkX3N0ciI6IkhBNkFwIn0=', '2019-10-26 12:54:21.288183');
INSERT INTO `django_session` VALUES ('928v6dhpsc4yezmf3lya1a8xem8oys46', 'YzAyMWJjZTg0NmJkN2IyZmVjMGMyMDViYjNmMDA1ZDIyMWNlZWVhYjp7InZhbGlkX3N0ciI6IjYwbGkxIn0=', '2019-12-11 14:21:57.016148');
INSERT INTO `django_session` VALUES ('c62shofol4s6vcuugvsvpf79iwh43myu', 'Y2JlNzZhYjc3ZDAwMDM5MzliMjBlZTg3YWU0NDFhNDVjZDNjMzJiMTp7InZhbGlkX3N0ciI6Ik5ZdDRPIn0=', '2019-10-22 06:47:46.486812');
INSERT INTO `django_session` VALUES ('dh2bcwga0z7om6q2cvgxctr7mjyxpbc4', 'OThlM2VjY2FlZGNiYWUwYTcyNTFlMmNlYjk1ZjA2M2MxYTdlZTA2Nzp7InZhbGlkX3N0ciI6IjNQVnpsIn0=', '2019-10-26 12:50:56.425750');
INSERT INTO `django_session` VALUES ('gvsqpn4ne6ntzaaqci7984gh4g55gs0x', 'YmFiZjA3NzUyYzlhMTBmNzJlNmZjYWM0NDM3OTM2NjZlMzY0MjBkMTp7InZhbGlkX3N0ciI6IjIzOEdFIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaGFzaCI6IjFkMjU1YzlmYzA3NGE0NjgxNWEyMTcxMmU1ZmU2NTlmZWIwNTI4YWEifQ==', '2019-05-22 13:22:02.996706');
INSERT INTO `django_session` VALUES ('i2xfln1yllumr3fdqi8nw5t1syq2bjoz', 'MjFiODg1NTVlODM0OTE4ODdmZTJkNjljOTYzZGJmMmFlZTYxMDQ3YTp7InZhbGlkX3N0ciI6IjlHeDkxIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaGFzaCI6IjFkMjU1YzlmYzA3NGE0NjgxNWEyMTcxMmU1ZmU2NTlmZWIwNTI4YWEifQ==', '2019-10-23 22:11:56.058186');
INSERT INTO `django_session` VALUES ('ka016ioxxkr66byxkk0kxku8tytadfek', 'MTU0ZmRhM2VmMDE4NDBmZWY5OWQ1MDA1YWI1Nzg0YjJjZWE5Y2EzMTp7InZhbGlkX3N0ciI6IkJUOUdtIn0=', '2019-10-26 14:42:21.566746');
INSERT INTO `django_session` VALUES ('kmh2senl2uk1hutuqlaq8woijb5qqxy2', 'MTQ5YzY0NTYxNTVhM2ZlYjVjM2ZlN2VlMWY5MDNkNjkxYzY0ODhiNzp7InZhbGlkX3N0ciI6IkVQcUNBIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaGFzaCI6IjFkMjU1YzlmYzA3NGE0NjgxNWEyMTcxMmU1ZmU2NTlmZWIwNTI4YWEifQ==', '2020-04-27 09:01:18.171329');
INSERT INTO `django_session` VALUES ('l2zwj82nrgm9qam9gf0l751hwo420ss8', 'NTNmODJiYWNiMjUyYmM3MTAzM2Q1OTliNmU1ZDMxYmMwNWYxZWNkZDp7InZhbGlkX3N0ciI6IlA2Q0JCIn0=', '2019-10-21 16:46:04.452487');
INSERT INTO `django_session` VALUES ('l3vo3dt1zjf8nm8vpvv9n4mafdqyzwjs', 'YTNlYzA5ZTQwMjYwZTJhOWEzZjYwMzM1MTNmMThjNWVlMWFiNTE5Mzp7InZhbGlkX3N0ciI6IkM5NzNhIn0=', '2019-10-26 19:24:01.105231');
INSERT INTO `django_session` VALUES ('llhjkr8cu9vkcpvz2tmqbd2f7vw5idqb', 'ZTM5YTcxM2MwYTZjYjk0NjNmMmJiNTdiM2FhNzI2MzY5YjU3MjI4NTp7InZhbGlkX3N0ciI6ImNDck1RIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaGFzaCI6IjFkMjU1YzlmYzA3NGE0NjgxNWEyMTcxMmU1ZmU2NTlmZWIwNTI4YWEifQ==', '2019-06-18 20:46:09.959857');
INSERT INTO `django_session` VALUES ('llx1knsr7lofdbffp2hn2m213lo4h2ko', 'NThlMDhmMzY3NjhlM2ZhMDJlNmE5YzM3ZjYyNmU4YjliNTMwZmUxMzp7InZhbGlkX3N0ciI6InlMczh5In0=', '2019-10-21 16:52:32.753622');
INSERT INTO `django_session` VALUES ('lmdxq5fjswpgthl3bq0kh6uqs3ckhfyb', 'N2JhZmM0NzVjZjJmMTU0YWQ0MDNkNDFkYmQxOGYzYThhZTMzZjI5OTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiJiY2Y1NmYwNmM2YmM3NGFjZDdlN2JlODg3OWY3YTllMDlkMGQ1MDgwIn0=', '2020-10-13 17:14:13.149551');
INSERT INTO `django_session` VALUES ('o43gf6bx4mg66l9rkdl0u935v18oljus', 'MGI5MWY4MDY4NjczYzg3YjNiYzg2MzJjODYzNzFlNGEyNjI1ZDcxMzp7InZhbGlkX3N0ciI6IkxEV0NWIn0=', '2019-12-05 06:30:50.169628');
INSERT INTO `django_session` VALUES ('omi80m7ud5bo3dbk8favhzyfeqrxxgw9', 'NDllZTIxZmNlYjI1MjY0MmVhOGM5ZjBmMDRjMTY1ZDNiYzhmY2FhYjp7InZhbGlkX3N0ciI6InRjVmg2IiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaGFzaCI6IjFkMjU1YzlmYzA3NGE0NjgxNWEyMTcxMmU1ZmU2NTlmZWIwNTI4YWEifQ==', '2020-05-18 20:09:33.438005');
INSERT INTO `django_session` VALUES ('pr96m8egyspllv0gg01uk9iwpi3vcgv3', 'ZDMyNDkyZTk2NDNkMjAyODIyY2ZkNTQzNTg2ZTYyNDg2Nzg5MDczMjp7InZhbGlkX3N0ciI6IjNhSWs2In0=', '2020-01-19 01:47:59.663205');
INSERT INTO `django_session` VALUES ('rs9y3vu2gny866evos4w1rp2dfub2w2y', 'MTg1NDJiYzQ5OTBmMDMzMzZmY2Y5Mjk0NjUwZThmZjg2YzczNTViMjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxZDI1NWM5ZmMwNzRhNDY4MTVhMjE3MTJlNWZlNjU5ZmViMDUyOGFhIn0=', '2020-09-25 14:44:03.709640');
INSERT INTO `django_session` VALUES ('s7ro3eer1ex487zjj1eikt2cuno361ki', 'NTgzNTM4ZTNmZjkxNmI2MjdiNWQ3NmEzMWY4N2RiNWI4Y2FhNDUzYTp7InZhbGlkX3N0ciI6IlU5WkZBIn0=', '2019-10-26 18:26:28.927430');
INSERT INTO `django_session` VALUES ('smkrws26palyfvetr7mhw49jbm9mroqj', 'NjM3OGNiMmEwNWRlZTQzMzEyMTk4NzA3YjU4OGQxMjI0NDQ1OTRjOTp7InZhbGlkX3N0ciI6InE2aEVvIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaGFzaCI6IjFkMjU1YzlmYzA3NGE0NjgxNWEyMTcxMmU1ZmU2NTlmZWIwNTI4YWEifQ==', '2020-02-09 18:53:56.082258');
INSERT INTO `django_session` VALUES ('t65k162h8u51xoqlr7kcutcp23dnx8y0', 'ZWZiZGM4ZDcwYjllMTczZWVkNjdmYjQ4NjgzNDAxYWI4ZWM2MjAzYjp7InZhbGlkX3N0ciI6IndNOTdvIn0=', '2020-01-30 14:28:34.681646');
INSERT INTO `django_session` VALUES ('tf148tl503q30lln5sjpzhcczb9e77wr', 'NWVkOGVkZTg5MjY4NmU1MWRlNDMxZTIwOGFkNjNiOGJmZGJhYjI3ZTp7InZhbGlkX3N0ciI6Ikx6MzVpIn0=', '2019-10-26 13:48:15.540954');
INSERT INTO `django_session` VALUES ('ui1ab1gb7w59vymd0glmu4jd9pnljtjs', 'YWU1NDBjYTlhMDViN2RmZjhjMDFhMWJlMDY1NmI5OTNlODllNzczYjp7InZhbGlkX3N0ciI6IkRLZEEwIn0=', '2019-10-26 14:06:19.615350');
INSERT INTO `django_session` VALUES ('v98m86foxh5eq5xkjdlf33t69x3mlc7w', 'NDYyMWE1YWMwMTQ5MWUzYmQwM2I0MzlhODExNzg3YTY0NzA4YWY4Njp7InZhbGlkX3N0ciI6IktHM3hUIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaGFzaCI6IjFkMjU1YzlmYzA3NGE0NjgxNWEyMTcxMmU1ZmU2NTlmZWIwNTI4YWEifQ==', '2020-01-26 22:03:17.464888');
INSERT INTO `django_session` VALUES ('vesbswrgb14ytp5mucesgpkqnwd6iyp2', 'ZjA4ZDczNjVlODJiNDJjOTgyNmE1NTJlMDJmMzY5ZmVjYTI4MDk5ODp7InZhbGlkX3N0ciI6IjZyOFZzIn0=', '2019-10-26 12:53:13.313097');
INSERT INTO `django_session` VALUES ('w6ggfe1rxxjylxf7vzxcy7lwhvw6fmzs', 'ZTNhY2NiOWQwYmQ0Y2I4NjgxOTk2NTUxMTJhNzVhMDE0ZjVmNDQ2Zjp7InZhbGlkX3N0ciI6IkI5OXBkIn0=', '2020-03-05 20:53:46.985091');
INSERT INTO `django_session` VALUES ('w7exl184p9hgf8hpk91zzh6t2od1wzpu', 'YmY5MTZlNDE4MDRiOGI4Y2Y2M2FhY2NiMDNlZjc3NzliNzBhZmE3Yzp7InZhbGlkX3N0ciI6IjAxOFUwIn0=', '2019-10-26 13:20:26.028715');
INSERT INTO `django_session` VALUES ('wdeh5flfj3xs4qmcwe5iyw4oigyail72', 'OGU0MDRjNmVkZTdmMzM0MzViZGZmYWM0OTBjZGI5ZTNjYjFkOGY0OTp7InZhbGlkX3N0ciI6ImlWWTdqIn0=', '2019-10-26 13:17:11.148676');
INSERT INTO `django_session` VALUES ('xmblon4wxysvzkvw3q75fxxlwy7la7pl', 'MjUwMGMxNDlhYzRiMmRlYjAyZTJlMDcyY2Q1NzA0ZjYyNWM3YjdlNzp7InZhbGlkX3N0ciI6IjQ3VVZUIn0=', '2019-10-26 12:53:05.424071');
INSERT INTO `django_session` VALUES ('y8r8z5ajf1hivsqzft3q5sqxb0lh54p4', 'ZjBjNDgwYWM1ZTRjZWE2ZDIxZWYyNWUwMWQxNjY2NzFiZjc1ZWVmZTp7InZhbGlkX3N0ciI6IjRLWDJEIn0=', '2019-10-22 13:06:38.532250');
INSERT INTO `django_session` VALUES ('yzynzopzbtbfuevb2yil9t80urfi3eht', 'NTQ5MGNiNmEwMzA0NjMyNTJiOTczOTBiYTljMWM2NTUyNWJkNGU2Mzp7InZhbGlkX3N0ciI6IlpjbjB4In0=', '2020-02-05 12:51:05.239570');
INSERT INTO `django_session` VALUES ('zvr1sofamffsm0lltc4a1ehc5qv8wsqu', 'ZDhlNzUwZDMwYzdhZDQ4YTZlZmFkNDhmYzRiYTIwN2Y2OGJlNDNiYjp7InZhbGlkX3N0ciI6IkJXcmdaIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaGFzaCI6IjFkMjU1YzlmYzA3NGE0NjgxNWEyMTcxMmU1ZmU2NTlmZWIwNTI4YWEifQ==', '2019-10-20 17:32:00.878136');

SET FOREIGN_KEY_CHECKS = 1;
